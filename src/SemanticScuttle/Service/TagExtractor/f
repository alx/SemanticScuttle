
chdir(/usr/share/vim)
fchdir() to previous dir
sourcing "$VIM/vimrc"
line 1: " All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
line 2: " the call to :runtime you can find below.  If you wish to change any of those
line 3: " settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
line 4: " will be overwritten everytime an upgrade of the vim packages is performed.
line 5: " It is recommended to make changes after sourcing debian.vim since it alters
line 6: " the value of the 'compatible' option.
line 7: 
line 8: " This line should not be removed as it ensures that various options are
line 9: " properly set to work with the Vim-related packages available in Debian.
line 10: runtime! debian.vim
Searching for "debian.vim" in "/home/kguest/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/debian.vim"
Searching for "/usr/share/vim/vimfiles/debian.vim"
Searching for "/usr/share/vim/vim74/debian.vim"
chdir(/usr/share/vim/vim74)
fchdir() to previous dir
line 10: sourcing "/usr/share/vim/vim74/debian.vim"
line 1: " Debian system-wide default configuration Vim
line 2: 
line 3: set runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after
line 4: 
line 5: " Normally we use vim-extensions. If you want true vi-compatibility
line 6: " remove change the following statements
line 7: set nocompatible^I" Use Vim defaults instead of 100% vi compatibility
line 8: set backspace=indent,eol,start^I" more powerful backspacing
line 9: 
line 10: " Now we set some defaults for the editor
line 11: set history=50^I^I" keep 50 lines of command line history
line 12: set ruler^I^I" show the cursor position all the time
line 13: 
line 14: " modelines have historically been a source of security/resource
line 15: " vulnerabilities -- disable by default, even when 'nocompatible' is set
line 16: set nomodeline
line 17: 
line 18: " Suffixes that get lower priority when doing tab completion for filenames.
line 19: " These are files we are not likely to want to edit or read.
line 20: set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
line 21: 
line 22: " We know xterm-debian is a color terminal
line 23: if &term =~ "xterm-debian" || &term =~ "xterm-xfree86"
line 24:   set t_Co=16
line 25:   set t_Sf=^[[3%dm
line 26:   set t_Sb=^[[4%dm
line 27: endif
line 28: 
line 29: " Some Debian-specific things
line 30: if has("autocmd")
line 31:   " set mail filetype for reportbug's temp files
line 32:   augroup debian
line 33:     au BufRead reportbug-*^I^Iset ft=mail
line 34:   augroup END
line 35: endif
line 36: 
line 37: " Set paper size from /etc/papersize if available (Debian-specific)
line 38: if filereadable("/etc/papersize")
line 39:   let s:papersize = matchstr(readfile('/etc/papersize', '', 1), '\p*')
line 40:   if strlen(s:papersize)
line 41:     exe "set printoptions+=paper:" . s:papersize
line 41: set printoptions+=paper:a4
line 42:   endif
line 43: endif
line 44: 
line 45: if has('gui_running')
line 46:   " Make shift-insert work like in Xterm
line 47:   map <S-Insert> <MiddleMouse>
line 48:   map! <S-Insert> <MiddleMouse>
line 49: endif
finished sourcing /usr/share/vim/vim74/debian.vim
continuing in /usr/share/vim/vimrc
Searching for "/usr/share/vim/vimfiles/after/debian.vim"
Searching for "/home/kguest/.vim/after/debian.vim"
line 11: 
line 12: " Uncomment the next line to make Vim more Vi-compatible
line 13: " NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
line 14: " options, so any other options should be set AFTER setting 'compatible'.
line 15: "set compatible
line 16: 
line 17: " Vim5 and later versions support syntax highlighting. Uncommenting the next
line 18: " line enables syntax highlighting by default.
line 19: if has("syntax")
line 20:   syntax on
line 20: so $VIMRUNTIME/syntax/syntax.vim
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 20: sourcing "/usr/share/vim/vim74/syntax/syntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 04
line 4: 
line 5: " This file is used for ":syntax on".
line 6: " It installs the autocommands and starts highlighting for all buffers.
line 7: 
line 8: if !has("syntax")
line 9:   finish
line 10: endif
line 11: 
line 12: " If Syntax highlighting appears to be on already, turn it off first, so that
line 13: " any leftovers are cleared.
line 14: if exists("syntax_on") || exists("syntax_manual")
line 15:   so <sfile>:p:h/nosyntax.vim
line 16: endif
line 17: 
line 18: " Load the Syntax autocommands and set the default methods for highlighting.
line 19: runtime syntax/synload.vim
Searching for "syntax/synload.vim" in "/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/syntax/synload.vim"
Searching for "/var/lib/vim/addons/syntax/synload.vim"
Searching for "/usr/share/vim/vimfiles/syntax/synload.vim"
Searching for "/usr/share/vim/vim74/syntax/synload.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 19: sourcing "/usr/share/vim/vim74/syntax/synload.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2012 Sep 25
line 4: 
line 5: " This file sets up for syntax highlighting.
line 6: " It is loaded from "syntax.vim" and "manual.vim".
line 7: " 1. Set the default highlight groups.
line 8: " 2. Install Syntax autocommands for all the available syntax files.
line 9: 
line 10: if !has("syntax")
line 11:   finish
line 12: endif
line 13: 
line 14: " let others know that syntax has been switched on
line 15: let syntax_on = 1
line 16: 
line 17: " Set the default highlighting colors.  Use a color scheme if specified.
line 18: if exists("colors_name")
line 19:   exe "colors " . colors_name
line 20: else
line 21:   runtime! syntax/syncolor.vim
Searching for "syntax/syncolor.vim" in "/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim74/syntax/syncolor.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 21: sourcing "/usr/share/vim/vim74/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim74/syntax/syncolor.vim
continuing in /usr/share/vim/vim74/syntax/synload.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/kguest/.vim/after/syntax/syncolor.vim"
line 22: endif
line 23: 
line 24: " Line continuation is used here, remove 'C' from 'cpoptions'
line 25: let s:cpo_save = &cpo
line 26: set cpo&vim
line 27: 
line 28: " First remove all old syntax autocommands.
line 29: au! Syntax
line 30: 
line 31: au Syntax *^I^Icall s:SynSet()
line 32: 
line 33: fun! s:SynSet()
line 61: 
line 62: 
line 63: " Handle adding doxygen to other languages (C, C++, C#, IDL)
line 68: au Syntax c,cpp,cs,idl,php if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif
line 69: 
line 70: 
line 71: " Source the user-specified syntax highlighting file
line 72: if exists("mysyntaxfile") && filereadable(expand(mysyntaxfile))
line 73:   execute "source " . mysyntaxfile
line 74: endif
line 75: 
line 76: " Restore 'cpoptions'
line 77: let &cpo = s:cpo_save
line 78: unlet s:cpo_save
finished sourcing /usr/share/vim/vim74/syntax/synload.vim
continuing in /usr/share/vim/vim74/syntax/syntax.vim
line 20: 
line 21: " Load the FileType autocommands if not done yet.
line 22: if exists("did_load_filetypes")
line 23:   let s:did_ft = 1
line 24: else
line 25:   filetype on
Searching for "filetype.vim" in "/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/filetype.vim"
chdir(/home/kguest/.vim)
fchdir() to previous dir
line 25: sourcing "/home/kguest/.vim/filetype.vim"
line 1: " Visual Basic
line 2: au BufNewFile,BufRead *.vb^I^Isetf vb
line 3: augroup filetypedetect
line 4: au BufNewFile,BufRead *.xt  setf xt
line 5: augroup END
line 6: " Taken from http://en.wikipedia.org/wiki/Wikipedia:Text_editor_support#Vim
line 7: " ^IIan Tegebo <ian.tegebo@gmail.com>
line 8: 
line 9: augroup filetypedetect
line 10: au BufNewFile,BufRead *.wiki setf Wikipedia
line 11: augroup END
line 12: 
finished sourcing /home/kguest/.vim/filetype.vim
continuing in /usr/share/vim/vim74/syntax/syntax.vim
Searching for "/var/lib/vim/addons/filetype.vim"
Searching for "/usr/share/vim/vimfiles/filetype.vim"
Searching for "/usr/share/vim/vim74/filetype.vim"
chdir(/usr/share/vim/vim74)
fchdir() to previous dir
line 25: sourcing "/usr/share/vim/vim74/filetype.vim"
line 1: " Vim support file to detect file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2013 Aug 03
line 5: 
line 6: " Listen very carefully, I will say this only once
line 7: if exists("did_load_filetypes")
line 8:   finish
line 9: endif
line 10: let did_load_filetypes = 1
line 11: 
line 12: " Line continuation is used here, remove 'C' from 'cpoptions'
line 13: let s:cpo_save = &cpo
line 14: set cpo&vim
line 15: 
line 16: augroup filetypedetect
line 17: 
line 18: " Ignored extensions
line 19: if exists("*fnameescape")
line 21: au BufNewFile,BufRead ?\+.orig,?\+.bak,?\+.old,?\+.new,?\+.dpkg-dist,?\+.dpkg-old,?\+.dpkg-new,?\+.dpkg-bak,?\+.rpmsave,?\+.rpmnew exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r"))
line 28: au BufNewFile,BufRead *~ let s:name = expand("<afile>") | let s:short = substitute(s:name, '\~$', '', '') | if s:name != s:short && s:short != "" |   exe "doau filetypedetect BufRead " . fnameescape(s:short) | endif | unlet! s:name s:short
line 32: au BufNewFile,BufRead ?\+.in if expand("<afile>:t") != "configure.in" |   exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r")) | endif
line 33: elseif &verbose > 0
line 34:   echomsg "Warning: some filetypes will not be recognized because this version of Vim does not have fnameescape()"
line 35: endif
line 36: 
line 37: " Pattern used to match file names which should not be inspected.
line 38: " Currently finds compressed files.
line 39: if !exists("g:ft_ignore_pat")
line 40:   let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'
line 41: endif
line 42: 
line 43: " Function used for patterns that end in a star: don't set the filetype if the
line 44: " file name matches ft_ignore_pat.
line 45: func! s:StarSetf(ft)
line 50: 
line 51: " Abaqus or Trasys
line 52: au BufNewFile,BufRead *.inp^I^I^Icall s:Check_inp()
line 53: 
line 54: func! s:Check_inp()
line 73: 
line 74: " A-A-P recipe
line 75: au BufNewFile,BufRead *.aap^I^I^Isetf aap
line 76: 
line 77: " A2ps printing utility
line 78: au BufNewFile,BufRead */etc/a2ps.cfg,*/etc/a2ps/*.cfg,a2psrc,.a2psrc setf a2ps
line 79: 
line 80: " ABAB/4
line 81: au BufNewFile,BufRead *.abap^I^I^Isetf abap
line 82: 
line 83: " ABC music notation
line 84: au BufNewFile,BufRead *.abc^I^I^Isetf abc
line 85: 
line 86: " ABEL
line 87: au BufNewFile,BufRead *.abl^I^I^Isetf abel
line 88: 
line 89: " AceDB
line 90: au BufNewFile,BufRead *.wrm^I^I^Isetf acedb
line 91: 
line 92: " Ada (83, 9X, 95)
line 93: au BufNewFile,BufRead *.adb,*.ads,*.ada^I^Isetf ada
line 94: if has("vms")
line 95:   au BufNewFile,BufRead *.gpr,*.ada_m,*.adc^Isetf ada
line 96: else
line 97:   au BufNewFile,BufRead *.gpr^I^I^Isetf ada
line 98: endif
line 99: 
line 100: " AHDL
line 101: au BufNewFile,BufRead *.tdf^I^I^Isetf ahdl
line 102: 
line 103: " AMPL
line 104: au BufNewFile,BufRead *.run^I^I^Isetf ampl
line 105: 
line 106: " Ant
line 107: au BufNewFile,BufRead build.xml^I^I^Isetf ant
line 108: 
line 109: " Apache style config file
line 110: au BufNewFile,BufRead proftpd.conf*^I^Icall s:StarSetf('apachestyle')
line 111: 
line 112: " Apache config file
line 113: au BufNewFile,BufRead .htaccess,*/etc/httpd/*.conf^I^Isetf apache
line 114: 
line 115: " XA65 MOS6510 cross assembler
line 116: au BufNewFile,BufRead *.a65^I^I^Isetf a65
line 117: 
line 118: " Applescript
line 119: au BufNewFile,BufRead *.scpt^I^I^Isetf applescript
line 120: 
line 121: " Applix ELF
line 123: au BufNewFile,BufRead *.am if expand("<afile>") !~? 'Makefile.am\>' | setf elf | endif
line 124: 
line 125: " ALSA configuration
line 126: au BufNewFile,BufRead .asoundrc,*/usr/share/alsa/alsa.conf,*/etc/asound.conf setf alsaconf
line 127: 
line 128: " Arc Macro Language
line 129: au BufNewFile,BufRead *.aml^I^I^Isetf aml
line 130: 
line 131: " APT config file
line 132: au BufNewFile,BufRead apt.conf                 setf aptconf
line 133: au BufNewFile,BufRead */.aptitude/config       setf aptconf
line 134: au BufNewFile,BufRead */etc/apt/apt.conf.d/{[-_[:alnum:]]\+,[-_.[:alnum:]]\+.conf} setf aptconf
line 135: 
line 136: " Arch Inventory file
line 137: au BufNewFile,BufRead .arch-inventory,=tagging-method^Isetf arch
line 138: 
line 139: " ART*Enterprise (formerly ART-IM)
line 140: au BufNewFile,BufRead *.art^I^I^Isetf art
line 141: 
line 142: " AsciiDoc
line 143: au BufNewFile,BufRead *.asciidoc^I^Isetf asciidoc
line 144: 
line 145: " ASN.1
line 146: au BufNewFile,BufRead *.asn,*.asn1^I^Isetf asn
line 147: 
line 148: " Active Server Pages (with Visual Basic Script)
line 154: au BufNewFile,BufRead *.asa if exists("g:filetype_asa") |   exe "setf " . g:filetype_asa | else |   setf aspvbs | endif
line 155: 
line 156: " Active Server Pages (with Perl or Visual Basic Script)
line 164: au BufNewFile,BufRead *.asp if exists("g:filetype_asp") |   exe "setf " . g:filetype_asp | elseif getline(1) . getline(2) . getline(3) =~? "perlscript" |   setf aspperl | else |   setf aspvbs | endif
line 165: 
line 166: " Grub (must be before catch *.lst)
line 167: au BufNewFile,BufRead */boot/grub/menu.lst,*/boot/grub/grub.conf,*/etc/grub.conf setf grub
line 168: 
line 169: " Assembly (all kinds)
line 170: " *.lst is not pure assembly, it has two extra columns (address, byte codes)
line 171: au BufNewFile,BufRead *.asm,*.[sS],*.[aA],*.mac,*.lst^Icall s:FTasm()
line 172: 
line 173: " This function checks for the kind of assembly that is wanted by the user, or
line 174: " can be detected from the first five lines of the file.
line 175: func! s:FTasm()
line 196: 
line 197: func! s:FTasmsyntax()
line 209: 
line 210: " Macro (VAX)
line 211: au BufNewFile,BufRead *.mar^I^I^Isetf vmasm
line 212: 
line 213: " Atlas
line 214: au BufNewFile,BufRead *.atl,*.as^I^Isetf atlas
line 215: 
line 216: " Autoit v3
line 217: au BufNewFile,BufRead *.au3^I^I^Isetf autoit
line 218: 
line 219: " Autohotkey
line 220: au BufNewFile,BufRead *.ahk^I^I^Isetf autohotkey
line 221: 
line 222: " Automake
line 223: au BufNewFile,BufRead [mM]akefile.am,GNUmakefile.am^Isetf automake
line 224: 
line 225: " Autotest .at files are actually m4
line 226: au BufNewFile,BufRead *.at^I^I^Isetf m4
line 227: 
line 228: " Avenue
line 229: au BufNewFile,BufRead *.ave^I^I^Isetf ave
line 230: 
line 231: " Awk
line 232: au BufNewFile,BufRead *.awk^I^I^Isetf awk
line 233: 
line 234: " B
line 235: au BufNewFile,BufRead *.mch,*.ref,*.imp^I^Isetf b
line 236: 
line 237: " BASIC or Visual Basic
line 238: au BufNewFile,BufRead *.bas^I^I^Icall s:FTVB("basic")
line 239: 
line 240: " Check if one of the first five lines contains "VB_Name".  In that case it is
line 241: " probably a Visual Basic file.  Otherwise it's assumed to be "alt" filetype.
line 242: func! s:FTVB(alt)
line 249: 
line 250: " Visual Basic Script (close to Visual Basic) or Visual Basic .NET
line 251: au BufNewFile,BufRead *.vb,*.vbs,*.dsm,*.ctl^Isetf vb
line 252: 
line 253: " IBasic file (similar to QBasic)
line 254: au BufNewFile,BufRead *.iba,*.ibi^I^Isetf ibasic
line 255: 
line 256: " FreeBasic file (similar to QBasic)
line 257: au BufNewFile,BufRead *.fb,*.bi^I^I^Isetf freebasic
line 258: 
line 259: " Batch file for MSDOS.
line 260: au BufNewFile,BufRead *.bat,*.sys^I^Isetf dosbatch
line 261: " *.cmd is close to a Batch file, but on OS/2 Rexx files also use *.cmd.
line 263: au BufNewFile,BufRead *.cmd if getline(1) =~ '^/\*' | setf rexx | else | setf dosbatch | endif
line 264: 
line 265: " Batch file for 4DOS
line 266: au BufNewFile,BufRead *.btm^I^I^Icall s:FTbtm()
line 267: func! s:FTbtm()
line 274: 
line 275: " BC calculator
line 276: au BufNewFile,BufRead *.bc^I^I^Isetf bc
line 277: 
line 278: " BDF font
line 279: au BufNewFile,BufRead *.bdf^I^I^Isetf bdf
line 280: 
line 281: " BibTeX bibliography database file
line 282: au BufNewFile,BufRead *.bib^I^I^Isetf bib
line 283: 
line 284: " BibTeX Bibliography Style
line 285: au BufNewFile,BufRead *.bst^I^I^Isetf bst
line 286: 
line 287: " BIND configuration
line 288: au BufNewFile,BufRead named.conf,rndc.conf^Isetf named
line 289: 
line 290: " BIND zone
line 291: au BufNewFile,BufRead named.root^I^Isetf bindzone
line 292: au BufNewFile,BufRead *.db^I^I^Icall s:BindzoneCheck('')
line 293: 
line 294: func! s:BindzoneCheck(default)
line 301: 
line 302: " Blank
line 303: au BufNewFile,BufRead *.bl^I^I^Isetf blank
line 304: 
line 305: " Blkid cache file
line 306: au BufNewFile,BufRead */etc/blkid.tab,*/etc/blkid.tab.old   setf xml
line 307: 
line 308: " C or lpc
line 309: au BufNewFile,BufRead *.c^I^I^Icall s:FTlpc()
line 310: 
line 311: func! s:FTlpc()
line 324: 
line 325: " Calendar
line 326: au BufNewFile,BufRead calendar^I^I^Isetf calendar
line 327: 
line 328: " C#
line 329: au BufNewFile,BufRead *.cs^I^I^Isetf cs
line 330: 
line 331: " CSDL
line 332: au BufNewFile,BufRead *.csdl^I^I^Isetf csdl
line 333: 
line 334: " Cabal
line 335: au BufNewFile,BufRead *.cabal^I^I^Isetf cabal
line 336: 
line 337: " Cdrdao TOC
line 338: au BufNewFile,BufRead *.toc^I^I^Isetf cdrtoc
line 339: 
line 340: " Cdrdao config
line 341: au BufNewFile,BufRead */etc/cdrdao.conf,*/etc/defaults/cdrdao,*/etc/default/cdrdao,.cdrdao^Isetf cdrdaoconf
line 342: 
line 343: " Cfengine
line 344: au BufNewFile,BufRead cfengine.conf^I^Isetf cfengine
line 345: 
line 346: " ChaiScript
line 347: au BufRead,BufNewFile *.chai^I^I^Isetf chaiscript
line 348: 
line 349: " Comshare Dimension Definition Language
line 350: au BufNewFile,BufRead *.cdl^I^I^Isetf cdl
line 351: 
line 352: " Conary Recipe
line 353: au BufNewFile,BufRead *.recipe^I^I^Isetf conaryrecipe
line 354: 
line 355: " Controllable Regex Mutilator
line 356: au BufNewFile,BufRead *.crm^I^I^Isetf crm
line 357: 
line 358: " Cyn++
line 359: au BufNewFile,BufRead *.cyn^I^I^Isetf cynpp
line 360: 
line 361: " Cynlib
line 362: " .cc and .cpp files can be C++ or Cynlib.
line 364: au BufNewFile,BufRead *.cc if exists("cynlib_syntax_for_cc")|setf cynlib|else|setf cpp|endif
line 366: au BufNewFile,BufRead *.cpp if exists("cynlib_syntax_for_cpp")|setf cynlib|else|setf cpp|endif
line 367: 
line 368: " C++
line 369: au BufNewFile,BufRead *.cxx,*.c++,*.hh,*.hxx,*.hpp,*.ipp,*.moc,*.tcc,*.inl setf cpp
line 370: if has("fname_case")
line 371:   au BufNewFile,BufRead *.C,*.H setf cpp
line 372: endif
line 373: 
line 374: " .h files can be C, Ch C++, ObjC or ObjC++.
line 375: " Set c_syntax_for_h if you want C, ch_syntax_for_h if you want Ch. ObjC is
line 376: " detected automatically.
line 377: au BufNewFile,BufRead *.h^I^I^Icall s:FTheader()
line 378: 
line 379: func! s:FTheader()
line 394: 
line 395: " Ch (CHscript)
line 396: au BufNewFile,BufRead *.chf^I^I^Isetf ch
line 397: 
line 398: " TLH files are C++ headers generated by Visual C++'s #import from typelibs
line 399: au BufNewFile,BufRead *.tlh^I^I^Isetf cpp
line 400: 
line 401: " Cascading Style Sheets
line 402: au BufNewFile,BufRead *.css^I^I^Isetf css
line 403: 
line 404: " Century Term Command Scripts (*.cmd too)
line 405: au BufNewFile,BufRead *.con^I^I^Isetf cterm
line 406: 
line 407: " Changelog
line 409: au BufNewFile,BufRead changelog.Debian,changelog.dch,NEWS.Debian,NEWS.dch^Isetf debchangelog
line 410: 
line 416: au BufNewFile,BufRead [cC]hange[lL]og  if getline(1) =~ '; urgency='|   setf debchangelog| else|   setf changelog| endif
line 417: 
line 421: au BufNewFile,BufRead NEWS  if getline(1) =~ '; urgency='|   setf debchangelog| endif
line 422: 
line 423: " CHILL
line 424: au BufNewFile,BufRead *..ch^I^I^Isetf chill
line 425: 
line 426: " Changes for WEB and CWEB or CHILL
line 427: au BufNewFile,BufRead *.ch^I^I^Icall s:FTchange()
line 428: 
line 429: " This function checks if one of the first ten lines start with a '@'.  In
line 430: " that case it is probably a change file.
line 431: " If the first line starts with # or ! it's probably a ch file.
line 432: " If a line has "main", "include", "//" ir "/*" it's probably ch.
line 433: " Otherwise CHILL is assumed.
line 434: func! s:FTchange()
line 457: 
line 458: " ChordPro
line 459: au BufNewFile,BufRead *.chopro,*.crd,*.cho,*.crdpro,*.chordpro^Isetf chordpro
line 460: 
line 461: " Clean
line 462: au BufNewFile,BufRead *.dcl,*.icl^I^Isetf clean
line 463: 
line 464: " Clever
line 465: au BufNewFile,BufRead *.eni^I^I^Isetf cl
line 466: 
line 467: " Clever or dtd
line 468: au BufNewFile,BufRead *.ent^I^I^Icall s:FTent()
line 469: 
line 470: func! s:FTent()
line 489: 
line 490: " Clipper (or FoxPro; could also be eviews)
line 496: au BufNewFile,BufRead *.prg if exists("g:filetype_prg") |   exe "setf " . g:filetype_prg | else |   setf clipper | endif
line 497: 
line 498: " Clojure
line 499: au BufNewFile,BufRead *.clj,*.cljs^I^Isetf clojure
line 500: 
line 501: " Cmake
line 502: au BufNewFile,BufRead CMakeLists.txt,*.cmake,*.cmake.in^I^Isetf cmake
line 503: 
line 504: " Cmusrc
line 505: au BufNewFile,BufRead */.cmus/{autosave,rc,command-history,*.theme} setf cmusrc
line 506: au BufNewFile,BufRead */cmus/{rc,*.theme}^I^I^Isetf cmusrc
line 507: 
line 508: " Cobol
line 509: au BufNewFile,BufRead *.cbl,*.cob,*.lib^Isetf cobol
line 510: "   cobol or zope form controller python script? (heuristic)
line 516: au BufNewFile,BufRead *.cpy if getline(1) =~ '^##' |   setf python | else |   setf cobol | endif
line 517: 
line 518: " Coco/R
line 519: au BufNewFile,BufRead *.atg^I^I^Isetf coco
line 520: 
line 521: " Cold Fusion
line 522: au BufNewFile,BufRead *.cfm,*.cfi,*.cfc^I^Isetf cf
line 523: 
line 524: " Configure scripts
line 525: au BufNewFile,BufRead configure.in,configure.ac setf config
line 526: 
line 527: " CUDA  Cumpute Unified Device Architecture
line 528: au BufNewFile,BufRead *.cu^I^I^Isetf cuda
line 529: 
line 530: " WildPackets EtherPeek Decoder
line 531: au BufNewFile,BufRead *.dcd^I^I^Isetf dcd
line 532: 
line 533: " Enlightenment configuration files
line 534: au BufNewFile,BufRead *enlightenment/*.cfg^Isetf c
line 535: 
line 536: " Eterm
line 537: au BufNewFile,BufRead *Eterm/*.cfg^I^Isetf eterm
line 538: 
line 539: " Lynx config files
line 540: au BufNewFile,BufRead lynx.cfg^I^I^Isetf lynx
line 541: 
line 542: " Quake
line 543: au BufNewFile,BufRead *baseq[2-3]/*.cfg,*id1/*.cfg^Isetf quake
line 544: au BufNewFile,BufRead *quake[1-3]/*.cfg^I^I^Isetf quake
line 545: 
line 546: " Quake C
line 547: au BufNewFile,BufRead *.qc^I^I^Isetf c
line 548: 
line 549: " Configure files
line 550: au BufNewFile,BufRead *.cfg^I^I^Isetf cfg
line 551: 
line 552: " Cucumber
line 553: au BufNewFile,BufRead *.feature^I^I^Isetf cucumber
line 554: 
line 555: " Communicating Sequential Processes
line 556: au BufNewFile,BufRead *.csp,*.fdr^I^Isetf csp
line 557: 
line 558: " CUPL logic description and simulation
line 559: au BufNewFile,BufRead *.pld^I^I^Isetf cupl
line 560: au BufNewFile,BufRead *.si^I^I^Isetf cuplsim
line 561: 
line 562: " Debian Control
line 563: au BufNewFile,BufRead */debian/control^I^Isetf debcontrol
line 567: au BufNewFile,BufRead control  if getline(1) =~ '^Source:'|   setf debcontrol| endif
line 568: 
line 569: " Debian Sources.list
line 570: au BufNewFile,BufRead */etc/apt/sources.list^I^Isetf debsources
line 571: au BufNewFile,BufRead */etc/apt/sources.list.d/*.list^Isetf debsources
line 572: 
line 573: " Deny hosts
line 574: au BufNewFile,BufRead denyhosts.conf^I^Isetf denyhosts
line 575: 
line 576: " dnsmasq(8) configuration files
line 577: au BufNewFile,BufRead */etc/dnsmasq.conf^Isetf dnsmasq
line 578: 
line 579: " ROCKLinux package description
line 580: au BufNewFile,BufRead *.desc^I^I^Isetf desc
line 581: 
line 582: " the D language or dtrace
line 583: au BufNewFile,BufRead *.d^I^I^Icall s:DtraceCheck()
line 584: 
line 585: func! s:DtraceCheck()
line 596: 
line 597: " Desktop files
line 598: au BufNewFile,BufRead *.desktop,.directory^Isetf desktop
line 599: 
line 600: " Dict config
line 601: au BufNewFile,BufRead dict.conf,.dictrc^I^Isetf dictconf
line 602: 
line 603: " Dictd config
line 604: au BufNewFile,BufRead dictd.conf^I^Isetf dictdconf
line 605: 
line 606: " Diff files
line 607: au BufNewFile,BufRead *.diff,*.rej,*.patch^Isetf diff
line 608: 
line 609: " Dircolors
line 610: au BufNewFile,BufRead .dir_colors,.dircolors,*/etc/DIR_COLORS^Isetf dircolors
line 611: 
line 612: " Diva (with Skill) or InstallShield
line 618: au BufNewFile,BufRead *.rul if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6) =~? 'InstallShield' |   setf ishd | else |   setf diva | endif
line 619: 
line 620: " DCL (Digital Command Language - vms) or DNS zone file
line 621: au BufNewFile,BufRead *.com^I^I^Icall s:BindzoneCheck('dcl')
line 622: 
line 623: " DOT
line 624: au BufNewFile,BufRead *.dot^I^I^Isetf dot
line 625: 
line 626: " Dylan - lid files
line 627: au BufNewFile,BufRead *.lid^I^I^Isetf dylanlid
line 628: 
line 629: " Dylan - intr files (melange)
line 630: au BufNewFile,BufRead *.intr^I^I^Isetf dylanintr
line 631: 
line 632: " Dylan
line 633: au BufNewFile,BufRead *.dylan^I^I^Isetf dylan
line 634: 
line 635: " Microsoft Module Definition
line 636: au BufNewFile,BufRead *.def^I^I^Isetf def
line 637: 
line 638: " Dracula
line 639: au BufNewFile,BufRead *.drac,*.drc,*lvs,*lpe^Isetf dracula
line 640: 
line 641: " Datascript
line 642: au BufNewFile,BufRead *.ds^I^I^Isetf datascript
line 643: 
line 644: " dsl
line 645: au BufNewFile,BufRead *.dsl^I^I^Isetf dsl
line 646: 
line 647: " DTD (Document Type Definition for XML)
line 648: au BufNewFile,BufRead *.dtd^I^I^Isetf dtd
line 649: 
line 650: " DTS/DSTI (device tree files)
line 651: au BufNewFile,BufRead *.dts,*.dtsi^I^Isetf dts
line 652: 
line 653: " EDIF (*.edf,*.edif,*.edn,*.edo)
line 654: au BufNewFile,BufRead *.ed\(f\|if\|n\|o\)^Isetf edif
line 655: 
line 656: " Embedix Component Description
line 657: au BufNewFile,BufRead *.ecd^I^I^Isetf ecd
line 658: 
line 659: " Eiffel or Specman
line 660: au BufNewFile,BufRead *.e,*.E^I^I^Icall s:FTe()
line 661: 
line 662: " Elinks configuration
line 663: au BufNewFile,BufRead */etc/elinks.conf,*/.elinks/elinks.conf^Isetf elinks
line 664: 
line 665: func! s:FTe()
line 676: 
line 677: " ERicsson LANGuage; Yaws is erlang too
line 678: au BufNewFile,BufRead *.erl,*.hrl,*.yaws^Isetf erlang
line 679: 
line 680: " Elm Filter Rules file
line 681: au BufNewFile,BufRead filter-rules^I^Isetf elmfilt
line 682: 
line 683: " ESMTP rc file
line 684: au BufNewFile,BufRead *esmtprc^I^I^Isetf esmtprc
line 685: 
line 686: " ESQL-C
line 687: au BufNewFile,BufRead *.ec,*.EC^I^I^Isetf esqlc
line 688: 
line 689: " Esterel
line 690: au BufNewFile,BufRead *.strl^I^I^Isetf esterel
line 691: 
line 692: " Essbase script
line 693: au BufNewFile,BufRead *.csc^I^I^Isetf csc
line 694: 
line 695: " Exim
line 696: au BufNewFile,BufRead exim.conf^I^I^Isetf exim
line 697: 
line 698: " Expect
line 699: au BufNewFile,BufRead *.exp^I^I^Isetf expect
line 700: 
line 701: " Exports
line 702: au BufNewFile,BufRead exports^I^I^Isetf exports
line 703: 
line 704: " Falcon
line 705: au BufNewFile,BufRead *.fal^I^I^Isetf falcon
line 706: 
line 707: " Fantom
line 708: au BufNewFile,BufRead *.fan,*.fwt^I^Isetf fan
line 709: 
line 710: " Factor
line 711: au BufNewFile,BufRead *.factor^I^I^Isetf factor
line 712: 
line 713: " Fetchmail RC file
line 714: au BufNewFile,BufRead .fetchmailrc^I^Isetf fetchmail
line 715: 
line 716: " FlexWiki - disabled, because it has side effects when a .wiki file
line 717: " is not actually FlexWiki
line 718: "au BufNewFile,BufRead *.wiki^I^I^Isetf flexwiki
line 719: 
line 720: " Focus Executable
line 721: au BufNewFile,BufRead *.fex,*.focexec^I^Isetf focexec
line 722: 
line 723: " Focus Master file (but not for auto.master)
line 724: au BufNewFile,BufRead auto.master^I^Isetf conf
line 725: au BufNewFile,BufRead *.mas,*.master^I^Isetf master
line 726: 
line 727: " Forth
line 728: au BufNewFile,BufRead *.fs,*.ft^I^I^Isetf forth
line 729: 
line 730: " Reva Forth
line 731: au BufNewFile,BufRead *.frt^I^I^Isetf reva
line 732: 
line 733: " Fortran
line 734: if has("fname_case")
line 735:   au BufNewFile,BufRead *.F,*.FOR,*.FPP,*.FTN,*.F77,*.F90,*.F95,*.F03,*.F08^I setf fortran
line 736: endif
line 737: au BufNewFile,BufRead   *.f,*.for,*.fortran,*.fpp,*.ftn,*.f77,*.f90,*.f95,*.f03,*.f08  setf fortran
line 738: 
line 739: " Framescript
line 740: au BufNewFile,BufRead *.fsl^I^I^Isetf framescript
line 741: 
line 742: " FStab
line 743: au BufNewFile,BufRead fstab,mtab^I^Isetf fstab
line 744: 
line 745: " GDB command files
line 746: au BufNewFile,BufRead .gdbinit^I^I^Isetf gdb
line 747: 
line 748: " GDMO
line 749: au BufNewFile,BufRead *.mo,*.gdmo^I^Isetf gdmo
line 750: 
line 751: " Gedcom
line 752: au BufNewFile,BufRead *.ged,lltxxxxx.txt^Isetf gedcom
line 753: 
line 754: " Git
line 755: au BufNewFile,BufRead *.git/COMMIT_EDITMSG^Isetf gitcommit
line 756: au BufNewFile,BufRead *.git/MERGE_MSG^I^Isetf gitcommit
line 757: au BufNewFile,BufRead *.git/config,.gitconfig,.gitmodules setf gitconfig
line 758: au BufNewFile,BufRead *.git/modules/*/COMMIT_EDITMSG setf gitcommit
line 759: au BufNewFile,BufRead *.git/modules/*/config^Isetf gitconfig
line 760: au BufNewFile,BufRead */.config/git/config^Isetf gitconfig
line 761: au BufNewFile,BufRead git-rebase-todo^I^Isetf gitrebase
line 765: au BufNewFile,BufRead .msg.[0-9]* if getline(1) =~ '^From.*# This line is ignored.$' |   setf gitsendemail | endif
line 769: au BufNewFile,BufRead *.git/* if getline(1) =~ '^\x\{40\}\>\|^ref: ' |   setf git | endif
line 770: 
line 771: " Gkrellmrc
line 772: au BufNewFile,BufRead gkrellmrc,gkrellmrc_?^Isetf gkrellmrc
line 773: 
line 774: " GP scripts (2.0 and onward)
line 775: au BufNewFile,BufRead *.gp,.gprc^I^Isetf gp
line 776: 
line 777: " GPG
line 778: au BufNewFile,BufRead */.gnupg/options^I^Isetf gpg
line 779: au BufNewFile,BufRead */.gnupg/gpg.conf^I^Isetf gpg
line 780: au BufNewFile,BufRead */usr/*/gnupg/options.skel setf gpg
line 781: 
line 782: " gnash(1) configuration files
line 783: au BufNewFile,BufRead gnashrc,.gnashrc,gnashpluginrc,.gnashpluginrc setf gnash
line 784: 
line 785: " Gitolite
line 786: au BufNewFile,BufRead gitolite.conf^I^Isetf gitolite
line 787: au BufNewFile,BufRead */gitolite-admin/conf/*^Icall s:StarSetf('gitolite')
line 788: au BufNewFile,BufRead {,.}gitolite.rc,example.gitolite.rc^Isetf perl
line 789: 
line 790: " Gnuplot scripts
line 791: au BufNewFile,BufRead *.gpi^I^I^Isetf gnuplot
line 792: 
line 793: " GrADS scripts
line 794: au BufNewFile,BufRead *.gs^I^I^Isetf grads
line 795: 
line 796: " Gretl
line 797: au BufNewFile,BufRead *.gretl^I^I^Isetf gretl
line 798: 
line 799: " Groovy
line 800: au BufNewFile,BufRead *.groovy^I^I^Isetf groovy
line 801: 
line 802: " GNU Server Pages
line 803: au BufNewFile,BufRead *.gsp^I^I^Isetf gsp
line 804: 
line 805: " Group file
line 806: au BufNewFile,BufRead */etc/group,*/etc/group-,*/etc/group.edit,*/etc/gshadow,*/etc/gshadow-,*/etc/gshadow.edit,*/var/backups/group.bak,*/var/backups/gshadow.bak  setf group
line 807: 
line 808: " GTK RC
line 809: au BufNewFile,BufRead .gtkrc,gtkrc^I^Isetf gtkrc
line 810: 
line 811: " Haml
line 812: au BufNewFile,BufRead *.haml^I^I^Isetf haml
line 813: 
line 814: " Hamster Classic | Playground files
line 815: au BufNewFile,BufRead *.hsc,*.hsm^I^Isetf hamster
line 816: 
line 817: " Haskell
line 818: au BufNewFile,BufRead *.hs,*.hs-boot^I^Isetf haskell
line 819: au BufNewFile,BufRead *.lhs^I^I^Isetf lhaskell
line 820: au BufNewFile,BufRead *.chs^I^I^Isetf chaskell
line 821: 
line 822: " Haste
line 823: au BufNewFile,BufRead *.ht^I^I^Isetf haste
line 824: au BufNewFile,BufRead *.htpp^I^I^Isetf hastepreproc
line 825: 
line 826: " Hercules
line 827: au BufNewFile,BufRead *.vc,*.ev,*.rs,*.sum,*.errsum^Isetf hercules
line 828: 
line 829: " HEX (Intel)
line 830: au BufNewFile,BufRead *.hex,*.h32^I^Isetf hex
line 831: 
line 832: " Tilde (must be before HTML)
line 833: au BufNewFile,BufRead *.t.html^I^I^Isetf tilde
line 834: 
line 835: " HTML (.shtml and .stm for server side)
line 836: au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm  call s:FThtml()
line 837: 
line 838: " Distinguish between HTML, XHTML and Django
line 839: func! s:FThtml()
line 854: 
line 855: " HTML with Ruby - eRuby
line 856: au BufNewFile,BufRead *.erb,*.rhtml^I^Isetf eruby
line 857: 
line 858: " HTML with M4
line 859: au BufNewFile,BufRead *.html.m4^I^I^Isetf htmlm4
line 860: 
line 861: " HTML Cheetah template
line 862: au BufNewFile,BufRead *.tmpl^I^I^Isetf htmlcheetah
line 863: 
line 864: " Host config
line 865: au BufNewFile,BufRead */etc/host.conf^I^Isetf hostconf
line 866: 
line 867: " Hosts access
line 868: au BufNewFile,BufRead */etc/hosts.allow,*/etc/hosts.deny  setf hostsaccess
line 869: 
line 870: " Hyper Builder
line 871: au BufNewFile,BufRead *.hb^I^I^Isetf hb
line 872: 
line 873: " Httest
line 874: au BufNewFile,BufRead *.htt,*.htb^I^Isetf httest
line 875: 
line 876: " Icon
line 877: au BufNewFile,BufRead *.icn^I^I^Isetf icon
line 878: 
line 879: " IDL (Interface Description Language)
line 880: au BufNewFile,BufRead *.idl^I^I^Icall s:FTidl()
line 881: 
line 882: " Distinguish between standard IDL and MS-IDL
line 883: func! s:FTidl()
line 894: 
line 895: " Microsoft IDL (Interface Description Language)  Also *.idl
line 896: " MOF = WMI (Windows Management Instrumentation) Managed Object Format
line 897: au BufNewFile,BufRead *.odl,*.mof^I^Isetf msidl
line 898: 
line 899: " Icewm menu
line 900: au BufNewFile,BufRead */.icewm/menu^I^Isetf icemenu
line 901: 
line 902: " Indent profile (must come before IDL *.pro!)
line 903: au BufNewFile,BufRead .indent.pro^I^Isetf indent
line 904: au BufNewFile,BufRead indent.pro^I^Icall s:ProtoCheck('indent')
line 905: 
line 906: " IDL (Interactive Data Language)
line 907: au BufNewFile,BufRead *.pro^I^I^Icall s:ProtoCheck('idlang')
line 908: 
line 909: " Distinguish between "default" and Cproto prototype file. */
line 910: func! s:ProtoCheck(default)
line 922: 
line 923: 
line 924: " Indent RC
line 925: au BufNewFile,BufRead indentrc^I^I^Isetf indent
line 926: 
line 927: " Inform
line 928: au BufNewFile,BufRead *.inf,*.INF^I^Isetf inform
line 929: 
line 930: " Initng
line 931: au BufNewFile,BufRead */etc/initng/*/*.i,*.ii^Isetf initng
line 932: 
line 933: " Innovation Data Processing
line 934: au BufRead,BufNewFile upstream.dat\c,upstream.*.dat\c,*.upstream.dat\c ^Isetf upstreamdat
line 935: au BufRead,BufNewFile upstream.log\c,upstream.*.log\c,*.upstream.log\c ^Isetf upstreamlog
line 936: au BufRead,BufNewFile upstreaminstall.log\c,upstreaminstall.*.log\c,*.upstreaminstall.log\c setf upstreaminstalllog
line 937: au BufRead,BufNewFile usserver.log\c,usserver.*.log\c,*.usserver.log\c ^Isetf usserverlog
line 938: au BufRead,BufNewFile usw2kagt.log\c,usw2kagt.*.log\c,*.usw2kagt.log\c ^Isetf usw2kagtlog
line 939: 
line 940: " Ipfilter
line 941: au BufNewFile,BufRead ipf.conf,ipf6.conf,ipf.rules^Isetf ipfilter
line 942: 
line 943: " Informix 4GL (source - canonical, include file, I4GL+M4 preproc.)
line 944: au BufNewFile,BufRead *.4gl,*.4gh,*.m4gl^Isetf fgl
line 945: 
line 946: " .INI file for MSDOS
line 947: au BufNewFile,BufRead *.ini^I^I^Isetf dosini
line 948: 
line 949: " SysV Inittab
line 950: au BufNewFile,BufRead inittab^I^I^Isetf inittab
line 951: 
line 952: " Inno Setup
line 953: au BufNewFile,BufRead *.iss^I^I^Isetf iss
line 954: 
line 955: " JAL
line 956: au BufNewFile,BufRead *.jal,*.JAL^I^Isetf jal
line 957: 
line 958: " Jam
line 959: au BufNewFile,BufRead *.jpl,*.jpr^I^Isetf jam
line 960: 
line 961: " Java
line 962: au BufNewFile,BufRead *.java,*.jav^I^Isetf java
line 963: 
line 964: " JavaCC
line 965: au BufNewFile,BufRead *.jj,*.jjt^I^Isetf javacc
line 966: 
line 967: " JavaScript, ECMAScript
line 968: au BufNewFile,BufRead *.js,*.javascript,*.es,*.jsx,*.json   setf javascript
line 969: 
line 970: " Java Server Pages
line 971: au BufNewFile,BufRead *.jsp^I^I^Isetf jsp
line 972: 
line 973: " Java Properties resource file (note: doesn't catch font.properties.pl)
line 974: au BufNewFile,BufRead *.properties,*.properties_??,*.properties_??_??^Isetf jproperties
line 975: au BufNewFile,BufRead *.properties_??_??_*^Icall s:StarSetf('jproperties')
line 976: 
line 977: " Jess
line 978: au BufNewFile,BufRead *.clp^I^I^Isetf jess
line 979: 
line 980: " Jgraph
line 981: au BufNewFile,BufRead *.jgr^I^I^Isetf jgraph
line 982: 
line 983: " Jovial
line 984: au BufNewFile,BufRead *.jov,*.j73,*.jovial^Isetf jovial
line 985: 
line 986: " Kixtart
line 987: au BufNewFile,BufRead *.kix^I^I^Isetf kix
line 988: 
line 989: " Kimwitu[++]
line 990: au BufNewFile,BufRead *.k^I^I^Isetf kwt
line 991: 
line 992: " KDE script
line 993: au BufNewFile,BufRead *.ks^I^I^Isetf kscript
line 994: 
line 995: " Kconfig
line 996: au BufNewFile,BufRead Kconfig,Kconfig.debug^Isetf kconfig
line 997: 
line 998: " Lace (ISE)
line 999: au BufNewFile,BufRead *.ace,*.ACE^I^Isetf lace
line 1000: 
line 1001: " Latte
line 1002: au BufNewFile,BufRead *.latte,*.lte^I^Isetf latte
line 1003: 
line 1004: " Limits
line 1005: au BufNewFile,BufRead */etc/limits,*/etc/*limits.conf,*/etc/*limits.d/*.conf^Isetf limits
line 1006: 
line 1007: " LambdaProlog (*.mod too, see Modsim)
line 1008: au BufNewFile,BufRead *.sig^I^I^Isetf lprolog
line 1009: 
line 1010: " LDAP LDIF
line 1011: au BufNewFile,BufRead *.ldif^I^I^Isetf ldif
line 1012: 
line 1013: " Ld loader
line 1014: au BufNewFile,BufRead *.ld^I^I^Isetf ld
line 1015: 
line 1016: " Lex
line 1017: au BufNewFile,BufRead *.lex,*.l^I^I^Isetf lex
line 1018: 
line 1019: " Libao
line 1020: au BufNewFile,BufRead */etc/libao.conf,*/.libao^Isetf libao
line 1021: 
line 1022: " Libsensors
line 1023: au BufNewFile,BufRead */etc/sensors.conf,*/etc/sensors3.conf^Isetf sensors
line 1024: 
line 1025: " LFTP
line 1026: au BufNewFile,BufRead lftp.conf,.lftprc,*lftp/rc^Isetf lftp
line 1027: 
line 1028: " Lifelines (or Lex for C++!)
line 1029: au BufNewFile,BufRead *.ll^I^I^Isetf lifelines
line 1030: 
line 1031: " Lilo: Linux loader
line 1032: au BufNewFile,BufRead lilo.conf^I^I^Isetf lilo
line 1033: 
line 1034: " Lisp (*.el = ELisp, *.cl = Common Lisp, *.jl = librep Lisp)
line 1035: if has("fname_case")
line 1036:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,*.L,.emacs,.sawfishrc setf lisp
line 1037: else
line 1038:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,.emacs,.sawfishrc setf lisp
line 1039: endif
line 1040: 
line 1041: " SBCL implementation of Common Lisp
line 1042: au BufNewFile,BufRead sbclrc,.sbclrc^I^Isetf lisp
line 1043: 
line 1044: " Liquid
line 1045: au BufNewFile,BufRead *.liquid^I^I^Isetf liquid
line 1046: 
line 1047: " Lite
line 1048: au BufNewFile,BufRead *.lite,*.lt^I^Isetf lite
line 1049: 
line 1050: " LiteStep RC files
line 1051: au BufNewFile,BufRead */LiteStep/*/*.rc^I^Isetf litestep
line 1052: 
line 1053: " Login access
line 1054: au BufNewFile,BufRead */etc/login.access^Isetf loginaccess
line 1055: 
line 1056: " Login defs
line 1057: au BufNewFile,BufRead */etc/login.defs^I^Isetf logindefs
line 1058: 
line 1059: " Logtalk
line 1060: au BufNewFile,BufRead *.lgt^I^I^Isetf logtalk
line 1061: 
line 1062: " LOTOS
line 1063: au BufNewFile,BufRead *.lot,*.lotos^I^Isetf lotos
line 1064: 
line 1065: " Lout (also: *.lt)
line 1066: au BufNewFile,BufRead *.lou,*.lout^I^Isetf lout
line 1067: 
line 1068: " Lua
line 1069: au BufNewFile,BufRead *.lua^I^I^Isetf lua
line 1070: 
line 1071: " Linden Scripting Language (Second Life)
line 1072: au BufNewFile,BufRead *.lsl^I^I^Isetf lsl
line 1073: 
line 1074: " Lynx style file (or LotusScript!)
line 1075: au BufNewFile,BufRead *.lss^I^I^Isetf lss
line 1076: 
line 1077: " M4
line 1079: au BufNewFile,BufRead *.m4 if expand("<afile>") !~? 'html.m4$\|fvwm2rc' | setf m4 | endif
line 1080: 
line 1081: " MaGic Point
line 1082: au BufNewFile,BufRead *.mgp^I^I^Isetf mgp
line 1083: 
line 1084: " Mail (for Elm, trn, mutt, muttng, rn, slrn)
line 1085: au BufNewFile,BufRead snd.\d\+,.letter,.letter.\d\+,.followup,.article,.article.\d\+,pico.\d\+,mutt{ng,}-*-\w\+,mutt[[:alnum:]_-]\\\{6\},ae\d\+.txt,/tmp/SLRN[0-9A-Z.]\+,*.eml setf mail
line 1086: 
line 1087: " Mail aliases
line 1088: au BufNewFile,BufRead */etc/mail/aliases,*/etc/aliases^Isetf mailaliases
line 1089: 
line 1090: " Mailcap configuration file
line 1091: au BufNewFile,BufRead .mailcap,mailcap^I^Isetf mailcap
line 1092: 
line 1093: " Makefile
line 1094: au BufNewFile,BufRead *[mM]akefile,*.mk,*.mak,*.dsp setf make
line 1095: 
line 1096: " MakeIndex
line 1097: au BufNewFile,BufRead *.ist,*.mst^I^Isetf ist
line 1098: 
line 1099: " Mallard
line 1100: au BufNewFile,BufRead *.page^I^I^Isetf mallard
line 1101: 
line 1102: " Manpage
line 1103: au BufNewFile,BufRead *.man^I^I^Isetf man
line 1104: 
line 1105: " Man config
line 1106: au BufNewFile,BufRead */etc/man.conf,man.config^Isetf manconf
line 1107: 
line 1108: " Maple V
line 1109: au BufNewFile,BufRead *.mv,*.mpl,*.mws^I^Isetf maple
line 1110: 
line 1111: " Map (UMN mapserver config file)
line 1112: au BufNewFile,BufRead *.map^I^I^Isetf map
line 1113: 
line 1114: " Markdown
line 1115: au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,README.md  setf markdown
line 1116: 
line 1117: " Mason
line 1118: au BufNewFile,BufRead *.mason,*.mhtml^I^Isetf mason
line 1119: 
line 1120: " Matlab or Objective C
line 1121: au BufNewFile,BufRead *.m^I^I^Icall s:FTm()
line 1122: 
line 1123: func! s:FTm()
line 1147: 
line 1148: " Mathematica notebook
line 1149: au BufNewFile,BufRead *.nb^I^I^Isetf mma
line 1150: 
line 1151: " Maya Extension Language
line 1152: au BufNewFile,BufRead *.mel^I^I^Isetf mel
line 1153: 
line 1154: " Mercurial (hg) commit file
line 1155: au BufNewFile,BufRead hg-editor-*.txt^I^Isetf hgcommit
line 1156: 
line 1157: " Mercurial config (looks like generic config file)
line 1158: au BufNewFile,BufRead *.hgrc,*hgrc^I^Isetf cfg
line 1159: 
line 1160: " Messages (logs mostly)
line 1161: au BufNewFile,BufRead */log/{auth,cron,daemon,debug,kern,lpr,mail,messages,news/news,syslog,user}{,.log,.err,.info,.warn,.crit,.notice}{,.[0-9]*,-[0-9]*} setf messages
line 1162: 
line 1163: " Metafont
line 1164: au BufNewFile,BufRead *.mf^I^I^Isetf mf
line 1165: 
line 1166: " MetaPost
line 1167: au BufNewFile,BufRead *.mp^I^I^Isetf mp
line 1168: 
line 1169: " MGL
line 1170: au BufNewFile,BufRead *.mgl^I^I^Isetf mgl
line 1171: 
line 1172: " MMIX or VMS makefile
line 1173: au BufNewFile,BufRead *.mms^I^I^Icall s:FTmms()
line 1174: 
line 1175: " Symbian meta-makefile definition (MMP)
line 1176: au BufNewFile,BufRead *.mmp^I^I^Isetf mmp
line 1177: 
line 1178: func! s:FTmms()
line 1194: 
line 1195: 
line 1196: " Modsim III (or LambdaProlog)
line 1202: au BufNewFile,BufRead *.mod if getline(1) =~ '\<module\>' |   setf lprolog | else |   setf modsim3 | endif
line 1203: 
line 1204: " Modula 2
line 1205: au BufNewFile,BufRead *.m2,*.DEF,*.MOD,*.md,*.mi setf modula2
line 1206: 
line 1207: " Modula 3 (.m3, .i3, .mg, .ig)
line 1208: au BufNewFile,BufRead *.[mi][3g]^I^Isetf modula3
line 1209: 
line 1210: " Monk
line 1211: au BufNewFile,BufRead *.isc,*.monk,*.ssc,*.tsc^Isetf monk
line 1212: 
line 1213: " MOO
line 1214: au BufNewFile,BufRead *.moo^I^I^Isetf moo
line 1215: 
line 1216: " Modconf
line 1217: au BufNewFile,BufRead */etc/modules.conf,*/etc/modules,*/etc/conf.modules setf modconf
line 1218: 
line 1219: " Mplayer config
line 1220: au BufNewFile,BufRead mplayer.conf,*/.mplayer/config^Isetf mplayerconf
line 1221: 
line 1222: " Moterola S record
line 1223: au BufNewFile,BufRead *.s19,*.s28,*.s37^I^Isetf srec
line 1224: 
line 1225: " Mrxvtrc
line 1226: au BufNewFile,BufRead mrxvtrc,.mrxvtrc^I^Isetf mrxvtrc
line 1227: 
line 1228: " Msql
line 1229: au BufNewFile,BufRead *.msql^I^I^Isetf msql
line 1230: 
line 1231: " Mysql
line 1232: au BufNewFile,BufRead *.mysql^I^I^Isetf mysql
line 1233: 
line 1234: " Mutt setup files (must be before catch *.rc)
line 1235: au BufNewFile,BufRead */etc/Muttrc.d/*^I^Icall s:StarSetf('muttrc')
line 1236: 
line 1237: " M$ Resource files
line 1238: au BufNewFile,BufRead *.rc,*.rch^I^Isetf rc
line 1239: 
line 1240: " MuPAD source
line 1241: au BufRead,BufNewFile *.mu^I^I^Isetf mupad
line 1242: 
line 1243: " Mush
line 1244: au BufNewFile,BufRead *.mush^I^I^Isetf mush
line 1245: 
line 1246: " Mutt setup file (also for Muttng)
line 1247: au BufNewFile,BufRead Mutt{ng,}rc^I^Isetf muttrc
line 1248: 
line 1249: " Nano
line 1250: au BufNewFile,BufRead */etc/nanorc,.nanorc^Isetf nanorc
line 1251: 
line 1252: " Nastran input/DMAP
line 1253: "au BufNewFile,BufRead *.dat^I^I^Isetf nastran
line 1254: 
line 1255: " Natural
line 1256: au BufNewFile,BufRead *.NS[ACGLMNPS]^I^Isetf natural
line 1257: 
line 1258: " Netrc
line 1259: au BufNewFile,BufRead .netrc^I^I^Isetf netrc
line 1260: 
line 1261: " Ninja file
line 1262: au BufNewFile,BufRead *.ninja^I^I^Isetf ninja
line 1263: 
line 1264: " Novell netware batch files
line 1265: au BufNewFile,BufRead *.ncf^I^I^Isetf ncf
line 1266: 
line 1267: " Nroff/Troff (*.ms and *.t are checked below)
line 1271: au BufNewFile,BufRead *.me if expand("<afile>") != "read.me" && expand("<afile>") != "click.me" |   setf nroff | endif
line 1272: au BufNewFile,BufRead *.tr,*.nr,*.roff,*.tmac,*.mom^Isetf nroff
line 1273: au BufNewFile,BufRead *.[1-9]^I^I^Icall s:FTnroff()
line 1274: 
line 1275: " This function checks if one of the first five lines start with a dot.  In
line 1276: " that case it is probably an nroff file: 'filetype' is set and 1 is returned.
line 1277: func! s:FTnroff()
line 1284: 
line 1285: " Nroff or Objective C++
line 1286: au BufNewFile,BufRead *.mm^I^I^Icall s:FTmm()
line 1287: 
line 1288: func! s:FTmm()
line 1300: 
line 1301: " Not Quite C
line 1302: au BufNewFile,BufRead *.nqc^I^I^Isetf nqc
line 1303: 
line 1304: " NSIS
line 1305: au BufNewFile,BufRead *.nsi,*.nsh^I^Isetf nsis
line 1306: 
line 1307: " OCAML
line 1308: au BufNewFile,BufRead *.ml,*.mli,*.mll,*.mly,.ocamlinit^Isetf ocaml
line 1309: 
line 1310: " Occam
line 1311: au BufNewFile,BufRead *.occ^I^I^Isetf occam
line 1312: 
line 1313: " Omnimark
line 1314: au BufNewFile,BufRead *.xom,*.xin^I^Isetf omnimark
line 1315: 
line 1316: " OpenROAD
line 1317: au BufNewFile,BufRead *.or^I^I^Isetf openroad
line 1318: 
line 1319: " OPL
line 1320: au BufNewFile,BufRead *.[Oo][Pp][Ll]^I^Isetf opl
line 1321: 
line 1322: " Oracle config file
line 1323: au BufNewFile,BufRead *.ora^I^I^Isetf ora
line 1324: 
line 1325: " Packet filter conf
line 1326: au BufNewFile,BufRead pf.conf^I^I^Isetf pf
line 1327: 
line 1328: " Pam conf
line 1329: au BufNewFile,BufRead */etc/pam.conf^I^Isetf pamconf
line 1330: 
line 1331: " PApp
line 1332: au BufNewFile,BufRead *.papp,*.pxml,*.pxsl^Isetf papp
line 1333: 
line 1334: " Password file
line 1335: au BufNewFile,BufRead */etc/passwd,*/etc/passwd-,*/etc/passwd.edit,*/etc/shadow,*/etc/shadow-,*/etc/shadow.edit,*/var/backups/passwd.bak,*/var/backups/shadow.bak setf passwd
line 1336: 
line 1337: " Pascal (also *.p)
line 1338: au BufNewFile,BufRead *.pas^I^I^Isetf pascal
line 1339: 
line 1340: " Delphi project file
line 1341: au BufNewFile,BufRead *.dpr^I^I^Isetf pascal
line 1342: 
line 1343: " PDF
line 1344: au BufNewFile,BufRead *.pdf^I^I^Isetf pdf
line 1345: 
line 1346: " Perl
line 1347: if has("fname_case")
line 1348:   au BufNewFile,BufRead *.pl,*.PL^I^Icall s:FTpl()
line 1349: else
line 1350:   au BufNewFile,BufRead *.pl^I^I^Icall s:FTpl()
line 1351: endif
line 1352: au BufNewFile,BufRead *.plx,*.al^I^Isetf perl
line 1353: au BufNewFile,BufRead *.p6,*.pm6^I^Isetf perl6
line 1354: 
line 1355: func! s:FTpl()
line 1369: 
line 1370: " Perl, XPM or XPM2
line 1378: au BufNewFile,BufRead *.pm if getline(1) =~ "XPM2" |   setf xpm2 | elseif getline(1) =~ "XPM" |   setf xpm | else |   setf perl | endif
line 1379: 
line 1380: " Perl POD
line 1381: au BufNewFile,BufRead *.pod^I^I^Isetf pod
line 1382: 
line 1383: " Php, php3, php4, etc.
line 1384: " Also Phtml (was used for PHP 2 in the past)
line 1385: " Also .ctp for Cake template file
line 1386: au BufNewFile,BufRead *.php,*.php\d,*.phtml,*.ctp^Isetf php
line 1387: 
line 1388: " Pike
line 1389: au BufNewFile,BufRead *.pike,*.lpc,*.ulpc,*.pmod setf pike
line 1390: 
line 1391: " Pinfo config
line 1392: au BufNewFile,BufRead */etc/pinforc,*/.pinforc^Isetf pinfo
line 1393: 
line 1394: " Palm Resource compiler
line 1395: au BufNewFile,BufRead *.rcp^I^I^Isetf pilrc
line 1396: 
line 1397: " Pine config
line 1398: au BufNewFile,BufRead .pinerc,pinerc,.pinercex,pinercex^I^Isetf pine
line 1399: 
line 1400: " PL/1, PL/I
line 1401: au BufNewFile,BufRead *.pli,*.pl1^I^Isetf pli
line 1402: 
line 1403: " PL/M (also: *.inp)
line 1404: au BufNewFile,BufRead *.plm,*.p36,*.pac^I^Isetf plm
line 1405: 
line 1406: " PL/SQL
line 1407: au BufNewFile,BufRead *.pls,*.plsql^I^Isetf plsql
line 1408: 
line 1409: " PLP
line 1410: au BufNewFile,BufRead *.plp^I^I^Isetf plp
line 1411: 
line 1412: " PO and PO template (GNU gettext)
line 1413: au BufNewFile,BufRead *.po,*.pot^I^Isetf po
line 1414: 
line 1415: " Postfix main config
line 1416: au BufNewFile,BufRead main.cf^I^I^Isetf pfmain
line 1417: 
line 1418: " PostScript (+ font files, encapsulated PostScript, Adobe Illustrator)
line 1419: au BufNewFile,BufRead *.ps,*.pfa,*.afm,*.eps,*.epsf,*.epsi,*.ai^I  setf postscr
line 1420: 
line 1421: " PostScript Printer Description
line 1422: au BufNewFile,BufRead *.ppd^I^I^Isetf ppd
line 1423: 
line 1424: " Povray
line 1425: au BufNewFile,BufRead *.pov^I^I^Isetf pov
line 1426: 
line 1427: " Povray configuration
line 1428: au BufNewFile,BufRead .povrayrc^I^I^Isetf povini
line 1429: 
line 1430: " Povray, PHP or assembly
line 1431: au BufNewFile,BufRead *.inc^I^I^Icall s:FTinc()
line 1432: 
line 1433: func! s:FTinc()
line 1454: 
line 1455: " Printcap and Termcap
line 1457: au BufNewFile,BufRead *printcap let b:ptcap_type = "print" | setf ptcap
line 1459: au BufNewFile,BufRead *termcap let b:ptcap_type = "term" | setf ptcap
line 1460: 
line 1461: " PCCTS / ANTRL
line 1462: "au BufNewFile,BufRead *.g^I^I^Isetf antrl
line 1463: au BufNewFile,BufRead *.g^I^I^Isetf pccts
line 1464: 
line 1465: " PPWizard
line 1466: au BufNewFile,BufRead *.it,*.ih^I^I^Isetf ppwiz
line 1467: 
line 1468: " Obj 3D file format
line 1469: " TODO: is there a way to avoid MS-Windows Object files?
line 1470: au BufNewFile,BufRead *.obj^I^I^Isetf obj
line 1471: 
line 1472: " Oracle Pro*C/C++
line 1473: au BufNewFile,BufRead *.pc^I^I^Isetf proc
line 1474: 
line 1475: " Privoxy actions file
line 1476: au BufNewFile,BufRead *.action^I^I^Isetf privoxy
line 1477: 
line 1478: " Procmail
line 1479: au BufNewFile,BufRead .procmail,.procmailrc^Isetf procmail
line 1480: 
line 1481: " Progress or CWEB
line 1482: au BufNewFile,BufRead *.w^I^I^Icall s:FTprogress_cweb()
line 1483: 
line 1484: func! s:FTprogress_cweb()
line 1495: 
line 1496: " Progress or assembly
line 1497: au BufNewFile,BufRead *.i^I^I^Icall s:FTprogress_asm()
line 1498: 
line 1499: func! s:FTprogress_asm()
line 1521: 
line 1522: " Progress or Pascal
line 1523: au BufNewFile,BufRead *.p^I^I^Icall s:FTprogress_pascal()
line 1524: 
line 1525: func! s:FTprogress_pascal()
line 1549: 
line 1550: 
line 1551: " Software Distributor Product Specification File (POSIX 1387.2-1995)
line 1552: au BufNewFile,BufRead *.psf^I^I^Isetf psf
line 1556: au BufNewFile,BufRead INDEX,INFO if getline(1) =~ '^\s*\(distribution\|installed_software\|root\|bundle\|product\)\s*$' |   setf psf | endif
line 1557: 
line 1558: " Prolog
line 1559: au BufNewFile,BufRead *.pdb^I^I^Isetf prolog
line 1560: 
line 1561: " Promela
line 1562: au BufNewFile,BufRead *.pml^I^I^Isetf promela
line 1563: 
line 1564: " Google protocol buffers
line 1565: au BufNewFile,BufRead *.proto^I^I^Isetf proto
line 1566: 
line 1567: " Protocols
line 1568: au BufNewFile,BufRead */etc/protocols^I^Isetf protocols
line 1569: 
line 1570: " Pyrex
line 1571: au BufNewFile,BufRead *.pyx,*.pxd^I^Isetf pyrex
line 1572: 
line 1573: " Python
line 1574: au BufNewFile,BufRead *.py,*.pyw^I^Isetf python
line 1575: 
line 1576: " Quixote (Python-based web framework)
line 1577: au BufNewFile,BufRead *.ptl^I^I^Isetf python
line 1578: 
line 1579: " Radiance
line 1580: au BufNewFile,BufRead *.rad,*.mat^I^Isetf radiance
line 1581: 
line 1582: " Ratpoison config/command files
line 1583: au BufNewFile,BufRead .ratpoisonrc,ratpoisonrc^Isetf ratpoison
line 1584: 
line 1585: " RCS file
line 1586: au BufNewFile,BufRead *\,v^I^I^Isetf rcs
line 1587: 
line 1588: " Readline
line 1589: au BufNewFile,BufRead .inputrc,inputrc^I^Isetf readline
line 1590: 
line 1591: " Registry for MS-Windows
line 1593: au BufNewFile,BufRead *.reg if getline(1) =~? '^REGEDIT[0-9]*\s*$\|^Windows Registry Editor Version \d*\.\d*\s*$' | setf registry | endif
line 1594: 
line 1595: " Renderman Interface Bytestream
line 1596: au BufNewFile,BufRead *.rib^I^I^Isetf rib
line 1597: 
line 1598: " Rexx
line 1599: au BufNewFile,BufRead *.rex,*.orx,*.rxo,*.rxj,*.jrexx,*.rexxj,*.rexx,*.testGroup,*.testUnit^Isetf rexx
line 1600: 
line 1601: " R (Splus)
line 1602: if has("fname_case")
line 1603:   au BufNewFile,BufRead *.s,*.S^I^I^Isetf r
line 1604: else
line 1605:   au BufNewFile,BufRead *.s^I^I^Isetf r
line 1606: endif
line 1607: 
line 1608: " R Help file
line 1609: if has("fname_case")
line 1610:   au BufNewFile,BufRead *.rd,*.Rd^I^Isetf rhelp
line 1611: else
line 1612:   au BufNewFile,BufRead *.rd^I^I^Isetf rhelp
line 1613: endif
line 1614: 
line 1615: " R noweb file
line 1616: if has("fname_case")
line 1617:   au BufNewFile,BufRead *.Rnw,*.rnw,*.Snw,*.snw^I^Isetf rnoweb
line 1618: else
line 1619:   au BufNewFile,BufRead *.rnw,*.snw^I^I^Isetf rnoweb
line 1620: endif
line 1621: 
line 1622: " Rexx, Rebol or R
line 1623: au BufNewFile,BufRead *.r,*.R^I^I^Icall s:FTr()
line 1624: 
line 1625: func! s:FTr()
line 1657: 
line 1658: " Remind
line 1659: au BufNewFile,BufRead .reminders,*.remind,*.rem^I^Isetf remind
line 1660: 
line 1661: " Resolv.conf
line 1662: au BufNewFile,BufRead resolv.conf^I^Isetf resolv
line 1663: 
line 1664: " Relax NG Compact
line 1665: au BufNewFile,BufRead *.rnc^I^I^Isetf rnc
line 1666: 
line 1667: " Relax NG XML
line 1668: au BufNewFile,BufRead *.rng^I^I^Isetf rng
line 1669: 
line 1670: " RPL/2
line 1671: au BufNewFile,BufRead *.rpl^I^I^Isetf rpl
line 1672: 
line 1673: " Robots.txt
line 1674: au BufNewFile,BufRead robots.txt^I^Isetf robots
line 1675: 
line 1676: " Rpcgen
line 1677: au BufNewFile,BufRead *.x^I^I^Isetf rpcgen
line 1678: 
line 1679: " reStructuredText Documentation Format
line 1680: au BufNewFile,BufRead *.rst^I^I^Isetf rst
line 1681: 
line 1682: " RTF
line 1683: au BufNewFile,BufRead *.rtf^I^I^Isetf rtf
line 1684: 
line 1685: " Interactive Ruby shell
line 1686: au BufNewFile,BufRead .irbrc,irbrc^I^Isetf ruby
line 1687: 
line 1688: " Ruby
line 1689: au BufNewFile,BufRead *.rb,*.rbw^I^Isetf ruby
line 1690: 
line 1691: " RubyGems
line 1692: au BufNewFile,BufRead *.gemspec^I^I^Isetf ruby
line 1693: 
line 1694: " Rackup
line 1695: au BufNewFile,BufRead *.ru^I^I^Isetf ruby
line 1696: 
line 1697: " Bundler
line 1698: au BufNewFile,BufRead Gemfile^I^I^Isetf ruby
line 1699: 
line 1700: " Ruby on Rails
line 1701: au BufNewFile,BufRead *.builder,*.rxml,*.rjs^Isetf ruby
line 1702: 
line 1703: " Rantfile and Rakefile is like Ruby
line 1704: au BufNewFile,BufRead [rR]antfile,*.rant,[rR]akefile,*.rake^Isetf ruby
line 1705: 
line 1706: " S-lang (or shader language, or SmallLisp)
line 1707: au BufNewFile,BufRead *.sl^I^I^Isetf slang
line 1708: 
line 1709: " Samba config
line 1710: au BufNewFile,BufRead smb.conf^I^I^Isetf samba
line 1711: 
line 1712: " SAS script
line 1713: au BufNewFile,BufRead *.sas^I^I^Isetf sas
line 1714: 
line 1715: " Sass
line 1716: au BufNewFile,BufRead *.sass^I^I^Isetf sass
line 1717: 
line 1718: " Sather
line 1719: au BufNewFile,BufRead *.sa^I^I^Isetf sather
line 1720: 
line 1721: " Scilab
line 1722: au BufNewFile,BufRead *.sci,*.sce^I^Isetf scilab
line 1723: 
line 1724: " SCSS
line 1725: au BufNewFile,BufRead *.scss^I^I^Isetf scss
line 1726: 
line 1727: " SD: Streaming Descriptors
line 1728: au BufNewFile,BufRead *.sd^I^I^Isetf sd
line 1729: 
line 1730: " SDL
line 1731: au BufNewFile,BufRead *.sdl,*.pr^I^Isetf sdl
line 1732: 
line 1733: " sed
line 1734: au BufNewFile,BufRead *.sed^I^I^Isetf sed
line 1735: 
line 1736: " Sieve (RFC 3028)
line 1737: au BufNewFile,BufRead *.siv^I^I^Isetf sieve
line 1738: 
line 1739: " Sendmail
line 1740: au BufNewFile,BufRead sendmail.cf^I^Isetf sm
line 1741: 
line 1742: " Sendmail .mc files are actually m4.  Could also be MS Message text file.
line 1743: au BufNewFile,BufRead *.mc^I^I^Icall s:McSetf()
line 1744: 
line 1745: func! s:McSetf()
line 1760: 
line 1761: " Services
line 1762: au BufNewFile,BufRead */etc/services^I^Isetf services
line 1763: 
line 1764: " Service Location config
line 1765: au BufNewFile,BufRead */etc/slp.conf^I^Isetf slpconf
line 1766: 
line 1767: " Service Location registration
line 1768: au BufNewFile,BufRead */etc/slp.reg^I^Isetf slpreg
line 1769: 
line 1770: " Service Location SPI
line 1771: au BufNewFile,BufRead */etc/slp.spi^I^Isetf slpspi
line 1772: 
line 1773: " Setserial config
line 1774: au BufNewFile,BufRead */etc/serial.conf^I^Isetf setserial
line 1775: 
line 1776: " SGML
line 1786: au BufNewFile,BufRead *.sgm,*.sgml if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'linuxdoc' |   setf sgmllnx | elseif getline(1) =~ '<!DOCTYPE.*DocBook' || getline(2) =~ '<!DOCTYPE.*DocBook' |   let b:docbk_type = "sgml" |   let b:docbk_ver = 4 |   setf docbk | else |   setf sgml | endif
line 1787: 
line 1788: " SGMLDECL
line 1792: au BufNewFile,BufRead *.decl,*.dcl,*.dec if getline(1).getline(2).getline(3) =~? '^<!SGML' |    setf sgmldecl | endif
line 1793: 
line 1794: " SGML catalog file
line 1795: au BufNewFile,BufRead catalog^I^I^Isetf catalog
line 1796: au BufNewFile,BufRead sgml.catalog*^I^Icall s:StarSetf('catalog')
line 1797: 
line 1798: " Shell scripts (sh, ksh, bash, bash2, csh); Allow .profile_foo etc.
line 1799: " Gentoo ebuilds are actually bash scripts
line 1800: au BufNewFile,BufRead .bashrc*,bashrc,bash.bashrc,.bash_profile*,.bash_logout*,*.bash,*.ebuild call SetFileTypeSH("bash")
line 1801: au BufNewFile,BufRead .kshrc*,*.ksh call SetFileTypeSH("ksh")
line 1802: au BufNewFile,BufRead */etc/profile,.profile*,*.sh,*.env call SetFileTypeSH(getline(1))
line 1803: 
line 1804: " Also called from scripts.vim.
line 1805: func! SetFileTypeSH(name)
line 1848: 
line 1849: " For shell-like file types, check for an "exec" command hidden in a comment,
line 1850: " as used for Tcl.
line 1851: " Also called from scripts.vim, thus can't be local to this script.
line 1852: func! SetFileTypeShell(name)
line 1871: 
line 1872: " tcsh scripts
line 1873: au BufNewFile,BufRead .tcshrc*,*.tcsh,tcsh.tcshrc,tcsh.login^Icall SetFileTypeShell("tcsh")
line 1874: 
line 1875: " csh scripts, but might also be tcsh scripts (on some systems csh is tcsh)
line 1876: au BufNewFile,BufRead .login*,.cshrc*,csh.cshrc,csh.login,csh.logout,*.csh,.alias  call s:CSH()
line 1877: 
line 1878: func! s:CSH()
line 1887: 
line 1888: " Z-Shell script
line 1889: au BufNewFile,BufRead .zprofile,*/etc/zprofile,.zfbfmarks  setf zsh
line 1890: au BufNewFile,BufRead .zsh*,.zlog*,.zcompdump*  call s:StarSetf('zsh')
line 1891: au BufNewFile,BufRead *.zsh^I^I^Isetf zsh
line 1892: 
line 1893: " Scheme
line 1894: au BufNewFile,BufRead *.scm,*.ss,*.rkt^I^Isetf scheme
line 1895: 
line 1896: " Screen RC
line 1897: au BufNewFile,BufRead .screenrc,screenrc^Isetf screen
line 1898: 
line 1899: " Simula
line 1900: au BufNewFile,BufRead *.sim^I^I^Isetf simula
line 1901: 
line 1902: " SINDA
line 1903: au BufNewFile,BufRead *.sin,*.s85^I^Isetf sinda
line 1904: 
line 1905: " SiSU
line 1906: au BufNewFile,BufRead *.sst,*.ssm,*.ssi,*.-sst,*._sst setf sisu
line 1907: au BufNewFile,BufRead *.sst.meta,*.-sst.meta,*._sst.meta setf sisu
line 1908: 
line 1909: " SKILL
line 1910: au BufNewFile,BufRead *.il,*.ils,*.cdf^I^Isetf skill
line 1911: 
line 1912: " SLRN
line 1913: au BufNewFile,BufRead .slrnrc^I^I^Isetf slrnrc
line 1914: au BufNewFile,BufRead *.score^I^I^Isetf slrnsc
line 1915: 
line 1916: " Smalltalk (and TeX)
line 1917: au BufNewFile,BufRead *.st^I^I^Isetf st
line 1925: au BufNewFile,BufRead *.cls if getline(1) =~ '^%' |  setf tex | elseif getline(1)[0] == '#' && getline(1) =~ 'rexx' |  setf rexx | else |  setf st | endif
line 1926: 
line 1927: " Smarty templates
line 1928: au BufNewFile,BufRead *.tpl^I^I^Isetf smarty
line 1929: 
line 1930: " SMIL or XML
line 1936: au BufNewFile,BufRead *.smil if getline(1) =~ '<?\s*xml.*?>' |   setf xml | else |   setf smil | endif
line 1937: 
line 1938: " SMIL or SNMP MIB file
line 1944: au BufNewFile,BufRead *.smi if getline(1) =~ '\<smil\>' |   setf smil | else |   setf mib | endif
line 1945: 
line 1946: " SMITH
line 1947: au BufNewFile,BufRead *.smt,*.smith^I^Isetf smith
line 1948: 
line 1949: " Snobol4 and spitbol
line 1950: au BufNewFile,BufRead *.sno,*.spt^I^Isetf snobol4
line 1951: 
line 1952: " SNMP MIB files
line 1953: au BufNewFile,BufRead *.mib,*.my^I^Isetf mib
line 1954: 
line 1955: " Snort Configuration
line 1956: au BufNewFile,BufRead *.hog,snort.conf,vision.conf^Isetf hog
line 1957: au BufNewFile,BufRead *.rules^I^I^Icall s:FTRules()
line 1958: 
line 1959: let s:ft_rules_udev_rules_pattern = '^\s*\cudev_rules\s*=\s*"\([^"]\{-1,}\)/*".*'
line 1960: func! s:FTRules()
line 1988: 
line 1989: 
line 1990: " Spec (Linux RPM)
line 1991: au BufNewFile,BufRead *.spec^I^I^Isetf spec
line 1992: 
line 1993: " Speedup (AspenTech plant simulator)
line 1994: au BufNewFile,BufRead *.speedup,*.spdata,*.spd^Isetf spup
line 1995: 
line 1996: " Slice
line 1997: au BufNewFile,BufRead *.ice^I^I^Isetf slice
line 1998: 
line 1999: " Spice
line 2000: au BufNewFile,BufRead *.sp,*.spice^I^Isetf spice
line 2001: 
line 2002: " Spyce
line 2003: au BufNewFile,BufRead *.spy,*.spi^I^Isetf spyce
line 2004: 
line 2005: " Squid
line 2006: au BufNewFile,BufRead squid.conf^I^Isetf squid
line 2007: 
line 2008: " SQL for Oracle Designer
line 2009: au BufNewFile,BufRead *.tyb,*.typ,*.tyc,*.pkb,*.pks^Isetf sql
line 2010: 
line 2011: " SQL
line 2012: au BufNewFile,BufRead *.sql^I^I^Icall s:SQL()
line 2013: 
line 2014: func! s:SQL()
line 2021: 
line 2022: " SQLJ
line 2023: au BufNewFile,BufRead *.sqlj^I^I^Isetf sqlj
line 2024: 
line 2025: " SQR
line 2026: au BufNewFile,BufRead *.sqr,*.sqi^I^Isetf sqr
line 2027: 
line 2028: " OpenSSH configuration
line 2029: au BufNewFile,BufRead ssh_config,*/.ssh/config^Isetf sshconfig
line 2030: 
line 2031: " OpenSSH server configuration
line 2032: au BufNewFile,BufRead sshd_config^I^Isetf sshdconfig
line 2033: 
line 2034: " Stata
line 2035: au BufNewFile,BufRead *.ado,*.class,*.do,*.imata,*.mata   setf stata
line 2036: 
line 2037: " SMCL
line 2038: au BufNewFile,BufRead *.hlp,*.ihlp,*.smcl^Isetf smcl
line 2039: 
line 2040: " Stored Procedures
line 2041: au BufNewFile,BufRead *.stp^I^I^Isetf stp
line 2042: 
line 2043: " Standard ML
line 2044: au BufNewFile,BufRead *.sml^I^I^Isetf sml
line 2045: 
line 2046: " Sratus VOS command macro
line 2047: au BufNewFile,BufRead *.cm^I^I^Isetf voscm
line 2048: 
line 2049: " Sysctl
line 2050: au BufNewFile,BufRead */etc/sysctl.conf,*/etc/sysctl.d/*.conf^Isetf sysctl
line 2051: 
line 2052: " Synopsys Design Constraints
line 2053: au BufNewFile,BufRead *.sdc^I^I^Isetf sdc
line 2054: 
line 2055: " Sudoers
line 2056: au BufNewFile,BufRead */etc/sudoers,sudoers.tmp^Isetf sudoers
line 2057: 
line 2058: " SVG (Scalable Vector Graphics)
line 2059: au BufNewFile,BufRead *.svg^I^I^Isetf svg
line 2060: 
line 2061: " If the file has an extension of 't' and is in a directory 't' then it is
line 2062: " almost certainly a Perl test file.
line 2063: " If the first line starts with '#' and contains 'perl' it's probably a Perl
line 2064: " file.
line 2065: " (Slow test) If a file contains a 'use' statement then it is almost certainly
line 2066: " a Perl file.
line 2067: func! s:FTperl()
line 2082: 
line 2083: " Tads (or Nroff or Perl test file)
line 2085: au BufNewFile,BufRead *.t if !s:FTnroff() && !s:FTperl() | setf tads | endif
line 2086: 
line 2087: " Tags
line 2088: au BufNewFile,BufRead tags^I^I^Isetf tags
line 2089: 
line 2090: " TAK
line 2091: au BufNewFile,BufRead *.tak^I^I^Isetf tak
line 2092: 
line 2093: " Task
line 2094: au BufRead,BufNewFile {pending,completed,undo}.data  setf taskdata
line 2095: au BufRead,BufNewFile *.task                    setf taskedit
line 2096: 
line 2097: " Tcl (JACL too)
line 2098: au BufNewFile,BufRead *.tcl,*.tk,*.itcl,*.itk,*.jacl^Isetf tcl
line 2099: 
line 2100: " TealInfo
line 2101: au BufNewFile,BufRead *.tli^I^I^Isetf tli
line 2102: 
line 2103: " Telix Salt
line 2104: au BufNewFile,BufRead *.slt^I^I^Isetf tsalt
line 2105: 
line 2106: " Terminfo
line 2107: au BufNewFile,BufRead *.ti^I^I^Isetf terminfo
line 2108: 
line 2109: " TeX
line 2110: au BufNewFile,BufRead *.latex,*.sty,*.dtx,*.ltx,*.bbl^Isetf tex
line 2111: au BufNewFile,BufRead *.tex^I^I^Icall s:FTtex()
line 2112: 
line 2113: " Choose context, plaintex, or tex (LaTeX) based on these rules:
line 2114: " 1. Check the first line of the file for "%&<format>".
line 2115: " 2. Check the first 1000 non-comment lines for LaTeX or ConTeXt keywords.
line 2116: " 3. Default to "latex" or to g:tex_flavor, can be set in user's vimrc.
line 2117: func! s:FTtex()
line 2164: 
line 2165: " ConTeXt
line 2166: au BufNewFile,BufRead tex/context/*/*.tex,*.mkii,*.mkiv   setf context
line 2167: 
line 2168: " Texinfo
line 2169: au BufNewFile,BufRead *.texinfo,*.texi,*.txi^Isetf texinfo
line 2170: 
line 2171: " TeX configuration
line 2172: au BufNewFile,BufRead texmf.cnf^I^I^Isetf texmf
line 2173: 
line 2174: " Tidy config
line 2175: au BufNewFile,BufRead .tidyrc,tidyrc^I^Isetf tidy
line 2176: 
line 2177: " TF mud client
line 2178: au BufNewFile,BufRead *.tf,.tfrc,tfrc^I^Isetf tf
line 2179: 
line 2180: " TPP - Text Presentation Program
line 2181: au BufNewFile,BufReadPost *.tpp^I^I^Isetf tpp
line 2182: 
line 2183: " Treetop
line 2184: au BufRead,BufNewFile *.treetop^I^I^Isetf treetop
line 2185: 
line 2186: " Trustees
line 2187: au BufNewFile,BufRead trustees.conf^I^Isetf trustees
line 2188: 
line 2189: " TSS - Geometry
line 2190: au BufNewFile,BufReadPost *.tssgm^I^Isetf tssgm
line 2191: 
line 2192: " TSS - Optics
line 2193: au BufNewFile,BufReadPost *.tssop^I^Isetf tssop
line 2194: 
line 2195: " TSS - Command Line (temporary)
line 2196: au BufNewFile,BufReadPost *.tsscl^I^Isetf tsscl
line 2197: 
line 2198: " TWIG files
line 2199: au BufNewFile,BufReadPost *.twig^I^Isetf twig
line 2200: 
line 2201: " Motif UIT/UIL files
line 2202: au BufNewFile,BufRead *.uit,*.uil^I^Isetf uil
line 2203: 
line 2204: " Udev conf
line 2205: au BufNewFile,BufRead */etc/udev/udev.conf^Isetf udevconf
line 2206: 
line 2207: " Udev permissions
line 2208: au BufNewFile,BufRead */etc/udev/permissions.d/*.permissions setf udevperm
line 2209: "
line 2210: " Udev symlinks config
line 2211: au BufNewFile,BufRead */etc/udev/cdsymlinks.conf^Isetf sh
line 2212: 
line 2213: " UnrealScript
line 2214: au BufNewFile,BufRead *.uc^I^I^Isetf uc
line 2215: 
line 2216: " Updatedb
line 2217: au BufNewFile,BufRead */etc/updatedb.conf^Isetf updatedb
line 2218: 
line 2219: " Upstart (init(8)) config files
line 2220: au BufNewFile,BufRead */usr/share/upstart/*.conf               setf upstart
line 2221: au BufNewFile,BufRead */usr/share/upstart/*.override           setf upstart
line 2222: au BufNewFile,BufRead */etc/init/*.conf,*/etc/init/*.override  setf upstart
line 2223: au BufNewFile,BufRead */.init/*.conf,*/.init/*.override        setf upstart
line 2224: au BufNewFile,BufRead */.config/upstart/*.conf                 setf upstart
line 2225: au BufNewFile,BufRead */.config/upstart/*.override             setf upstart
line 2226: 
line 2227: " Vera
line 2228: au BufNewFile,BufRead *.vr,*.vri,*.vrh^I^Isetf vera
line 2229: 
line 2230: " Verilog HDL
line 2231: au BufNewFile,BufRead *.v^I^I^Isetf verilog
line 2232: 
line 2233: " Verilog-AMS HDL
line 2234: au BufNewFile,BufRead *.va,*.vams^I^Isetf verilogams
line 2235: 
line 2236: " VHDL
line 2237: au BufNewFile,BufRead *.hdl,*.vhd,*.vhdl,*.vbe,*.vst  setf vhdl
line 2238: au BufNewFile,BufRead *.vhdl_[0-9]*^I^Icall s:StarSetf('vhdl')
line 2239: 
line 2240: " Vim script
line 2241: au BufNewFile,BufRead *.vim,*.vba,.exrc,_exrc^Isetf vim
line 2242: 
line 2243: " Viminfo file
line 2244: au BufNewFile,BufRead .viminfo,_viminfo^I^Isetf viminfo
line 2245: 
line 2246: " Virata Config Script File or Drupal module
line 2252: au BufRead,BufNewFile *.hw,*.module,*.pkg if getline(1) =~ '<?php' |   setf php | else |   setf virata | endif
line 2253: 
line 2254: " Visual Basic (also uses *.bas) or FORM
line 2255: au BufNewFile,BufRead *.frm^I^I^Icall s:FTVB("form")
line 2256: 
line 2257: " SaxBasic is close to Visual Basic
line 2258: au BufNewFile,BufRead *.sba^I^I^Isetf vb
line 2259: 
line 2260: " Vgrindefs file
line 2261: au BufNewFile,BufRead vgrindefs^I^I^Isetf vgrindefs
line 2262: 
line 2263: " VRML V1.0c
line 2264: au BufNewFile,BufRead *.wrl^I^I^Isetf vrml
line 2265: 
line 2266: " Webmacro
line 2267: au BufNewFile,BufRead *.wm^I^I^Isetf webmacro
line 2268: 
line 2269: " Wget config
line 2270: au BufNewFile,BufRead .wgetrc,wgetrc^I^Isetf wget
line 2271: 
line 2272: " Website MetaLanguage
line 2273: au BufNewFile,BufRead *.wml^I^I^Isetf wml
line 2274: 
line 2275: " Winbatch
line 2276: au BufNewFile,BufRead *.wbt^I^I^Isetf winbatch
line 2277: 
line 2278: " WSML
line 2279: au BufNewFile,BufRead *.wsml^I^I^Isetf wsml
line 2280: 
line 2281: " WvDial
line 2282: au BufNewFile,BufRead wvdial.conf,.wvdialrc^Isetf wvdial
line 2283: 
line 2284: " CVS RC file
line 2285: au BufNewFile,BufRead .cvsrc^I^I^Isetf cvsrc
line 2286: 
line 2287: " CVS commit file
line 2288: au BufNewFile,BufRead cvs\d\+^I^I^Isetf cvs
line 2289: 
line 2290: " WEB (*.web is also used for Winbatch: Guess, based on expecting "%" comment
line 2291: " lines in a WEB file).
line 2297: au BufNewFile,BufRead *.web if getline(1)[0].getline(2)[0].getline(3)[0].getline(4)[0].getline(5)[0] =~ "%" |   setf web | else |   setf winbatch | endif
line 2298: 
line 2299: " Windows Scripting Host and Windows Script Component
line 2300: au BufNewFile,BufRead *.ws[fc]^I^I^Isetf wsh
line 2301: 
line 2302: " XHTML
line 2303: au BufNewFile,BufRead *.xhtml,*.xht^I^Isetf xhtml
line 2304: 
line 2305: " X Pixmap (dynamically sets colors, use BufEnter to make it work better)
line 2311: au BufEnter *.xpm if getline(1) =~ "XPM2" |   setf xpm2 | else |   setf xpm | endif
line 2312: au BufEnter *.xpm2^I^I^I^Isetf xpm2
line 2313: 
line 2314: " XFree86 config
line 2319: au BufNewFile,BufRead XF86Config if getline(1) =~ '\<XConfigurator\>' |   let b:xf86conf_xfree86_version = 3 | endif | setf xf86conf
line 2322: au BufNewFile,BufRead */xorg.conf.d/*.conf let b:xf86conf_xfree86_version = 4 | setf xf86conf
line 2323: 
line 2324: " Xorg config
line 2325: au BufNewFile,BufRead xorg.conf,xorg.conf-4^Ilet b:xf86conf_xfree86_version = 4 | setf xf86conf
line 2326: 
line 2327: " Xinetd conf
line 2328: au BufNewFile,BufRead */etc/xinetd.conf^I^Isetf xinetd
line 2329: 
line 2330: " XS Perl extension interface language
line 2331: au BufNewFile,BufRead *.xs^I^I^Isetf xs
line 2332: 
line 2333: " X resources file
line 2334: au BufNewFile,BufRead .Xdefaults,.Xpdefaults,.Xresources,xdm-config,*.ad setf xdefaults
line 2335: 
line 2336: " Xmath
line 2337: au BufNewFile,BufRead *.msc,*.msf^I^Isetf xmath
line 2339: au BufNewFile,BufRead *.ms if !s:FTnroff() | setf xmath | endif
line 2340: 
line 2341: " XML  specific variants: docbk and xbl
line 2342: au BufNewFile,BufRead *.xml^I^I^Icall s:FTxml()
line 2343: 
line 2344: func! s:FTxml()
line 2369: 
line 2370: " XMI (holding UML models) is also XML
line 2371: au BufNewFile,BufRead *.xmi^I^I^Isetf xml
line 2372: 
line 2373: " CSPROJ files are Visual Studio.NET's XML-based project config files
line 2374: au BufNewFile,BufRead *.csproj,*.csproj.user^Isetf xml
line 2375: 
line 2376: " Qt Linguist translation source and Qt User Interface Files are XML
line 2377: au BufNewFile,BufRead *.ts,*.ui^I^I^Isetf xml
line 2378: 
line 2379: " TPM's are RDF-based descriptions of TeX packages (Nikolai Weibull)
line 2380: au BufNewFile,BufRead *.tpm^I^I^Isetf xml
line 2381: 
line 2382: " Xdg menus
line 2383: au BufNewFile,BufRead */etc/xdg/menus/*.menu^Isetf xml
line 2384: 
line 2385: " ATI graphics driver configuration
line 2386: au BufNewFile,BufRead fglrxrc^I^I^Isetf xml
line 2387: 
line 2388: " XLIFF (XML Localisation Interchange File Format) is also XML
line 2389: au BufNewFile,BufRead *.xlf^I^I^Isetf xml
line 2390: au BufNewFile,BufRead *.xliff^I^I^Isetf xml
line 2391: 
line 2392: " XML User Interface Language
line 2393: au BufNewFile,BufRead *.xul^I^I^Isetf xml
line 2394: 
line 2395: " X11 xmodmap (also see below)
line 2396: au BufNewFile,BufRead *Xmodmap^I^I^Isetf xmodmap
line 2397: 
line 2398: " Xquery
line 2399: au BufNewFile,BufRead *.xq,*.xql,*.xqm,*.xquery,*.xqy^Isetf xquery
line 2400: 
line 2401: " XSD
line 2402: au BufNewFile,BufRead *.xsd^I^I^Isetf xsd
line 2403: 
line 2404: " Xslt
line 2405: au BufNewFile,BufRead *.xsl,*.xslt^I^Isetf xslt
line 2406: 
line 2407: " Yacc
line 2408: au BufNewFile,BufRead *.yy^I^I^Isetf yacc
line 2409: 
line 2410: " Yacc or racc
line 2411: au BufNewFile,BufRead *.y^I^I^Icall s:FTy()
line 2412: 
line 2413: func! s:FTy()
line 2429: 
line 2430: 
line 2431: " Yaml
line 2432: au BufNewFile,BufRead *.yaml,*.yml^I^Isetf yaml
line 2433: 
line 2434: " yum conf (close enough to dosini)
line 2435: au BufNewFile,BufRead */etc/yum.conf^I^Isetf dosini
line 2436: 
line 2437: " Zimbu
line 2438: au BufNewFile,BufRead *.zu^I^I^Isetf zimbu
line 2439: 
line 2440: " Zope
line 2441: "   dtml (zope dynamic template markup language), pt (zope page template),
line 2442: "   cpt (zope form controller page template)
line 2443: au BufNewFile,BufRead *.dtml,*.pt,*.cpt^I^Icall s:FThtml()
line 2444: "   zsql (zope sql method)
line 2445: au BufNewFile,BufRead *.zsql^I^I^Icall s:SQL()
line 2446: 
line 2447: " Z80 assembler asz80
line 2448: au BufNewFile,BufRead *.z8a^I^I^Isetf z8a
line 2449: 
line 2450: augroup END
line 2451: 
line 2452: 
line 2453: " Source the user-specified filetype file, for backwards compatibility with
line 2454: " Vim 5.x.
line 2455: if exists("myfiletypefile") && filereadable(expand(myfiletypefile))
line 2456:   execute "source " . myfiletypefile
line 2457: endif
line 2458: 
line 2459: 
line 2460: " Check for "*" after loading myfiletypefile, so that scripts.vim is only used
line 2461: " when there are no matching file name extensions.
line 2462: " Don't do this for compressed files.
line 2463: augroup filetypedetect
line 2466: au BufNewFile,BufRead * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
line 2467: au StdinReadPost * if !did_filetype() | runtime! scripts.vim | endif
line 2468: 
line 2469: 
line 2470: " Extra checks for when no filetype has been detected now.  Mostly used for
line 2471: " patterns that end in "*".  E.g., "zsh*" matches "zsh.vim", but that's a Vim
line 2472: " script file.
line 2473: " Most of these should call s:StarSetf() to avoid names ending in .gz and the
line 2474: " like are used.
line 2475: 
line 2476: " More Apache config files
line 2477: au BufNewFile,BufRead access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*^Icall s:StarSetf('apache')
line 2478: au BufNewFile,BufRead */etc/apache2/*.conf*,*/etc/apache2/conf.*/*,*/etc/apache2/mods-*/*,*/etc/apache2/sites-*/*,*/etc/httpd/conf.d/*.conf*^I^Icall s:StarSetf('apache')
line 2479: 
line 2480: " Asterisk config file
line 2481: au BufNewFile,BufRead *asterisk/*.conf*^I^Icall s:StarSetf('asterisk')
line 2482: au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')
line 2483: 
line 2484: " Bazaar version control
line 2485: au BufNewFile,BufRead bzr_log.*^I^I^Isetf bzr
line 2486: 
line 2487: " BIND zone
line 2488: au BufNewFile,BufRead */named/db.*,*/bind/db.*^Icall s:StarSetf('bindzone')
line 2489: 
line 2490: " Calendar
line 2493: au BufNewFile,BufRead */.calendar/*,*/share/calendar/*/calendar.*,*/share/calendar/calendar.*^I^I^I^I^Icall s:StarSetf('calendar')
line 2494: 
line 2495: " Changelog
line 2501: au BufNewFile,BufRead [cC]hange[lL]og* if getline(1) =~ '; urgency='|  call s:StarSetf('debchangelog')|else|  call s:StarSetf('changelog')|endif
line 2502: 
line 2503: " Crontab
line 2504: au BufNewFile,BufRead crontab,crontab.*,*/etc/cron.d/*^I^Icall s:StarSetf('crontab')
line 2505: 
line 2506: " dnsmasq(8) configuration
line 2507: au BufNewFile,BufRead */etc/dnsmasq.d/*^I^Icall s:StarSetf('dnsmasq')
line 2508: 
line 2509: " Dracula
line 2510: au BufNewFile,BufRead drac.*^I^I^Icall s:StarSetf('dracula')
line 2511: 
line 2512: " Fvwm
line 2513: au BufNewFile,BufRead */.fvwm/*^I^I^Icall s:StarSetf('fvwm')
line 2515: au BufNewFile,BufRead *fvwmrc*,*fvwm95*.hook let b:fvwm_version = 1 | call s:StarSetf('fvwm')
line 2521: au BufNewFile,BufRead *fvwm2rc* if expand("<afile>:e") == "m4"|  call s:StarSetf('fvwm2m4')|else|  let b:fvwm_version = 2 | call s:StarSetf('fvwm')|endif
line 2522: 
line 2523: " Gedcom
line 2524: au BufNewFile,BufRead */tmp/lltmp*^I^Icall s:StarSetf('gedcom')
line 2525: 
line 2526: " GTK RC
line 2527: au BufNewFile,BufRead .gtkrc*,gtkrc*^I^Icall s:StarSetf('gtkrc')
line 2528: 
line 2529: " Jam
line 2530: au BufNewFile,BufRead Prl*.*,JAM*.*^I^Icall s:StarSetf('jam')
line 2531: 
line 2532: " Jargon
line 2536: au! BufNewFile,BufRead *jarg* if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'|  call s:StarSetf('jargon')|endif
line 2537: 
line 2538: " Kconfig
line 2539: au BufNewFile,BufRead Kconfig.*^I^I^Icall s:StarSetf('kconfig')
line 2540: 
line 2541: " Lilo: Linux loader
line 2542: au BufNewFile,BufRead lilo.conf*^I^Icall s:StarSetf('lilo')
line 2543: 
line 2544: " Logcheck
line 2545: au BufNewFile,BufRead */etc/logcheck/*.d*/*^Icall s:StarSetf('logcheck')
line 2546: 
line 2547: " Makefile
line 2548: au BufNewFile,BufRead [mM]akefile*^I^Icall s:StarSetf('make')
line 2549: 
line 2550: " Ruby Makefile
line 2551: au BufNewFile,BufRead [rR]akefile*^I^Icall s:StarSetf('ruby')
line 2552: 
line 2553: " Mail (also matches muttrc.vim, so this is below the other checks)
line 2554: au BufNewFile,BufRead mutt[[:alnum:]._-]\\\{6\}^Isetf mail
line 2555: 
line 2556: " Modconf
line 2560: au BufNewFile,BufRead */etc/modutils/* if executable(expand("<afile>")) != 1|  call s:StarSetf('modconf')|endif
line 2561: au BufNewFile,BufRead */etc/modprobe.*^I^Icall s:StarSetf('modconf')
line 2562: 
line 2563: " Mutt setup file
line 2564: au BufNewFile,BufRead .mutt{ng,}rc*,*/.mutt{ng,}/mutt{ng,}rc*^Icall s:StarSetf('muttrc')
line 2565: au BufNewFile,BufRead mutt{ng,}rc*,Mutt{ng,}rc*^I^Icall s:StarSetf('muttrc')
line 2566: 
line 2567: " Nroff macros
line 2568: au BufNewFile,BufRead tmac.*^I^I^Icall s:StarSetf('nroff')
line 2569: 
line 2570: " Pam conf
line 2571: au BufNewFile,BufRead */etc/pam.d/*^I^Icall s:StarSetf('pamconf')
line 2572: 
line 2573: " Printcap and Termcap
line 2577: au BufNewFile,BufRead *printcap* if !did_filetype()|  let b:ptcap_type = "print" | call s:StarSetf('ptcap')|endif
line 2581: au BufNewFile,BufRead *termcap* if !did_filetype()|  let b:ptcap_type = "term" | call s:StarSetf('ptcap')|endif
line 2582: 
line 2583: " ReDIF
line 2584: " Only used when the .rdf file was not detected to be XML.
line 2585: au BufRead,BufNewFile *.rdf^I^I^Icall s:Redif()
line 2586: func! s:Redif()
line 2596: 
line 2597: " Remind
line 2598: au BufNewFile,BufRead .reminders*^I^Icall s:StarSetf('remind')
line 2599: 
line 2600: " Vim script
line 2601: au BufNewFile,BufRead *vimrc*^I^I^Icall s:StarSetf('vim')
line 2602: 
line 2603: " Subversion commit file
line 2604: au BufNewFile,BufRead svn-commit*.tmp^I^Isetf svn
line 2605: 
line 2606: " X resources file
line 2607: au BufNewFile,BufRead Xresources*,*/app-defaults/*,*/Xresources/* call s:StarSetf('xdefaults')
line 2608: 
line 2609: " XFree86 config
line 2611: au BufNewFile,BufRead XF86Config-4* let b:xf86conf_xfree86_version = 4 | call s:StarSetf('xf86conf')
line 2616: au BufNewFile,BufRead XF86Config* if getline(1) =~ '\<XConfigurator\>'|  let b:xf86conf_xfree86_version = 3|endif|call s:StarSetf('xf86conf')
line 2617: 
line 2618: " X11 xmodmap
line 2619: au BufNewFile,BufRead *xmodmap*^I^I^Icall s:StarSetf('xmodmap')
line 2620: 
line 2621: " Xinetd conf
line 2622: au BufNewFile,BufRead */etc/xinetd.d/*^I^Icall s:StarSetf('xinetd')
line 2623: 
line 2624: " yum conf (close enough to dosini)
line 2625: au BufNewFile,BufRead */etc/yum.repos.d/*^Icall s:StarSetf('dosini')
line 2626: 
line 2627: " Z-Shell script
line 2628: au BufNewFile,BufRead zsh*,zlog*^I^Icall s:StarSetf('zsh')
line 2629: 
line 2630: 
line 2631: " Plain text files, needs to be far down to not override others.  This avoids
line 2632: " the "conf" type being used if there is a line starting with '#'.
line 2633: au BufNewFile,BufRead *.txt,*.text^I^Isetf text
line 2634: 
line 2635: 
line 2636: " Use the filetype detect plugins.  They may overrule any of the previously
line 2637: " detected filetypes.
line 2638: runtime! ftdetect/*.vim
Searching for "ftdetect/*.vim" in "/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/ftdetect/*.vim"
chdir(/home/kguest/.vim/ftdetect)
fchdir() to previous dir
line 2638: sourcing "/home/kguest/.vim/ftdetect/markdown.vim"
line 6: autocmd BufNewFile,BufRead *.markdown,*.md,*.mdown,*.mkd,*.mkdn if &ft =~# '^\%(conf\|modula2\)$' |   set ft=markdown | else |   setf markdown | endif
finished sourcing /home/kguest/.vim/ftdetect/markdown.vim
continuing in /usr/share/vim/vim74/filetype.vim
chdir(/home/kguest/.vim/ftdetect)
fchdir() to previous dir
line 2638: sourcing "/home/kguest/.vim/ftdetect/twig.vim"
line 1: " Twig
line 2: autocmd BufNewFile,BufRead *.twig set filetype=twig
line 3: 
line 4: " HTML Twig
line 5: autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
finished sourcing /home/kguest/.vim/ftdetect/twig.vim
continuing in /usr/share/vim/vim74/filetype.vim
chdir(/home/kguest/.vim/ftdetect)
fchdir() to previous dir
line 2638: sourcing "/home/kguest/.vim/ftdetect/txt.vim"
line 1: au BufRead,BufNewFile *.txt^I^Iset filetype=txt
finished sourcing /home/kguest/.vim/ftdetect/txt.vim
continuing in /usr/share/vim/vim74/filetype.vim
Searching for "/var/lib/vim/addons/ftdetect/*.vim"
Searching for "/usr/share/vim/vimfiles/ftdetect/*.vim"
Searching for "/usr/share/vim/vim74/ftdetect/*.vim"
Searching for "/usr/share/vim/vimfiles/after/ftdetect/*.vim"
Searching for "/var/lib/vim/addons/after/ftdetect/*.vim"
Searching for "/home/kguest/.vim/after/ftdetect/*.vim"
line 2639: 
line 2640: " NOTE: The above command could have ended the filetypedetect autocmd group
line 2641: " and started another one. Let's make sure it has ended to get to a consistent
line 2642: " state.
line 2643: augroup END
line 2644: 
line 2645: " Generic configuration file (check this last, it's just guessing!)
line 2651: au filetypedetect BufNewFile,BufRead,StdinReadPost * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf conf | endif
line 2652: 
line 2653: 
line 2654: " If the GUI is already running, may still need to install the Syntax menu.
line 2655: " Don't do it when the 'M' flag is included in 'guioptions'.
line 2657: if has("menu") && has("gui_running") && !exists("did_install_syntax_menu") && &guioptions !~# "M"
line 2658:   source <sfile>:p:h/menu.vim
line 2659: endif
line 2660: 
line 2661: " Function called for testing all functions defined here.  These are
line 2662: " script-local, thus need to be executed here.
line 2663: " Returns a string with error messages (hopefully empty).
line 2664: func! TestFiletypeFuncs(testlist)
line 2675: 
line 2676: " Restore 'cpoptions'
line 2677: let &cpo = s:cpo_save
line 2678: unlet s:cpo_save
finished sourcing /usr/share/vim/vim74/filetype.vim
continuing in /usr/share/vim/vim74/syntax/syntax.vim
Searching for "/usr/share/vim/vimfiles/after/filetype.vim"
Searching for "/var/lib/vim/addons/after/filetype.vim"
Searching for "/home/kguest/.vim/after/filetype.vim"
line 26:   let s:did_ft = 0
line 27: endif
line 28: 
line 29: " Set up the connection between FileType and Syntax autocommands.
line 30: " This makes the syntax automatically set when the file type is detected.
line 31: augroup syntaxset
line 32:   au! FileType *^Iexe "set syntax=" . expand("<amatch>")
line 33: augroup END
line 34: 
line 35: 
line 36: " Execute the syntax autocommands for the each buffer.
line 37: " If the filetype wasn't detected yet, do that now.
line 38: " Always do the syntaxset autocommands, for buffers where the 'filetype'
line 39: " already was set manually (e.g., help buffers).
line 40: doautoall syntaxset FileType
line 41: if !s:did_ft
line 42:   doautoall filetypedetect BufRead
line 43: endif
finished sourcing /usr/share/vim/vim74/syntax/syntax.vim
continuing in /usr/share/vim/vimrc
line 21: endif
line 22: 
line 23: " If using a dark background within the editing area and syntax highlighting
line 24: " turn on this option as well
line 25: "set background=dark
line 26: 
line 27: " Uncomment the following to have Vim jump to the last position when
line 28: " reopening a file
line 29: "if has("autocmd")
line 30: "  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
line 31: "endif
line 32: 
line 33: " Uncomment the following to have Vim load indentation rules and plugins
line 34: " according to the detected filetype.
line 35: "if has("autocmd")
line 36: "  filetype plugin indent on
line 37: "endif
line 38: 
line 39: " The following are commented out as they cause vim to behave a lot
line 40: " differently from regular Vi. They are highly recommended though.
line 41: "set showcmd^I^I" Show (partial) command in status line.
line 42: "set showmatch^I^I" Show matching brackets.
line 43: "set ignorecase^I^I" Do case insensitive matching
line 44: "set smartcase^I^I" Do smart case matching
line 45: "set incsearch^I^I" Incremental search
line 46: "set autowrite^I^I" Automatically save before commands like :next and :make
line 47: "set hidden^I^I" Hide buffers when they are abandoned
line 48: "set mouse=a^I^I" Enable mouse usage (all modes)
line 49: 
line 50: " Source a global configuration file if available
line 51: if filereadable("/etc/vim/vimrc.local")
line 52:   source /etc/vim/vimrc.local
line 53: endif
line 54: 
finished sourcing $VIM/vimrc
chdir(/home/kguest)
fchdir() to previous dir
sourcing "$HOME/.vimrc"
line 1: " vim:set et sts=2 sw=2:
line 2: " {{{  Settings  
line 3: set nocompatible        " I want VIM not vi. B-)
line 4: "show possible completions
line 5: set wildmenu
line 6: " Set command-line completion mode:
line 7: "   - on first <Tab>, when more than one match, list all matches and complete
line 8: "     the longest common  string
line 9: "   - on second <Tab>, complete the next full match and show menu
line 10: ":set wildmode=longest,list
line 11: set wildmode=list:longest,full
line 12: "Ignore these
line 13: set wildignore=*~,*gz,*.a,*.bmp,*.class,*.flp,*.gif,*.jpg,*.la,*.mo,*.o,*.obj
line 14: set wildignore+=*.png,*.so,*.swp,*.xpm,.svn,CVS,*.mli,*.cmi,*.cmx
line 15: 
line 16: " Write with sudo ":w!!"
line 17: cnoremap w!! w !sudo tee % >/dev/null
line 18: 
line 19: " map ,f to display all lines with keyword under cursor and ask which one to
line 20: " jump to
line 21: nmap ,f [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>
line 22: " Optimize for fast terminal connections
line 23: set ttyfast
line 24: " Allow backspace in insert mode
line 25: set backspace=indent,eol,start
line 26: 
line 27: set textwidth=79        " wrap at 79 characters
line 28: if v:version >= 703
line 29:   hi ColorColumn guibg=#101010
line 30:   set colorcolumn=80,120
line 31: else
line 32:   au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>79v.\+', -1)
line 33: endif
line 34: 
line 35: set backup              " backups are good
line 36: set backupdir=~/.vim/backup
line 37: set directory=~/tmp/vim
line 38: 
line 39: set wrapmargin=1
line 40: set viminfo='20,\"50    " read/write a .viminfo file, don't store more than
line 41:                         " 50 lines of registers
line 42: set history=50          " keep 50 lines of command line history
line 43: set autoindent
line 44: set smartindent
line 45: set incsearch           " Use incremental searching
line 46: set nohlsearch          " don't highlight results of search. I think it's ugly.
line 47: set showcmd             " show the command in the status line
line 48: set showmatch           " Show matching brackets.
line 49: " Enable CTRL-A/CTRL-X to work on octal and hex numbers, as well as characters
line 50: set nrformats=octal,hex,alpha
line 51: 
line 52: " Jump to matching bracket for 2/10th of a second (works with showmatch)
line 53: set matchtime=2
line 54: set laststatus=2        " Always have a status line
line 55: set report=2            " If I've changed more than one...
line 56: set ruler               " show the cursor position all the time
line 57: set splitbelow          " Put new windows on bottom
line 58: set ttimeout notimeout timeoutlen=100
line 59: set showmode            " What mode am I in?
line 60: set encoding=utf8
line 61: set termencoding=utf-8
line 62: set shell=bash
line 63: "tabs...
line 64: set expandtab
line 65: set tabstop=4
line 66: " Use 4 spaces for (auto)indent
line 67: set shiftwidth=4
line 68: " Don't request terminal version string (for xterm)
line 69: set t_RV=
line 70: " Round indent to multiple of 'shiftwidth' for > and < commands
line 71: set shiftround
line 72: set softtabstop=4
line 73: set nojoinspaces
line 74: " Show line numbers by default
line 75: set number
line 76: """ Enable folding by fold markers
line 77: set foldmethod=marker
line 78: " Autoclose folds, when moving out of them
line 79: set foldclose=all
line 80: " Jump 5 lines when running out of the screen
line 81: "set scrolljump=5
line 82: " Indicate jump out of the screen when 3 lines before end of the screen
line 83: "set scrolloff=3
line 84: "also ignore .pyc files...
line 85: set suffixes+=.pyc,.ps
line 86: "shut up and don't flash (no noise; neither audio or visual)
line 87: set vb t_vb=
line 88: "automatically write the current file out when I move on to the next one.
line 89: set autowrite
line 90: set updatecount=50          " write a swapfile every 50 chars
line 91: set updatetime=15000        " or every 15000 milliseconds
line 92: ""let me type in vowels with fadas and such.
line 93: "set digraph
line 94: " Where to find tags files for jumping to function definitions.
line 95: set tags=./tags,../tags,../../tags,../../../tags,../../../../tags,../../../../../tags
line 96: " Where to find headers
line 97: set path=.
line 98: ",/usr/include,/usr/X11/include,/usr/local/include,/usr/src/linux/include/
line 99: 
line 100: "set cursorline
line 101: "if I have split windows vertically, I want them to be at least 80 chars wide
line 102: "and 10 chars tall when active
line 103: if v:version >= 600
line 104:   if has("windows")
line 105:     set winwidth=80
line 106:     set winheight=10
line 107:   endif
line 108: endif        
line 109: 
line 110: if v:version >= 703
line 111:   set relativenumber
line 112:   set undofile
line 113:   set undodir=~/.vim/undo
line 114: endif
line 115: 
line 116: "only use the mouse for resizing windows and so on in Normal mode,
line 117: "still want to be able to select/copy/paste text through all open xterms.
line 118: if has("mouse")
line 119:   set mouse=n
line 120:   set mousemodel=popup
line 121: endif
line 122: 
line 123: if has("spell")
line 124:   setlocal spell spelllang=en_gb
Searching for "spell/en.utf-8.spl" in "/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/spell/en.utf-8.spl"
Searching for "/var/lib/vim/addons/spell/en.utf-8.spl"
Searching for "/usr/share/vim/vimfiles/spell/en.utf-8.spl"
Searching for "/usr/share/vim/vim74/spell/en.utf-8.spl"
Reading spell file "/usr/share/vim/vim74/spell/en.utf-8.spl"
Searching for "spell/en.utf-8.add.spl" in "/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/spell/en.utf-8.add.spl"
Reading spell file "/home/kguest/.vim/spell/en.utf-8.add.spl"
Searching for "/var/lib/vim/addons/spell/en.utf-8.add.spl"
Searching for "/usr/share/vim/vimfiles/spell/en.utf-8.add.spl"
Searching for "/usr/share/vim/vim74/spell/en.utf-8.add.spl"
Searching for "/usr/share/vim/vimfiles/after/spell/en.utf-8.add.spl"
Searching for "/var/lib/vim/addons/after/spell/en.utf-8.add.spl"
Searching for "/home/kguest/.vim/after/spell/en.utf-8.add.spl"
Searching for "spell/en.vim" in "/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/spell/en.vim"
Searching for "/var/lib/vim/addons/spell/en.vim"
Searching for "/usr/share/vim/vimfiles/spell/en.vim"
Searching for "/usr/share/vim/vim74/spell/en.vim"
Searching for "/usr/share/vim/vimfiles/after/spell/en.vim"
Searching for "/var/lib/vim/addons/after/spell/en.vim"
Searching for "/home/kguest/.vim/after/spell/en.vim"
not found in 'runtimepath': "spell/en.vim"
line 125:   set nospell
line 126: endif
line 127: 
line 128: if $TERM=='screen'
line 129:   exe "set title titlestring=vim:%f"
line 130:   exe "set title t_ts=\<ESC>k t_fs=\<ESC>\\"
line 131: endif
line 132: 
line 133: 
line 134: " }}}
line 135: " {{{ macros    
line 136: "macro for uppercasing some SQL built-in functions
line 137: map s :s/select/SELECT/g<CR>:s/from/FROM/g<CR>:s/where/WHERE/g<CR>
line 138: "macro for inserting current time-stamp
line 139: map T  "='['.strftime("%c").']'<CR>p
line 140: " use Q for formatting, not ex-mode:
line 141: map Q gq
line 142: " }}}
line 143: retab
line 144: " Use filetype plugins, e.g. for PHP
line 145: filetype plugin on
Searching for "filetype.vim" in "/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/filetype.vim"
chdir(/home/kguest/.vim)
fchdir() to previous dir
line 145: sourcing "/home/kguest/.vim/filetype.vim"
line 1: " Visual Basic
line 2: au BufNewFile,BufRead *.vb^I^Isetf vb
line 3: augroup filetypedetect
line 4: au BufNewFile,BufRead *.xt  setf xt
line 5: augroup END
line 6: " Taken from http://en.wikipedia.org/wiki/Wikipedia:Text_editor_support#Vim
line 7: " ^IIan Tegebo <ian.tegebo@gmail.com>
line 8: 
line 9: augroup filetypedetect
line 10: au BufNewFile,BufRead *.wiki setf Wikipedia
line 11: augroup END
line 12: 
finished sourcing /home/kguest/.vim/filetype.vim
continuing in /home/kguest/.vimrc
Searching for "/var/lib/vim/addons/filetype.vim"
Searching for "/usr/share/vim/vimfiles/filetype.vim"
Searching for "/usr/share/vim/vim74/filetype.vim"
chdir(/usr/share/vim/vim74)
fchdir() to previous dir
line 145: sourcing "/usr/share/vim/vim74/filetype.vim"
line 1: " Vim support file to detect file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2013 Aug 03
line 5: 
line 6: " Listen very carefully, I will say this only once
line 7: if exists("did_load_filetypes")
line 8:   finish
finished sourcing /usr/share/vim/vim74/filetype.vim
continuing in /home/kguest/.vimrc
Searching for "/usr/share/vim/vimfiles/after/filetype.vim"
Searching for "/var/lib/vim/addons/after/filetype.vim"
Searching for "/home/kguest/.vim/after/filetype.vim"
Searching for "ftplugin.vim" in "/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/ftplugin.vim"
Searching for "/var/lib/vim/addons/ftplugin.vim"
Searching for "/usr/share/vim/vimfiles/ftplugin.vim"
Searching for "/usr/share/vim/vim74/ftplugin.vim"
chdir(/usr/share/vim/vim74)
fchdir() to previous dir
line 145: sourcing "/usr/share/vim/vim74/ftplugin.vim"
line 1: " Vim support file to switch on loading plugins for file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last change:^I2006 Apr 30
line 5: 
line 6: if exists("did_load_ftplugin")
line 7:   finish
line 8: endif
line 9: let did_load_ftplugin = 1
line 10: 
line 11: augroup filetypeplugin
line 12:   au FileType * call s:LoadFTPlugin()
line 13: 
line 14:   func! s:LoadFTPlugin()
line 35: augroup END
finished sourcing /usr/share/vim/vim74/ftplugin.vim
continuing in /home/kguest/.vimrc
Searching for "/usr/share/vim/vimfiles/after/ftplugin.vim"
Searching for "/var/lib/vim/addons/after/ftplugin.vim"
Searching for "/home/kguest/.vim/after/ftplugin.vim"
line 146: " wordlist contains fixes for my silly tpyos. 
line 147: source ~/.vim/wordlist.vim
chdir(/home/kguest/.vim)
fchdir() to previous dir
line 147: sourcing "/home/kguest/.vim/wordlist.vim"
line 1: iab Waht What
line 2: iab creae create
line 3: iab Ameria America
line 4: iab Da The
line 5: iab UnitedStates United States
line 6: iab abbout about
line 7: iab abotu about
line 8: iab abouta about a
line 9: iab aboutit about it
line 10: iab aboutthe about the
line 11: iab abscence absence
line 12: iab accesories accessories
line 13: iab accidant accident
line 14: iab accomodate accommodate
line 15: iab accordingto according to
line 16: iab accross across
line 17: iab acheive achieve
line 18: iab acheived achieved
line 19: iab acheiving achieving
line 20: iab acn can
line 21: iab acommodate accommodate
line 22: iab acomodate accommodate
line 23: iab actualyl actually
line 24: iab additinal additional
line 25: iab addtional additional
line 26: iab adequit adequate
line 27: iab adequite adequate
line 28: iab adn and
line 29: iab advanage advantage
line 30: iab affraid afraid
line 31: iab afterthe after the
line 32: iab aganist against
line 33: iab aggresive aggressive
line 34: iab agian again
line 35: iab agreemeent agreement
line 36: iab agreemeents agreements
line 37: iab agreemnet agreement
line 38: iab agreemnets agreements
line 39: iab agressive aggressive
line 40: iab ahppen happen
line 41: iab ahve have
line 42: iab allready already
line 43: iab allwasy always
line 44: iab allwyas always
line 45: iab almots almost
line 46: iab almsot almost
line 47: iab alomst almost
line 48: iab alot a lot
line 49: iab alraedy already
line 50: iab alreayd already
line 51: iab alreday already
line 52: iab alternateives alternatives
line 53: iab alwasy always
line 54: iab alwats always
line 55: iab alway always
line 56: iab alwyas always
line 57: iab amde made
line 58: iab amke make
line 59: iab amkes makes
line 60: iab anbd and
line 61: iab andone and one
line 62: iab andteh and the
line 63: iab andthe and the
line 64: iab anothe another
line 65: iab anual annual
line 66: iab aplyed applied
line 67: iab apparant apparent
line 68: iab apparrent apparent
line 69: iab appearence appearance
line 70: iab appeares appears
line 71: iab applicaiton application
line 72: iab applicaitons applications
line 73: iab applyed applied
line 74: iab appointiment appointment
line 75: iab appraoch approach
line 76: iab approrpiate appropriate
line 77: iab approrpriate appropriate
line 78: iab aquisition acquisition
line 79: iab aquisitions acquisitions
line 80: iab arbitary arbitrary
line 81: iab arguement argument
line 82: iab arguements arguments
line 83: iab arond around
line 84: iab artical article
line 85: iab articel article
line 86: iab asdvertising advertising
line 87: iab assistent assistant
line 88: iab asterick asterisk
line 89: iab asthe as the
line 90: iab atention attention
line 91: iab atmospher atmosphere
line 92: iab attentioin attention
line 93: iab atthe at the
line 94: iab audeince audience
line 95: iab audiance audience
line 96: iab availalbe available
line 97: iab awya away
line 98: iab aywa away
line 99: iab b4 before
line 100: iab bakc back
line 101: iab balence balance
line 102: iab ballance balance
line 103: iab baout about
line 104: iab bcak back
line 105: iab beacuse because
line 106: iab becasue because
line 107: iab becaus because
line 108: iab becausea because a
line 109: iab becauseof because of
line 110: iab becausethe because the
line 111: iab becauseyou because you
line 112: iab becomeing becoming
line 113: iab becomming becoming
line 114: iab becuase because
line 115: iab becuse because
line 116: iab befoer before
line 117: iab beggining beginning
line 118: iab begining beginning
line 119: iab beginining beginning
line 120: iab beleiev believe
line 121: iab beleieve believe
line 122: iab beleif belief
line 123: iab beleive believe
line 124: iab beleived believed
line 125: iab beleives believes
line 126: iab benifit benefit
line 127: iab benifits benefits
line 128: iab betwen between
line 129: iab beutiful beautiful
line 130: iab bew new
line 131: iab boxs boxes
line 132: iab brodcast broadcast
line 133: iab bsiness business
line 134: iab busines business
line 135: iab butthe but the
line 136: iab bve be
line 137: iab caharcter character
line 138: iab calcullated calculated
line 139: iab calulated calculated
line 140: iab candidtae candidate
line 141: iab candidtaes candidates
line 142: iab cant can't
line 143: iab catagory category
line 144: iab categiory category
line 145: iab cateogry category
line 146: iab certian certain
line 147: iab challange challenge
line 148: iab challanges challenges
line 149: iab chaneg change
line 150: iab chanegs changes
line 151: iab changable changeable
line 152: iab changeing changing
line 153: iab changng changing
line 154: iab charachter character
line 155: iab charachters characters
line 156: iab charactor character
line 157: iab charaters characters
line 158: iab charecter character
line 159: iab charector character
line 160: iab cheif chief
line 161: iab chekc check
line 162: iab chnage change
line 163: iab cieling ceiling
line 164: iab circut circuit
line 165: iab claer clear
line 166: iab claered cleared
line 167: iab claerly clearly
line 168: iab cliant client
line 169: iab cna can
line 170: iab colection collection
line 171: iab comanies companies
line 172: iab comany company
line 173: iab comapnies companies
line 174: iab comapny company
line 175: iab combintation combination
line 176: iab comited committed
line 177: iab comittee committee
line 178: iab commadn command
line 179: iab comming coming
line 180: iab commitee committee
line 181: iab committe committee
line 182: iab committment commitment
line 183: iab committments commitments
line 184: iab committy committee
line 185: iab comntain contain
line 186: iab comntains contains
line 187: iab compair compare
line 188: iab compleated completed
line 189: iab compleatly completely
line 190: iab compleatness completeness
line 191: iab completly completely
line 192: iab completness completeness
line 193: iab composate composite
line 194: iab comprehesive comprehensive
line 195: iab comtain contain
line 196: iab comtains contains
line 197: iab comunicate communicate
line 198: iab comunity community
line 199: iab condolances condolences
line 200: iab conected connected
line 201: iab conferance conference
line 202: iab confirmmation confirmation
line 203: iab considerit considerate
line 204: iab considerite considerate
line 205: iab consonent consonant
line 206: iab conspiricy conspiracy
line 207: iab consultent consultant
line 208: iab convertable convertible
line 209: iab cooparate cooperate
line 210: iab cooporate cooperate
line 211: iab corproation corporation
line 212: iab corproations corporations
line 213: iab corruptable corruptible
line 214: iab cotten cotton
line 215: iab coudl could
line 216: iab couldnt couldn't
line 217: iab couldthe could the
line 218: iab cpoy copy
line 219: iab ctaegory category
line 220: iab cusotmer customer
line 221: iab cusotmers customers
line 222: iab cutsomer customer
line 223: iab cutsomers customers
line 224: iab cxan can
line 225: iab da the
line 226: iab danceing dancing
line 227: iab databsae database
line 228: iab dcument document
line 229: iab deatils details
line 230: iab decison decision
line 231: iab decisons decisions
line 232: iab defendent defendant
line 233: iab definately definitely
line 234: iab deptartment department
line 235: iab desicion decision
line 236: iab desicions decisions
line 237: iab desision decision
line 238: iab desisions decisions
line 239: iab develeoprs developers
line 240: iab devellop develop
line 241: iab develloped developed
line 242: iab develloper developer
line 243: iab devellopers developers
line 244: iab develloping developing
line 245: iab devellopment development
line 246: iab devellopments developments
line 247: iab devellops develop
line 248: iab develope develop
line 249: iab developeing developing
line 250: iab developement development
line 251: iab developements developments
line 252: iab developor developer
line 253: iab developors developers
line 254: iab develpment development
line 255: iab diaplay display
line 256: iab didint didn't
line 257: iab didnot did not
line 258: iab didnt didn't
line 259: iab difefrent different
line 260: iab diferences differences
line 261: iab differance difference
line 262: iab differances differences
line 263: iab differant different
line 264: iab differemt different
line 265: iab differnt different
line 266: iab diffrent different
line 267: iab directer director
line 268: iab directers directors
line 269: iab directiosn direction
line 270: iab disatisfied dissatisfied
line 271: iab discoverd discovered
line 272: iab disign design
line 273: iab dispaly display
line 274: iab dissonent dissonant
line 275: iab distribusion distribution
line 276: iab divsion division
line 277: iab docuement documents
line 278: iab docuemnt document
line 279: iab documetn document
line 280: iab documnet document
line 281: iab documnets documents
line 282: iab doen done
line 283: iab doese does
line 284: iab doesnt doesn't
line 285: iab doign doing
line 286: iab doimg doing
line 287: iab doind doing
line 288: iab doller dollars
line 289: iab dollers dollars
line 290: iab donig doing
line 291: iab dont don't
line 292: iab driveing driving
line 293: iab drnik drink
line 294: iab efel feel
line 295: iab effecient efficient
line 296: iab efort effort
line 297: iab eforts efforts
line 298: iab eg For example
line 299: iab ehco echo
line 300: iab ehr her
line 301: iab eligable eligible
line 302: iab embarass embarrass
line 303: iab enought enough
line 304: iab equippment equipment
line 305: iab equivalant equivalent
line 306: iab esle else
line 307: iab especally especially
line 308: iab especialyl especially
line 309: iab espesially especially
line 310: iab excange exchange
line 311: iab excellant excellent
line 312: iab excercise exercise
line 313: iab exchagne exchange
line 314: iab exchagnes exchanges
line 315: iab excitment excitement
line 316: iab exhcange exchange
line 317: iab exhcanges exchanges
line 318: iab experiance experience
line 319: iab experienc experience
line 320: iab exprience experience
line 321: iab exprienced experienced
line 322: iab eyt yet
line 323: iab faeture feature
line 324: iab faetures features
line 325: iab familair familiar
line 326: iab familar familiar
line 327: iab familliar familiar
line 328: iab fammiliar familiar
line 329: iab feild field
line 330: iab feilds fields
line 331: iab fianlly finally
line 332: iab fidn find
line 333: iab finalyl finally
line 334: iab firends friends
line 335: iab firts first
line 336: iab fn function
line 337: iab fo of
line 338: iab foa of a
line 339: iab follwo follow
line 340: iab follwoing following
line 341: iab fora for a
line 342: iab foriegn foreign
line 343: iab forthe for the
line 344: iab forwrd forward
line 345: iab forwrds forwards
line 346: iab foudn found
line 347: iab foundr founder
line 348: iab foward forward
line 349: iab fowards forwards
line 350: iab freind friend
line 351: iab freindly friendly
line 352: iab freinds friends
line 353: iab frmo from
line 354: iab fro for
line 355: iab fromthe from the
line 356: iab funciton function
line 357: iab furneral funeral
line 358: iab fwe few
line 359: iab garantee guarantee
line 360: iab gaurd guard
line 361: iab gemeral general
line 362: iab gerat great
line 363: iab geting getting
line 364: iab gettin getting
line 365: iab gievn given
line 366: iab giveing giving
line 367: iab gloabl global
line 368: iab goign going
line 369: iab gonig going
line 370: iab govenment government
line 371: iab goverment government
line 372: iab gruop group
line 373: iab gruops groups
line 374: iab grwo grow
line 375: iab guidlines guidelines
line 376: iab hadbeen had been
line 377: iab haev have
line 378: iab hapen happen
line 379: iab hapened happened
line 380: iab hapening happening
line 381: iab hapens happens
line 382: iab happend happened
line 383: iab hasbeen has been
line 384: iab hasnt hasn't
line 385: iab havebeen have been
line 386: iab haveing having
line 387: iab hda had
line 388: iab hearign hearing
line 389: iab helpfull helpful
line 390: iab herat heart
line 391: iab hesaid he said
line 392: iab hewas he was
line 393: iab hge he
line 394: iab hismelf himself
line 395: iab hlep help
line 396: iab homedirectory home directory
line 397: iab hsa has
line 398: iab hsi his
line 399: iab hte the
line 400: iab htere there
line 401: iab htese these
line 402: iab htey they
line 403: iab hting thing
line 404: iab htink think
line 405: iab htis this
line 406: iab httpL http:
line 407: iab hvae have
line 408: iab hvaing having
line 409: iab hwich which
line 410: iab idae idea
line 411: iab idaes ideas
line 412: iab identofy identify
line 413: iab ihs his
line 414: iab imediate immediate
line 415: iab imediatly immediately
line 416: iab immediatly immediately
line 417: iab importent important
line 418: iab importnat important
line 419: iab impossable impossible
line 420: iab improvemnt improvement
line 421: iab improvment improvement
line 422: iab incase in case
line 423: iab includ include
line 424: iab indecate indicate
line 425: iab indenpendence independence
line 426: iab indenpendent independent
line 427: iab indepedent independent
line 428: iab independance independence
line 429: iab independant independent
line 430: iab independantly independently
line 431: iab influance influence
line 432: iab infomation information
line 433: iab informatoin information
line 434: iab inital initial
line 435: iab inport import
line 436: iab instaleld installed
line 437: iab insted instead
line 438: iab insted intead
line 439: iab insurence insurance
line 440: iab inteh in the
line 441: iab interum interim
line 442: iab inthe in the
line 443: iab inwhich in which
line 444: iab ireland Ireland
line 445: iab isthe is the
line 446: iab itis it is
line 447: iab ititial initial
line 448: iab itnerest interest
line 449: iab itnerested interested
line 450: iab itneresting interesting
line 451: iab itnerests interests
line 452: iab itwas it was
line 453: iab iused used
line 454: iab iwll will
line 455: iab iwth with
line 456: iab javascript JavaScript
line 457: iab jsut just
line 458: iab jugment judgment
line 459: iab knowldge knowledge
line 460: iab knowlege knowledge
line 461: iab knwo know
line 462: iab knwon known
line 463: iab knwos knows
line 464: iab konw know
line 465: iab konwn known
line 466: iab konws knows
line 467: iab labratory laboratory
line 468: iab lastyear last year
line 469: iab learnign learning
line 470: iab lenght length
line 471: iab levle level
line 472: iab libary library
line 473: iab librarry library
line 474: iab librery library
line 475: iab liek like
line 476: iab liekd liked
line 477: iab lieutenent lieutenant
line 478: iab liev live
line 479: iab likly likely
line 480: iab lisense license
line 481: iab littel little
line 482: iab litttle little
line 483: iab liuke like
line 484: iab liveing living
line 485: iab loev love
line 486: iab lonly lonely
line 487: iab lookign looking
line 488: iab lsit list
line 489: iab machted matched
line 490: iab macthed matched
line 491: iab maintenence maintenance
line 492: iab mainting maintaining
line 493: iab makeing making
line 494: iab managment management
line 495: iab mantain maintain
line 496: iab marraige marriage
line 497: iab memeber member
line 498: iab merchent merchant
line 499: iab mesage message
line 500: iab mesages messages
line 501: iab metacharacters meta-characters
line 502: iab mispell misspell
line 503: iab mispelling misspelling
line 504: iab mispellings misspellings
line 505: iab mkae make
line 506: iab mkaes makes
line 507: iab mkaing making
line 508: iab moeny money
line 509: iab morgage mortgage
line 510: iab mroe more
line 511: iab mysefl myself
line 512: iab myu my
line 513: iab necassarily necessarily
line 514: iab necassary necessary
line 515: iab neccessarily necessarily
line 516: iab neccessary necessary
line 517: iab necesarily necessarily
line 518: iab necesary necessary
line 519: iab negotiaing negotiating
line 520: iab nkow know
line 521: iab nolonger no longer
line 522: iab nothign nothing
line 523: iab nver never
line 524: iab nwe new
line 525: iab nwo now
line 526: iab obediant obedient
line 527: iab ocasion occasion
line 528: iab occassion occasion
line 529: iab occured occurred
line 530: iab occurence occurrence
line 531: iab occurrance occurrence
line 532: iab ocur occur
line 533: iab oeprator operator
line 534: iab ofa of a
line 535: iab ofits of its
line 536: iab ofthe of the
line 537: iab oging going
line 538: iab ohter other
line 539: iab omre more
line 540: iab oneof one of
line 541: iab onepoint one point
line 542: iab onthe on the
line 543: iab onyl only
line 544: iab opeing opening
line 545: iab oppasite opposite
line 546: iab opperation operation
line 547: iab oppertunity opportunity
line 548: iab opposate opposite
line 549: iab opposible opposable
line 550: iab opposit opposite
line 551: iab oppotunities opportunities
line 552: iab oppotunity opportunity
line 553: iab optoin option
line 554: iab optoins options
line 555: iab orginization organization
line 556: iab orginized organized
line 557: iab otehr other
line 558: iab otu out
line 559: iab outof out of
line 560: iab overthe over the
line 561: iab owrk work
line 562: iab owuld would
line 563: iab oxident oxidant
line 564: iab papaer paper
line 565: iab parliment parliament
line 566: iab partof part of
line 567: iab paymetn payment
line 568: iab paymetns payments
line 569: iab pciture picture
line 570: iab peice piece
line 571: iab peices pieces
line 572: iab peolpe people
line 573: iab peopel people
line 574: iab percentof percent of
line 575: iab percentto percent to
line 576: iab performence performance
line 577: iab perhasp perhaps
line 578: iab perhpas perhaps
line 579: iab permanant permanent
line 580: iab perminent permanent
line 581: iab personalyl personally
line 582: iab placeholder place-holder
line 583: iab pleasent pleasant
line 584: iab poeple people
line 585: iab porblem problem
line 586: iab porblems problems
line 587: iab porvide provide
line 588: iab possable possible
line 589: iab possbile possible
line 590: iab postition position
line 591: iab potentialy potentially
line 592: iab pregnent pregnant
line 593: iab presance presence
line 594: iab proactive pro-active
line 595: iab probelm problem
line 596: iab probelms problems
line 597: iab prominant prominent
line 598: iab protoge protege
line 599: iab psoition position
line 600: iab ptogress progress
line 601: iab puting putting
line 602: iab pwoer power
line 603: iab quater quarter
line 604: iab quaters quarters
line 605: iab quesion question
line 606: iab quesions questions
line 607: iab questioms questions
line 608: iab questiosn questions
line 609: iab questoin question
line 610: iab quetion question
line 611: iab quetions questions
line 612: iab realyl really
line 613: iab reccomend recommend
line 614: iab reccommend recommend
line 615: iab receieve receive
line 616: iab recieve receive
line 617: iab recieved received
line 618: iab recieving receiving
line 619: iab recken reockon
line 620: iab recomend recommend
line 621: iab recomendation recommendation
line 622: iab recomendations recommendations
line 623: iab recomended recommended
line 624: iab reconize recognize
line 625: iab recrod record
line 626: iab religous religious
line 627: iab reluctent reluctant
line 628: iab remeber remember
line 629: iab reommend recommend
line 630: iab representativs representatives
line 631: iab representives representatives
line 632: iab represetned represented
line 633: iab represnt represent
line 634: iab reserach research
line 635: iab resollution resolution
line 636: iab resorces resources
line 637: iab respomd respond
line 638: iab respomse response
line 639: iab responce response
line 640: iab responsability responsibility
line 641: iab responsable responsible
line 642: iab responsibile responsible
line 643: iab responsiblity responsibility
line 644: iab restaraunt restaurant
line 645: iab restuarant restaurant
line 646: iab reult result
line 647: iab reveiw review
line 648: iab reveiwing reviewing
line 649: iab rumers rumors
line 650: iab rwite write
line 651: iab rythm rhythm
line 652: iab saidhe said he
line 653: iab saidit said it
line 654: iab saidthat said that
line 655: iab saidthe said the
line 656: iab scedule schedule
line 657: iab sceduled scheduled
line 658: iab secratary secretary
line 659: iab sectino section
line 660: iab sefl self
line 661: iab seh she
line 662: iab selectoin selection
line 663: iab sentance sentence
line 664: iab separeate separate
line 665: iab seperate separate
line 666: iab sercumstances circumstances
line 667: iab shcool school
line 668: iab shesaid she said
line 669: iab shineing shining
line 670: iab shiped shipped
line 671: iab shoudl should
line 672: iab shouldent shouldn't
line 673: iab shouldnt shouldn't
line 674: iab showinf showing
line 675: iab signifacnt significant
line 676: iab simalar similar
line 677: iab similiar similar
line 678: iab simpyl simply
line 679: iab sincerly sincerely
line 680: iab sitll still
line 681: iab smae same
line 682: iab smoe some
line 683: iab soem some
line 684: iab sohw show
line 685: iab soical social
line 686: iab somethign something
line 687: iab someting something
line 688: iab somewaht somewhat
line 689: iab somthing something
line 690: iab somtimes sometimes
line 691: iab sot spot
line 692: iab soudn sound
line 693: iab soudns sounds
line 694: iab speach speech
line 695: iab specificaly specifically
line 696: iab specificalyl specifically
line 697: iab statment statement
line 698: iab statments statements
line 699: iab stnad stand
line 700: iab stopry story
line 701: iab stoyr story
line 702: iab stpo stop
line 703: iab strentgh strength
line 704: iab stroy story
line 705: iab struggel struggle
line 706: iab strugle struggle
line 707: iab studnet student
line 708: iab successfull successful
line 709: iab successfuly successfully
line 710: iab successfulyl successfully
line 711: iab sucess success
line 712: iab sucessfull successful
line 713: iab sufficiant sufficient
line 714: iab supose suppose
line 715: iab suposed supposed
line 716: iab suppossed supposed
line 717: iab suprise surprise
line 718: iab suprise surprise
line 719: iab suprised surprised
line 720: iab swiming swimming
line 721: iab tahn than
line 722: iab taht that
line 723: iab talekd talked
line 724: iab talkign talking
line 725: iab tath that
line 726: iab tecnical technical
line 727: iab teh the
line 728: iab tehy they
line 729: iab termoil turmoil
line 730: iab tghe the
line 731: iab tghis this
line 732: iab th the
line 733: iab thansk thanks
line 734: iab thats that's
line 735: iab thatthe that the
line 736: iab thecompany the company
line 737: iab thefirst the first
line 738: iab thegovernment the government
line 739: iab themself themselves
line 740: iab themselfs themselves
line 741: iab thenew the new
line 742: iab theri their
line 743: iab thesame the same
line 744: iab thetwo the two
line 745: iab theyll they'll
line 746: iab theyve they've
line 747: iab thgat that
line 748: iab thge the
line 749: iab thier their
line 750: iab thigsn things
line 751: iab thisyear this year
line 752: iab thme them
line 753: iab thna than
line 754: iab thna than 
line 755: iab thne then
line 756: iab thnig thing
line 757: iab thnigs things
line 758: iab thoough though
line 759: iab threatend threatened
line 760: iab thsi this
line 761: iab thsoe those
line 762: iab tht that
line 763: iab thta that
line 764: iab tiem time
line 765: iab tihs this
line 766: iab timestamp time-stamp
line 767: iab timne time
line 768: iab tiogether together
line 769: iab tje the
line 770: iab tjhe the
line 771: iab tkae take
line 772: iab tkaes takes
line 773: iab tkaing taking
line 774: iab tlaking talking
line 775: iab todya today
line 776: iab togehter together
line 777: iab tomorow tomorrow
line 778: iab tongiht tonight
line 779: iab tonihgt tonight
line 780: iab totaly totally
line 781: iab totalyl totally
line 782: iab tothe to the
line 783: iab totla total
line 784: iab towrad toward
line 785: iab tpye type
line 786: iab traditionalyl traditionally
line 787: iab transfered transferred
line 788: iab truely truly
line 789: iab truley truly
line 790: iab tryed tried
line 791: iab tthe the
line 792: iab tyhat that
line 793: iab tyhe the
line 794: iab udnerstand understand
line 795: iab understnad understand
line 796: iab unliek unlike
line 797: iab unpleasently unpleasantly
line 798: iab untilll until
line 799: iab useing using
line 800: iab usualyl usually
line 801: iab valeu value
line 802: iab veyr very
line 803: iab virtualyl virtually
line 804: iab vlaue value
line 805: iab vrey very
line 806: iab vulnerible vulnerable
line 807: iab waht what
line 808: iab warrent warrant
line 809: iab wasnt wasn't
line 810: iab watn want
line 811: iab wehn when
line 812: iab werre were
line 813: iab wether whether
line 814: iab whats what's
line 815: iab whcih which
line 816: iab wherre where
line 817: iab whic which
line 818: iab whihc which
line 819: iab whta what
line 820: iab whta what 
line 821: iab wief wife
line 822: iab wierd weird
line 823: iab wihch which
line 824: iab wiht with
line 825: iab wildcard wild-card
line 826: iab willbe will be
line 827: iab windoes windows
line 828: iab witha with a
line 829: iab withe with
line 830: iab withthe with the
line 831: iab wiull will
line 832: iab wnat want
line 833: iab wnated wanted
line 834: iab wnats wants
line 835: iab woh who
line 836: iab wohle whole
line 837: iab wokr work
line 838: iab woudl would
line 839: iab wouldbe would be
line 840: iab wouldnt wouldn't
line 841: iab wriet write
line 842: iab writeable writable
line 843: iab writting writing
line 844: iab wrod word
line 845: iab wroet wrote
line 846: iab wroking working
line 847: iab wtih with
line 848: iab wuould would
line 849: iab wya way
line 850: iab xmlrpc XMLRPC
line 851: iab yera year
line 852: iab yeras years
line 853: iab yersa years
line 854: iab yoiu you
line 855: iab youare you are
line 856: iab youve you've
line 857: iab ytou you
line 858: iab yuo you
line 859: iab yuor your
finished sourcing /home/kguest/.vim/wordlist.vim
continuing in /home/kguest/.vimrc
line 148: " Insert mode completion options
line 149: set completeopt=menu,longest,preview
line 150: " use CTRL-F for omni completion
line 151: imap <C-F> ^X^O
line 152: " Helpful window navigation {{{
line 153: " moves up and down between windows and maximises the focused window.
line 154: map <C-J> <C-W>j<C-W>_
line 155: map <C-K> <C-W>k<C-W>_
line 156: " }}}
line 157: 
line 158: "have to toggle syntax for it to use the right colors after changing the
line 159: "background value
line 160: if has("syntax")
line 161:   "syntax off
line 162:   if v:progname =~ "vim.exe"
line 163:     set background=light
line 164:     color darkblue
line 165:   elseif v:progname =~ "gvim"  
line 166:     set background=dark
line 167:     color darkblue
line 168:   else
line 169:     set background=dark
Searching for "syntax/syncolor.vim" in "/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim74/syntax/syncolor.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 169: sourcing "/usr/share/vim/vim74/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim74/syntax/syncolor.vim
continuing in /home/kguest/.vimrc
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/kguest/.vim/after/syntax/syncolor.vim"
line 170:   endif  
line 171:   syntax on
line 171: so $VIMRUNTIME/syntax/syntax.vim
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 171: sourcing "/usr/share/vim/vim74/syntax/syntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 04
line 4: 
line 5: " This file is used for ":syntax on".
line 6: " It installs the autocommands and starts highlighting for all buffers.
line 7: 
line 8: if !has("syntax")
line 9:   finish
line 10: endif
line 11: 
line 12: " If Syntax highlighting appears to be on already, turn it off first, so that
line 13: " any leftovers are cleared.
line 14: if exists("syntax_on") || exists("syntax_manual")
line 15:   so <sfile>:p:h/nosyntax.vim
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 15: sourcing "/usr/share/vim/vim74/syntax/nosyntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2006 Apr 16
line 4: 
line 5: " This file is used for ":syntax off".
line 6: " It removes the autocommands and stops highlighting for all buffers.
line 7: 
line 8: if !has("syntax")
line 9:   finish
line 10: endif
line 11: 
line 12: " Remove all autocommands for the Syntax event.  This also avoids that
line 13: " "syntax=foo" in a modeline triggers the SynSet() function of synload.vim.
line 14: au! Syntax
line 15: 
line 16: " remove all syntax autocommands and remove the syntax for each buffer
line 17: augroup syntaxset
line 18:   au!
line 19:   au BufEnter * syn clear
line 20:   au BufEnter * if exists("b:current_syntax") | unlet b:current_syntax | endif
line 21:   doautoall syntaxset BufEnter *
line 22:   au!
line 23: augroup END
line 24: 
line 25: if exists("syntax_on")
line 26:   unlet syntax_on
line 27: endif
line 28: if exists("syntax_manual")
line 29:   unlet syntax_manual
line 30: endif
finished sourcing /usr/share/vim/vim74/syntax/nosyntax.vim
continuing in /usr/share/vim/vim74/syntax/syntax.vim
line 16: endif
line 17: 
line 18: " Load the Syntax autocommands and set the default methods for highlighting.
line 19: runtime syntax/synload.vim
Searching for "syntax/synload.vim" in "/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/syntax/synload.vim"
Searching for "/var/lib/vim/addons/syntax/synload.vim"
Searching for "/usr/share/vim/vimfiles/syntax/synload.vim"
Searching for "/usr/share/vim/vim74/syntax/synload.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 19: sourcing "/usr/share/vim/vim74/syntax/synload.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2012 Sep 25
line 4: 
line 5: " This file sets up for syntax highlighting.
line 6: " It is loaded from "syntax.vim" and "manual.vim".
line 7: " 1. Set the default highlight groups.
line 8: " 2. Install Syntax autocommands for all the available syntax files.
line 9: 
line 10: if !has("syntax")
line 11:   finish
line 12: endif
line 13: 
line 14: " let others know that syntax has been switched on
line 15: let syntax_on = 1
line 16: 
line 17: " Set the default highlighting colors.  Use a color scheme if specified.
line 18: if exists("colors_name")
line 19:   exe "colors " . colors_name
line 20: else
line 21:   runtime! syntax/syncolor.vim
Searching for "syntax/syncolor.vim" in "/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim74/syntax/syncolor.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 21: sourcing "/usr/share/vim/vim74/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim74/syntax/syncolor.vim
continuing in /usr/share/vim/vim74/syntax/synload.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/kguest/.vim/after/syntax/syncolor.vim"
line 22: endif
line 23: 
line 24: " Line continuation is used here, remove 'C' from 'cpoptions'
line 25: let s:cpo_save = &cpo
line 26: set cpo&vim
line 27: 
line 28: " First remove all old syntax autocommands.
line 29: au! Syntax
line 30: 
line 31: au Syntax *^I^Icall s:SynSet()
line 32: 
line 33: fun! s:SynSet()
line 61: 
line 62: 
line 63: " Handle adding doxygen to other languages (C, C++, C#, IDL)
line 68: au Syntax c,cpp,cs,idl,php if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif
line 69: 
line 70: 
line 71: " Source the user-specified syntax highlighting file
line 72: if exists("mysyntaxfile") && filereadable(expand(mysyntaxfile))
line 73:   execute "source " . mysyntaxfile
line 74: endif
line 75: 
line 76: " Restore 'cpoptions'
line 77: let &cpo = s:cpo_save
line 78: unlet s:cpo_save
finished sourcing /usr/share/vim/vim74/syntax/synload.vim
continuing in /usr/share/vim/vim74/syntax/syntax.vim
line 20: 
line 21: " Load the FileType autocommands if not done yet.
line 22: if exists("did_load_filetypes")
line 23:   let s:did_ft = 1
line 24: else
line 25:   filetype on
line 26:   let s:did_ft = 0
line 27: endif
line 28: 
line 29: " Set up the connection between FileType and Syntax autocommands.
line 30: " This makes the syntax automatically set when the file type is detected.
line 31: augroup syntaxset
line 32:   au! FileType *^Iexe "set syntax=" . expand("<amatch>")
line 33: augroup END
line 34: 
line 35: 
line 36: " Execute the syntax autocommands for the each buffer.
line 37: " If the filetype wasn't detected yet, do that now.
line 38: " Always do the syntaxset autocommands, for buffers where the 'filetype'
line 39: " already was set manually (e.g., help buffers).
line 40: doautoall syntaxset FileType
line 41: if !s:did_ft
line 42:   doautoall filetypedetect BufRead
line 43: endif
finished sourcing /usr/share/vim/vim74/syntax/syntax.vim
continuing in /home/kguest/.vimrc
line 172: endif
line 173: if &bg == "dark"
line 174:   highlight Comment ctermfg=darkgreen
line 175:   highlight MatchParen ctermbg=blue guibg=blue
line 176:   highlight StatusLine ctermfg=white ctermbg=blue cterm=bold
line 177:   highlight StatusLineNC ctermfg=lightgray ctermbg=black
line 178: endif
line 179: 
line 180: set pastetoggle=<F2>
line 181: 
line 182: if has("autocmd")
line 183:   if v:progname =~ "vim$"
line 184:     au BufEnter * let &titlestring = $USER . "@" . hostname() . ":$vim %-0.65F"
line 185:     if version >= 600
line 187:         au BufEnter * let &printheader = $USER . "@" . hostname() .  ": %-0.65F%=Page %N"
line 188:     endif
line 189:   endif
line 190: 
line 191:   au BufWrite * call SetStatusLine()
line 192:   au BufRead * call SetStatusLine()
line 193: 
line 194:   au BufEnter *     set title titlelen=79
line 195: "  cron on FreeBSD doesn't like backups being made.
line 196:   au BufEnter       crontab.*     set nobackup
line 197:   au BufEnter       crontab.*     set nowritebackup
line 198:   au BufNewFile,BufRead sql*     set filetype=sql
line 199:   au BufNewFile,BufRead *.phpt    set filetype=php
line 200:   au BufNewFile,BufRead *.py      set expandtab
line 201:   au BufNewFile,BufRead *.py      set comments=:# 
line 202:   au BufNewFile,BufRead *.py      source ~/.vim/python.vim
line 203:   au BufNewFile,BufRead *.mail    set syntax=mail
line 204:   au BufNewFile,BufRead *.vim     set foldmethod=marker 
line 205:   au BufNewFile,BufRead *.vim     set nospell
line 206:     " Treat .json files as .js
line 207:   au BufNewFile,BufRead *.json setfiletype json syntax=javascript
line 208:   au BufNewFile ~/.vim/skeletons/*.suffix TSkeletonSetup othertemplate.suffix
line 209:   au BufNewFile *.suffix       TSkeletonSetup template.suffix
line 210: 
line 211:   " Automatically chmod +x Shell and Perl scripts
line 212:   au BufWritePost   *.sh             !chmod +x %
line 213:   au BufWritePost   *.pl             !chmod +x %
line 214: 
line 215:   " Transparent editing of gpg encrypted files.
line 216:   " By Wouter Hanegraaff <wouter@blub.net>
line 217:   augroup encrypted
line 218:   au!
line 219: 
line 220:   " First make sure nothing is written to ~/.viminfo while editing
line 221:   " an encrypted file.
line 222:   autocmd BufReadPre,FileReadPre      *.gpg set viminfo=
line 223:   " We don't want a swap file, as it writes unencrypted data to disk
line 224:   autocmd BufReadPre,FileReadPre      *.gpg set noswapfile
line 225:   " Switch to binary mode to read the encrypted file
line 226:   autocmd BufReadPre,FileReadPre      *.gpg set bin
line 227:   autocmd BufReadPre,FileReadPre      *.gpg let ch_save = &ch|set ch=2
line 228:   autocmd BufReadPre,FileReadPre      *.gpg let shsave=&sh
line 229:   autocmd BufReadPre,FileReadPre      *.gpg let &sh='sh'
line 230:   autocmd BufReadPre,FileReadPre      *.gpg let ch_save = &ch|set ch=2
line 231:   autocmd BufReadPost,FileReadPost    *.gpg '[,']!gpg --decrypt --default-recipient-self 2> /dev/null
line 232:   autocmd BufReadPost,FileReadPost    *.gpg let &sh=shsave
line 233: 
line 234:   " Switch to normal mode for editing
line 235:   autocmd BufReadPost,FileReadPost    *.gpg set nobin
line 236:   autocmd BufReadPost,FileReadPost    *.gpg let &ch = ch_save|unlet ch_save
line 237:   autocmd BufReadPost,FileReadPost    *.gpg execute ":doautocmd BufReadPost " . expand("%:r")
line 238: 
line 239:   " Convert all text to encrypted text before writing
line 240:   autocmd BufWritePre,FileWritePre    *.gpg set bin
line 241:   autocmd BufWritePre,FileWritePre    *.gpg let shsave=&sh
line 242:   autocmd BufWritePre,FileWritePre    *.gpg let &sh='sh'
line 243:   autocmd BufWritePre,FileWritePre    *.gpg '[,']!gpg --encrypt --default-recipient-self 2>/dev/null
line 244:   autocmd BufWritePre,FileWritePre    *.gpg let &sh=shsave
line 245: 
line 246:   " Undo the encryption so we are back in the normal text, directly
line 247:   " after the file has been written.
line 248:   autocmd BufWritePost,FileWritePost  *.gpg silent u
line 249:   autocmd BufWritePost,FileWritePost  *.gpg set nobin
line 250:   augroup END
line 251: 
line 252: endif
line 253: "{{{ <home> toggles between start of line and start of text
line 254: "<home> toggles between start of line and start of text
line 255: imap <khome> <home>
line 256: nmap <khome> <home>
line 257: inoremap <silent> <home> <C-O>:call Home()<CR>
line 258: nnoremap <silent> <home> :call Home()<CR>
line 259: function Home()
line 267: "}}}
line 268: "{{{<end> goes to end of screen before end of line
line 269: imap <kend> <end>
line 270: nmap <kend> <end>
line 271: inoremap <silent> <end> <C-O>:call End()<CR>
line 272: nnoremap <silent> <end> :call End()<CR>
line 273: function End()
line 288: 
line 289: "}}}
line 290: "make F10 call make for linting etc.
line 291: inoremap <silent> <F10> <C-O>:make<CR>
line 292: map <silent> <F10> :make<CR>
line 293: "F5 toggles spell check
line 294: inoremap <silent> <F5> <C-O>:call SpellToggle()<CR>
line 295: map <silent> <F5> :call SpellToggle()<CR>
line 296: function SpellToggle()
line 303: 
line 304: " {{{  GenUtils
line 305: "genutils is dependant on multvals so the order they are loaded in is important
line 306: source $HOME/.vim/scripts/multvals.vim
chdir(/home/kguest/.vim/scripts)
fchdir() to previous dir
line 306: sourcing "/home/kguest/.vim/scripts/multvals.vim"
line 1: " multvals.vim -- Array operations on Vim multi-values, or just another array.
line 2: " Author: Hari Krishna Dara (hari_vim at yahoo dot com)
line 3: " Last Modified: 26-Oct-2004 @ 19:03
line 4: " Requires: Vim-6.0, genutils.vim(1.2) for sorting support.
line 5: " Version: 3.10.0
line 6: " Acknowledgements:
line 7: "   - MvRemoveElementAll was contributed by Steve Hall
line 8: "     "digitect at mindspring dot com"
line 9: "   - Misc. contributions of script or ideas by
line 10: "     - Naveen Chandra (Naveen dot Chandra at Sun dot COM)
line 11: "     - Thomas Link (t dot link02a at gmx dot net)
line 12: " Licence: This program is free software; you can redistribute it and/or
line 13: "          modify it under the terms of the GNU General Public License.
line 14: "          See http://www.gnu.org/copyleft/gpl.txt 
line 15: " Download From:
line 16: "     http://www.vim.org/script.php?script_id=171
line 17: " Summary Of Features:
line 18: "     The types in prototypes of the functions mimic Java.
line 19: "   Writer Functions:
line 20: "     All the writer functions return the new array after modifications. 
line 21: "       String MvAddElement(String array, String sep, String ele, ...)
line 22: "       String MvInsertElementAt(String array, String sep, String ele, int ind, ...)
line 23: "       String MvRemoveElement(String array, String sep, String ele, ...)
line 24: "       String MvRemovePattern(String array, String sep, String pat, ...)
line 25: "       String MvRemoveElementAt(String array, String sep, int ind, ...)
line 26: "       String MvRemoveElementAll(String array, String sep, String ele, ...)
line 27: "       String MvRemovePatternAll(String array, String sep, String pat, ...)
line 28: "       String MvReplaceElementAt(String array, String sep, String ele, int ind, ...)
line 29: "       String MvPushToFront(String array, String sep, String ele, ...)
line 30: "       String MvPushToFrontElementAt(String array, String sep, int ind, ...)
line 31: "       String MvPullToBack(String array, String sep, String ele, ...)
line 32: "       String MvPullToBackElementAt(String array, String sep, int ind, ...)
line 33: "       String MvRotateLeftAt(String array, String sep, int ind, ...)
line 34: "       String MvRotateRightAt(String array, String sep, int ind, ...)
line 35: "       String MvSwapElementsAt(String array, String sep, int ind1, int ind2,
line 36: "       ...)
line 37: "       String MvQSortElements(String array, String sep, String cmp, int dir, ...)
line 38: "       String MvBISortElements(String array, String sep, String cmp, int dir, ...)
line 39: "
line 40: "   Reader Functions:
line 41: "       int     MvNumberOfElements(String array, String sep, ...)
line 42: "       int     MvStrIndexOfElement(String array, String sep, String ele, ...)
line 43: "       int     MvStrIndexOfPattern(String array, String sep, String pat, ...)
line 44: "       int     MvStrIndexAfterElement(String array, String sep, String ele, ...)
line 45: "       int     MvStrIndexAfterPattern(String array, String sep, String pat, ...)
line 46: "       int     MvStrIndexOfElementAt(String array, String sep, int ind, ...)
line 47: "       int     MvIndexOfElement(String array, String sep, int ind, ...)
line 48: "       int     MvIndexOfPattern(String array, String sep, String pat, ...)
line 49: "       boolean MvContainsElement(String array, String sep, String ele, ...)
line 50: "       boolean MvContainsPattern(String array, String sep, String pat, ...)
line 51: "       String  MvElementAt(String array, String sep, int ind, ...)
line 52: "       String  MvElementLike(String array, String sep, String pat, ...)
line 53: "       String  MvLastElement(String array, String sep, ...)
line 54: "       void    MvIterCreate(String array, String sep, Sring iterName, ...)
line 55: "       void    MvIterDestroy(String iterName)
line 56: "       boolean MvIterHasNext(String iterName)
line 57: "       String  MvIterNext(String iterName)
line 58: "       String  MvIterPeek(String iterName)
line 59: "       int     MvCmpByPosition(String array, String sep, String ele, String
line 60: "                               ele2, int dir, ...)
line 61: "       String  MvPromptForElement(String array, String sep, String def,
line 62: "                                  String prompt, String skip, int useDialog, ...)
line 63: "       String  MvPromptForElement2(String array, String sep, String def,
line 64: "                                  String prompt, String skip, int useDialog,
line 65: "                                  int nCols, ...)
line 66: "       int     MvGetSelectedIndex()
line 67: "       String  MvNumSearchNext(String array, String sep, String ele, int dir, ...)
line 68: "
line 69: "   Utility Functions:
line 70: "     This function creates a pattern that avoids protected comma's from
line 71: "     getting treated as separators. The argument goes directly into the []
line 72: "     atom, so make sure you pass in a valid string.
line 73: "       String  MvCrUnProtectedCharsPattern(String sepChars)
line 74: "
line 75: " Usage:
line 76: "   - An array is nothing but a string of multiple values separated by a
line 77: "     pattern.  The simplest example being Vim's multi-value variables such as
line 78: "     tags. You can use the MvAddElement() function to create an array.
line 79: "     However, there is nothing special about this function, you can as well
line 80: "     make up the string by simply concatinating elements with the chosen
line 81: "     pattern as a separator.
line 82: "   - The separator can be any regular expression (which means that if you
line 83: "     want to use regex metacharacters in a non-regex pattern, then you need
line 84: "     to protect the metacharacters with backslashes). However, if a regular
line 85: "     expression is used as a separtor, you need to pass in a second separator,
line 86: "     which is a plain string that guarantees to match the separator regular
line 87: "     expression, as an additional argument (which was not the case with
line 88: "     earlier versions). When the array needs to be modified (which is
line 89: "     internally done by some of the reader functions also) this sample
line 90: "     separator is used to preserve the integrity of the array.
line 91: "   - If you for example want to go over the words in a sentence, then an easy
line 92: "     way would be to treat the sentence as an array with '\s\+' as a
line 93: "     separator pattern. Be sure not to have zero-width expressions in the
line 94: "     pattern as these could confuse the plugin.
line 95: "   - Suggested usage to go over the elements is to use the iterater functions
line 96: "     as shows in the below example
line 97: "     Ex Usage:
line 98: "       call MvIterCreate(&tags, MvCrUnProtectedCharsPattern(','), 'Tags', ',')
line 99: "       while MvIterHasNext('Tags')
line 100: "         call input('Next element: ' . MvIterNext('Tags'))
line 101: "       endwhile
line 102: "       call MvIterDestroy('Tags')
line 103: "
line 104: "   ALMOST ALL OPERATIONS TAKE THE ARRAY AND THE SEPARATOR AS THE FIRST TWO
line 105: "     ARGUMENTS.
line 106: "   All element-indexes start from 0 (like in C++ or Java).
line 107: "   All string-indexes start from 0 (as it is for Vim built-in functions).
line 108: "
line 109: " Changes in 3.10:
line 110: "   - New function MvBISortElements.
line 111: " Changes in 3.9:
line 112: "   - The MvIterPeek function was marked script local, I guess a typo.
line 113: " Changes in 3.8:
line 114: "   - Fixed bugs in the *StrIndex* functions, such that when the element is
line 115: "     not found, they always return the contracted -1 (instead of any -ve
line 116: "     value). This will fix problems with a number of other functions that
line 117: "     depend on them (such as MvPushToFront reported by Thomas Link).
line 118: " Changes in 3.6:
line 119: "   - Changed MvNumberOfElements() to use "\r" as the temporary replacement
line 120: "     character instead of "x" which was more likely to occur at the end of
line 121: "     the array. The "\r" character rarely appears in Vim strings (they are
line 122: "     always stripped off while copying from the buffer).
line 123: "   - A new utility function MvCrUnProtectedCharsPattern().
line 124: " Changes in 3.5:
line 125: "   CAUTION: This version potentially introduces an incompatibility with that
line 126: "   of older versions because of the below change. If your plugin depended on
line 127: "   this undocumented behavior you will have to update your plugin immediately
line 128: "   to work with the new plugin. Even if you didn't know about behavior, it is
line 129: "   still better to check if your plugin accidentally depended on this.
line 130: "   - Now the plugin ignores the 'ignorecase' and 'smartcase' settings, so the
line 131: "     results are more consistent. This I think is the right thing to do for a
line 132: "     library.
line 133: "   - New function MvIterPeek.
line 134: " Changes in 3.4:
line 135: "   - The plugin was not working correctly when there are *'s in the array.
line 136: "   - New function MvRemovePatternAll
line 137: "   - g:loaded_multvals now contains the version number for dependency cheking
line 138: "     (see ":help v:version" for format)
line 139: "   - Added prototypes for the functions in the header as per the suggestion
line 140: "     of Naveen Chandra.
line 141: " Changes in 3.3:
line 142: "   - New functions MvRemoveElementAll, MvElementLike, MvGetSelectedIndex
line 143: " Changes in 3.2:
line 144: "   - New function MvNumSearchNext. 
line 145: " Changes in 3.0:
line 146: "   - All functions can now be used with regular expressions as patterns.
line 147: "   - There is an API change. All functions now require a sample regular
line 148: "     separator to be passed in when using a regular expression as a separator
line 149: "     string. There is no impact if you don't use regular expressions as
line 150: "     separators.
line 151: "   - Some of the functions now have a variant that take a regex pattern
line 152: "     instead of an existing element.
line 153: "   - Fixed a bug in MvPromptForElement that was introduced in the previous
line 154: "     change, that sometimes ignores the last line in the prompt string.
line 155: " Changes in 2.3:
line 156: "   - A variant of MvPromptForElement to specify the number of columns that
line 157: "     you want the elements to be formatted in.
line 158: "   - New functions MvQSortElements() and MvSwapElementsAt() 
line 159: "   - Worked-around a bug in vim that effects MvElementAt() for last element
line 160: "     in a large array.
line 161: " Changes in 2.1.1:
line 162: "   - Now all the operations work correctly with elements that have special
line 163: "     chars in them.
line 164: " Changes in 2.1.0:
line 165: "   - Improved the read-only operations to work with regular expressions as
line 166: "     patterns.
line 167: " Changes in 2.0.3:
line 168: "   - Fixed bugs in MvStrIndexOfElement(), MvIterHasNext() and MvCmpByPosition()
line 169: " Changes in 2.0.3:
line 170: "   - New functions were added.
line 171: "   - The order of arguments for MvIterCreate has been changed for the sake of
line 172: "       consistency.
line 173: "   - Prefixed all the global functions with "Mv" to avoid global name
line 174: "       conflicts.
line 175: "
line 176: " TODO:
line 177: "   - Add a utility function to strip the last separator out (Thomas Link).
line 178: "   - Why is MvElementAt('a\|b\\|c|d', '\\\@<!\%(\\\\\)*|', <index>, '|') not
line 179: "     working as expected (MvNumberOfElements reports correctly)?
line 180: "   - More testing is required for regular expressions as separators.
line 181: "   - Some performance improvement should be possible in: MvElementAt,
line 182: "     MvSwapElementsAt, MvQSortElements, MvPushToFront (and friends),
line 183: "     MvRemoveElementAll.
line 184: "   - When regex is used as a separtor I should be careful in cases when I
line 185: "     prefix the array with an extra separator. If the first element of the
line 186: "     array is an empty element, and if the regex is sensitive to the
line 187: "     repetitiveness of any characters (such as ,, instead of ,),
line 188: "     the algorithm can get confused (e.g., MvStrIndexOfElementImpl).  E.g.,
line 189: "     using \%(^,,\|,\) as pattern for 'path' causes trouble when the first
line 190: "     element is empty element (indicating the current directory).
line 191: 
line 192: if exists('loaded_multvals')
line 193:   finish
line 194: endif
line 195: if v:version < 600
line 196:   echomsg 'multvals: You need at least Vim 6.0'
line 197:   finish
line 198: endif
line 199: let loaded_multvals = 310
line 200: 
line 201: " Make sure line-continuations won't cause any problem. This will be restored
line 202: "   at the end
line 203: let s:save_cpo = &cpo
line 204: set cpo&vim
line 205: 
line 206: function! s:MyScriptId()
line 212: let s:myScriptId = s:MyScriptId()
calling function <SNR>15_MyScriptId()

line 1:   map <SID>xx <SID>xx
line 2:   let s:sid = maparg("<SID>xx")
line 3:   unmap <SID>xx
line 4:   return substitute(s:sid, "xx$", "", "")
function <SNR>15_MyScriptId returning '<SNR>15_'

continuing in /home/kguest/My-.vim-files/scripts/multvals.vim

line 213: delfunction s:MyScriptId
line 214: 
line 215: " Writer functions {{{
line 216: 
line 217: " Adds an element and returns the new array.
line 218: " Params:
line 219: "   ele - Element to be added to the array.
line 220: " Returns:
line 221: "   the new array.
line 222: function! MvAddElement(array, sep, ele, ...)
line 227: 
line 228: 
line 229: " Insert the element before index and return the new array. Index starts from 0.
line 230: " Params:
line 231: "   ele - Element to be inserted into the array.
line 232: "   index - The index before which the element should be inserted.
line 233: " Returns:
line 234: "   the new array.
line 235: function! MvInsertElementAt(array, sep, ele, index, ...)
line 251: 
line 252: 
line 253: " Removes the element and returns the new array.
line 254: " Params:
line 255: "   ele - Element to be removed from the array.
line 256: " Returns:
line 257: "   the new array.
line 258: function! MvRemoveElement(array, sep, ele, ...)
line 262: 
line 263: " Same as MvRemoveElement, except that a regex pattern can be used as a
line 264: "   element instead of a constant string.
line 265: function! MvRemovePattern(array, sep, pat, ...)
line 269: 
line 270: function! s:MvRemoveElementImpl(array, sep, ele, asPattern, ...)
line 289: 
line 290: 
line 291: " Remove the element at index. Index starts from 0.
line 292: " Params:
line 293: "   index - The index of the element that needs to be removed.
line 294: " Returns:
line 295: "   the new array.
line 296: function! MvRemoveElementAt(array, sep, index, ...)
line 301: 
line 302: 
line 303: " Remove the all occurances of element in array.
line 304: " Contributed by Steve Hall "digitect at mindspring dot com"
line 305: " Params:
line 306: "   ele - Element to be removed from the array.
line 307: " Returns:
line 308: "   the new array.
line 309: function! MvRemoveElementAll(array, sep, ele, ...)
line 321: 
line 322: 
line 323: " Remove the all occurances of elements matching given pattern in array.
line 324: " Params:
line 325: "   pat - Elements matching pattern to be removed from the array.
line 326: " Returns:
line 327: "   the new array.
line 328: function! MvRemovePatternAll(array, sep, pat, ...)
line 340: 
line 341: 
line 342: " Replace the element at index with element
line 343: " Contributed by Steve Hall <digitect at mindspring.com>
line 344: " Params:
line 345: "   ele - The new element to replace in the array.
line 346: "   index - The index of the element that needs to be replaced.
line 347: " Returns:
line 348: "   the new array.
line 349: function! MvReplaceElementAt(array, sep, ele, index, ...)
line 357: 
line 358: 
line 359: " Rotates the array such that the element at index is on the left (the first).
line 360: " Params:
line 361: "   index - The index of the element that needs to be rotated.
line 362: " Returns:
line 363: "   the new array.
line 364: function! MvRotateLeftAt(array, sep, index, ...)
line 377: 
line 378: 
line 379: " Rotates the array such that the element at index is on the right (the last).
line 380: " Params:
line 381: "   index - The index of the element that needs to be rotated.
line 382: " Returns:
line 383: "   the new array.
line 384: function! MvRotateRightAt(array, sep, index, ...)
line 397: 
line 398: 
line 399: " Moves the element to the front of the array. Useful for maintaining an MRU
line 400: "  list. Even if the element doesn't exist in the array, it is still added to
line 401: "  the front of the array. See selectbuf.vim at vim.sf.net for an example
line 402: "  usage.
line 403: " Params:
line 404: "   ele - Element that needs to be pushed to the front.
line 405: " Returns:
line 406: "   the new array.
line 407: function! MvPushToFront(array, sep, ele, ...)
line 413: 
line 414: 
line 415: " Moves the element at the specified index to the front of the array. Useful
line 416: "  for maintaining an MRU list. Even if the element doesn't exist in the array,
line 417: "  it is still added to the front of the array. See selectbuf.vim at vim.sf.net
line 418: "  for an example usage.
line 419: " Params:
line 420: "   index - Index of the element that needs to moved to the front of the array.
line 421: " Returns:
line 422: "   the new array.
line 423: function! MvPushToFrontElementAt(array, sep, index, ...)
line 428: 
line 429: 
line 430: " Moves the element to the back of the array. Even if the element doesn't exist
line 431: "   in the array, it is still added to the back of the array.
line 432: " Params:
line 433: "   ele - Element that needs to be pulled to the back.
line 434: " Returns:
line 435: "   the new array.
line 436: function! MvPullToBack(array, sep, ele, ...)
line 443: 
line 444: 
line 445: " Moves the element at the specified index to the back of the array. Even if
line 446: "   the element doesn't exist in the array, it is still added to the back of
line 447: "   the array.
line 448: " Params:
line 449: "   index - Index of the element that needs to moved to the back of the array.
line 450: " Returns:
line 451: "   the new array.
line 452: function! MvPullToBackElementAt(array, sep, index, ...)
line 457: 
line 458: 
line 459: " Swaps the elements at the specified indexes.
line 460: " Params:
line 461: "   index1 - index of one of the elements.
line 462: "   index2 - index of the other element.
line 463: " Returns:
line 464: "   the new array with swapped elements.
line 465: function! MvSwapElementsAt(array, sep, index1, index2, ...)
line 495: 
line 496: 
line 497: " Sorts the elements in the array using the given comparator and in the given
line 498: "   direction using quick sort algorithm.
line 499: " Ex:
line 500: "   The following sorts the numbers in descending order using the bundled number
line 501: "   comparator (see genutils.vim).
line 502: "
line 503: "     echo MvQSortElements('3,4,2,5,7,1,6', ',', 'CmpByNumber', -1)
line 504: "
line 505: "   The following sorts the alphabet in ascending order again using the
line 506: "   bundled string comparator (see genutils.vim).
line 507: "
line 508: "     echo MvQSortElements('e,a,d,b,f,c,g', ',', 'CmpByString', 1)
line 509: "
line 510: " Params:
line 511: "   cmp - name of the comparator function. You can use the names of standard
line 512: "         comparators specified in the genutils.vim script, such as
line 513: "         'CmpByString', or define your own (which then needs to be a global
line 514: "         function or if it is a script local function, prepend it with your
line 515: "         script id. See genutils.vim for how to get your script id and for
line 516: "         examples on comparator functions (if you want to write your own).
line 517: "   direction - 1 for asending and -1 for descending.
line 518: " Returns:
line 519: "   The new sorted array.
line 520: " See:
line 521: "   QSort2() function from genutils.vim
line 522: function! MvQSortElements(array, sep, cmp, direction, ...)
line 528: 
line 529: " Just like MvQSortElements(), except that it uses the faster BinInsertSort2()
line 530: "   functions instead of the QSort2() function.
line 531: function! MvBISortElements(array, sep, cmp, direction, ...)
line 537: 
line 539: function! s:MvSortElements(array, sep, cmp, direction, sortFunc, acc, wrt, ...)
line 566: 
line 567: function! s:SortGetElementAt(index, context)
line 572: 
line 573: function! s:SortSwapElements(index1, index2, context)
line 577: 
line 578: function! s:SortMoveElement(from, to, context)
line 584: 
line 585: " Writer functions }}}
line 586: 
line 587: 
line 588: " Reader functions {{{
line 589: 
line 590: " Functions that are at the bottom of the stack, these don't use others {{{
line 591: 
line 592: " Returns the number of elements in the array.
line 593: " Returns:
line 594: "   the number of elements that are present in the array.
line 595: function! MvNumberOfElements(array, sep, ...)
line 613: 
line 614: 
line 615: " Returns the string-index of the element in the array, which can be used with
line 616: "   string manipulation functions such as strpart().
line 617: " Params:
line 618: "   ele - Element whose string-index is to be found.
line 619: " Returns:
line 620: "   the string index of the element, starts from 0.
line 621: function! MvStrIndexOfElement(array, sep, ele, ...)
line 625: 
line 626: " Same as MvStrIndexOfElement, except that a regex pattern can be used as
line 627: "   element instead of a constant string.
line 628: function! MvStrIndexOfPattern(array, sep, pat, ...)
line 632: 
line 633: function! s:MvStrIndexOfElementImpl(array, sep, ele, asPattern, ...)
line 646: 
line 647: 
line 648: " Returns the index after the element.
line 649: " Params:
line 650: "   ele - Element after which the index needs to be found.
line 651: " Returns:
line 652: "   the string index after the element including the separator. Starts from 0.
line 653: "     Returns -1 if there is no such element. Returns one more than the last
line 654: "     char if it is the last element (like matchend()).
line 655: function! MvStrIndexAfterElement(array, sep, ele, ...)
line 659: 
line 660: " Same as MvStrIndexAfterElement, except that a regex pattern can be used
line 661: "   as element instead of a constant string.
line 662: function! MvStrIndexAfterPattern(array, sep, pat, ...)
line 666: 
line 667: function! s:MvStrIndexAfterElementImpl(array, sep, ele, asPattern, ...)
line 686: 
line 687: 
line 688: " Returns the last element in the array.
line 689: " Returns:
line 690: "   the last element in the array.
line 691: function! MvLastElement(array, sep, ...)
line 703: 
line 704: " Functions that are at the bottom of the stack }}}
line 705: 
line 706: " Returns the string-index of the element present at element-index, which can
line 707: "   be used with string manipulation functions such as strpart().
line 708: " Params:
line 709: "   index - Index of the element whose string-index needs to be found.
line 710: " Returns:
line 711: "   the string index of the element, starts from 0.
line 712: function! MvStrIndexOfElementAt(array, sep, index, ...)
line 723: 
line 724: 
line 725: " Returns the element-index of the element in the array, which can be used with
line 726: "   other functions that accept element-index such as MvInsertElementAt,
line 727: "   MvRemoveElementAt etc.
line 728: " Params:
line 729: "   ele - Element whose element-index is to be found.
line 730: " Returns:
line 731: "   the element-index of the element, starts from 0.
line 732: function! MvIndexOfElement(array, sep, ele, ...)
line 736: 
line 737: " Same as MvIndexOfElement, except that a regex pattern can be used as element
line 738: "   instead of a constant string.
line 739: function! MvIndexOfPattern(array, sep, pat, ...)
line 743: 
line 744: function! s:MvIndexOfElementImpl(array, sep, ele, asPattern, ...)
line 758: 
line 759: 
line 760: " Returns 1 (for true) if the element is contained in the array and 0 (for
line 761: "   false) if not.
line 762: " Params:
line 763: "   ele - Element that needs to be tested for.
line 764: " Returns:
line 765: "   1 if element is contained and 0 if not.
line 766: function! MvContainsElement(array, sep, ele, ...)
line 774: 
line 775: " Same as MvContainsElement, except that a regex pattern can be used as
line 776: "   element instead of a constant string.
line 777: function! MvContainsPattern(array, sep, pat, ...)
line 785: 
line 786: 
line 787: " Returns the index'th element in the array. The index starts from 0.
line 788: " Inspired by the posts in the vimdev mailing list, by Charles E. Campbell &
line 789: "   Zdenek Sekera.
line 790: " Params:
line 791: "   index - Index at which the element needs to be found.
line 792: " Returns:
line 793: "   the element at the given index.
line 794: function! MvElementAt(array, sep, index, ...)
line 857: 
line 858: 
line 859: function! MvElementLike(array, sep, pat, ...)
line 865: 
line 866: 
line 867: " Creates a new iterator with the given name. This can be passed to
line 868: "   MvIterHasNext() and MvIterNext() to iterate over elements. Call
line 869: "   MvIterDestroy() to remove the space occupied by this iterator.
line 870: " Do not modify the array while using the iterator.
line 871: " Params:
line 872: "   iterName - A unique name that is used to identify this iterator. The
line 873: "                storage is alloted in the plugin's name space, so it is
line 874: "                important to make sure that you pass in a unique name that is
line 875: "                unlikely to collide with other callers.
line 876: function! MvIterCreate(array, sep, iterName, ...)
line 884: 
line 885: 
line 886: " Deallocates the space occupied by this iterator.
line 887: " Params:
line 888: "   iterName - The name of the iterator to be destroyed that was previously
line 889: "                created using MvIterCreate.
line 890: function! MvIterDestroy(iterName)
line 897: 
line 898: 
line 899: " Indicates if there are more elements in this array to be iterated. Always
line 900: "   call this before calling MvIterNext().
line 901: " Do not modify the array while using the iterator.
line 902: " Params:
line 903: "   iterName - The name of the iterator that was previously created using
line 904: "                MvIterCreate.
line 905: " Returns:
line 906: "   1 (for true) if has more elements or 0 (for false).
line 907: function! MvIterHasNext(iterName)
line 922: 
line 923: 
line 924: " Returns next value or "" if none. You should always call MvIterHasNext()
line 925: "   before calling this function.
line 926: " Do not modify the array while using the iterator.
line 927: " Params:
line 928: "   iterName - The name of the iterator that was previously created using
line 929: "                MvIterCreate.
line 930: " Returns:
line 931: "   the next element in the iterator (array).
line 932: function! MvIterNext(iterName)
line 935: 
line 936: function! MvIterPeek(iterName)
line 939: 
line 940: function! s:MvIterNext(iterName, peek)
line 959: 
line 960: 
line 961: " Compares two elements based on the order of their appearance in the array.
line 962: "   Useful for sorting based on an MRU listing.
line 963: " Params:
line 964: "   ele1 - first element to be compared by position.
line 965: "   ele2 - second element to be compared by position.
line 966: "   direction - the direction of sort, used for determining the return value.
line 967: " Returns:
line 968: "   direction if ele2 comes before ele1 (for no swap), and 0 or -direction
line 969: "     otherwise (for swap).
line 970: function! MvCmpByPosition(array, sep, ele1, ele2, direction, ...)
line 988: 
line 989: 
line 990: " Function to prompt user for an element out of the passed in array. The
line 991: "   user will be prompted with a list of choices to make. The elements are
line 992: "   formatted in a single column with a number prefixed to them. User can
line 993: "   then enter the numer of the element to indicate the selection. Take a
line 994: "   look at the selectbuf.vim script(:SBS command) at vim.sf.net for an
line 995: "   example usage.
line 996: " Params:
line 997: "   default - The default value for the selection. Default can be the
line 998: "               element-index or the element itself. If number, it is always
line 999: "               treated as an index, so if the elements are composed of
line 1000: "               numbers themselves, then you need to compute the index before
line 1001: "               calling this function.
line 1002: "   msg - The message that should appear in the prompt (passed to input()).
line 1003: "   skip - The element that needs to be skipped from selection (pass a
line 1004: "            non-existent element to disable this, such as an empty value '').
line 1005: "   useDialog - if true, uses dialogs for prompts, instead of the command-line(
line 1006: "                 inputdialog() instead of input()). But personally, I don't
line 1007: "                 like this because the power user then can't use the
line 1008: "                 expression register.
line 1009: " Returns:
line 1010: "   the selected element or empty string, "" if nothing is selected.
line 1011: "
line 1012: function! MvPromptForElement(array, sep, default, msg, skip, useDialog, ...)
line 1017: 
line 1018: 
line 1019: " Same as above MvPromptForElement, except that a regex pattern can be used
line 1020: "   as element instead of a constant string.
line 1022: function! MvPromptForElement2(array, sep, default, msg, skip, useDialog, nCols, ...)
line 1122: 
line 1123: 
line 1124: let s:selection = -1
line 1125: " Returns the index of the element selected by the user in the previous
line 1126: "   MvPromptForElement or MvPromptForElement2 calls. Returns -1 when the user
line 1127: "   didn't select any element (aborted the selection). This function is useful
line 1128: "   if there are empty empty or duplicate elements in the selection.
line 1129: function! MvGetSelectedIndex()
line 1132: 
line 1133: 
line 1134: " This function searches and returns the element in the given array that comes
line 1135: "   after the given element in the given dir (1 or -1). The array is expected
line 1136: "   to be sorted. Only those that are not regular expressions are supported as
line 1137: "   separators.
line 1138: function! MvNumSearchNext(array, sep, ele, dir, ...)
line 1160: 
line 1161: " This function returns val1 or val2 as the next value of val, depending on
line 1162: "   the direction that is passed in. This is to be used mainly by the
line 1163: "   substitute in s:NextBrkPt() function.
line 1164: function! s:GetNextInOrder(val, val1, val2, dir)
line 1176:  
line 1177: " Reader functions }}}
line 1178: 
line 1179: 
line 1180: " Utility functions {{{
line 1181: 
line 1182: let s:UNPROTECTED_CHAR_PRFX = '\%(\%([^\\]\|^\)\\\%(\\\\\)*\)\@<!' " Doesn't eat slashes.
line 1183: "let s:UNPROTECTED_CHAR_PRFX = '\\\@<!\%(\\\\\)*' " Eats slashes.
line 1184: function! MvCrUnProtectedCharsPattern(sepChars)
line 1192: 
line 1193: " Make sure the array ha a trailing separator, returns the new array.
line 1194: function! s:EnsureTrailingSeparator(array, sep, ...)
line 1208: 
line 1209: 
line 1210: function! s:HasTrailingSeparator(array, sep)
line 1213: 
line 1214: 
line 1215: function! s:IsRegularExpression(str)
line 1218: 
line 1219: 
line 1220: function! s:Escape(str)
line 1226: 
line 1227: 
line 1228: function! s:Spacer(width)
line 1232: 
line 1233: function! s:Match(expr, pat, start)
line 1236: 
line 1237: function! s:Matchend(expr, pat, start)
line 1240: 
line 1241: function! s:Matchstr(expr, pat, start)
line 1244: 
line 1245: " Always match() with 'ignorecase' and 'smartcase' off.
line 1246: function! s:ExecMatchFunc(funcName, def, expr, pat, start)
line 1260: 
line 1261: " Utility functions }}}
line 1262: 
line 1263: 
line 1264: " Testing {{{
line 1265: "function! s:Assert(actual, expected, msg)
line 1266: "  if a:actual !=# a:expected
line 1267: "    call input("Failed: " . a:msg. ": actual: " . a:actual . " expected: " . a:expected)
line 1268: "  endif
line 1269: "endfunction
line 1270: "
line 1271: "function! MvTestPrintAllWithIter(array, sep)
line 1272: "  let elementCount = 0
line 1273: "  call MvIterCreate(a:array, a:sep, "MyIter")
line 1274: "  while MvIterHasNext("MyIter")
line 1275: "    call s:Assert(MvIterNext("MyIter"), elementCount+1, "MvIterNext with array: " . a:array . " and sep: " . a:sep . " for " . (elementCount+1))
line 1276: "    let elementCount = elementCount + 1
line 1277: "  endwhile
line 1278: "  call MvIterDestroy("MyIter")
line 1279: "endfunction
line 1280: "
line 1281: "function! MvRunTests()
line 1282: "  call MvTestPrintAllWithIter('1,,2,,3,,4,,', ',,')
line 1283: "  call MvTestPrintAllWithIter('1,,2,,3,,4', ',,')
line 1284: "
line 1285: "  "
line 1286: "  " First test the read-only operations.
line 1287: "  "
line 1288: "  call s:Assert(MvStrIndexOfElement('1,,2,,3,,4,,', ',,', '3'), 6, 'MvStrIndexOfElement with array: 1,,2,,3,,4,, sep: ,, for element 3')
line 1289: "  call s:Assert(MvStrIndexOfElement('1,,2,,3,,4', ',,', '4'), 9, 'MvStrIndexOfElement with array: 1,,2,,3,,4,, sep: ,, for element 4')
line 1290: "  call s:Assert(MvStrIndexOfElement('1,,2,,3,,4,,', ',,', '1'), 0, 'MvStrIndexOfElement with array: 1,,2,,3,,4,, sep: ,, for element 1')
line 1291: "  " Test a fix for a previous identified bug.
line 1292: "  call s:Assert(MvStrIndexOfElement('11,,1,,2,,3,,', ',,', '1'), 4, 'MvStrIndexOfElement with array: 11,,1,,2,,3,, sep: ,, for element 1')
line 1293: "
line 1294: "  call s:Assert(MvStrIndexOfElement('1xxxx2xxx3x4xxxx', 'x\+', '3', 'x'), 9, 'MvStrIndexOfElement with array: 1xxxx2xxx3x4xxxx for element 3')
line 1295: "  call s:Assert(MvStrIndexOfElement('1xxxx2xxx3x4', 'x\+', '3', 'x'), 9, 'MvStrIndexOfElement with array: 1xxxx2xxx3x4 for element 3')
line 1296: "  call s:Assert(MvStrIndexOfElement('1xxxx2xxx3x4', 'x\+', '4', 'x'), 11, 'MvStrIndexOfElement with array: 1xxxx2xxx3x4 for element 4')
line 1297: "  call s:Assert(MvStrIndexOfElement('1xxxx2xxx3x4', 'x\+', '1', 'x'), 0, 'MvStrIndexOfElement with array: 1xxxx2xxx3x4 for element 1')
line 1298: "  call s:Assert(MvStrIndexOfElement('1xxxx', 'x\+', '1', 'x'), 0, 'MvStrIndexOfElement with array: 1xxxx for element 1')
line 1299: "  call s:Assert(MvStrIndexOfElement('1', 'x\+', '1', 'x'), 0, 'MvStrIndexOfElement with array: 1 for element 1')
line 1300: "
line 1301: "  call s:Assert(MvStrIndexOfPattern('1a,1b,1c,1d,', ',', '.c'), 6, 'MvStrIndexOfPattern with array: 1a,1b,1c,1d, for pattern .c')
line 1302: "
line 1303: "  call s:Assert(MvStrIndexOfElementAt('1,,2,,3,,4', ',,', 2), 6, 'MvStrIndexOfElementAt with array: 1,,2,,3,,4,, sep: ,, for index 2')
line 1304: "  call s:Assert(MvStrIndexOfElementAt('1,,2,,3,,4,,', ',,', 3), 9, 'MvStrIndexOfElementAt with array: 1,,2,,3,,4,, sep: ,, for index 3')
line 1305: "  call s:Assert(MvStrIndexOfElementAt('1,,2,,3,,4,,', ',,', 0), 0, 'MvStrIndexOfElementAt with array: 1,,2,,3,,4,, sep: ,, for index 0')
line 1306: "  call s:Assert(MvStrIndexOfElementAt('1,,', ',,', 0), 0, 'MvStrIndexOfElementAt with array: 1,, sep: ,, for index 0')
line 1307: "  call s:Assert(MvStrIndexOfElementAt('1', ',,', 0), 0, 'MvStrIndexOfElementAt with array: 1 sep: ,, for index 0')
line 1308: "
line 1309: "  call s:Assert(MvStrIndexOfElementAt('1xxxx2xxx3x4xxxx', 'x\+', 2, 'x'), 9, 'MvStrIndexOfElementAt with array: 1xxxx2xxx3x4xxxx for index 2')
line 1310: "  call s:Assert(MvStrIndexOfElementAt('1xxxx2xxx3x4xxxx', 'x\+', 0, 'x'), 0, 'MvStrIndexOfElementAt with array: 1xxxx2xxx3x4xxxx for index 1')
line 1311: "  call s:Assert(MvStrIndexOfElementAt('1xxxx2xxx3x4xxxx', 'x\+', 3, 'x'), 11, 'MvStrIndexOfElementAt with array: 1xxxx2xxx3x4xxxx for index 3')
line 1312: "  call s:Assert(MvStrIndexOfElementAt('1xxxx', 'x\+', 0, 'x'), 0, 'MvStrIndexOfElementAt with array: 1xxxx for index 0')
line 1313: "  call s:Assert(MvStrIndexOfElementAt('1', 'x\+', 0, 'x'), 0, 'MvStrIndexOfElementAt with array: 1 for index 0')
line 1314: "
line 1315: "  call s:Assert(MvElementAt('1,,2,,3,,4', ',,', 2), '3', 'MvElementAt with array: 1,,2,,3,,4 sep: ,, for index 2')
line 1316: "  call s:Assert(MvElementAt('1,,2,,3,,4', ',,', 0), '1', 'MvElementAt with array: 1,,2,,3,,4 sep: ,, for index 0')
line 1317: "
line 1318: "  call s:Assert(MvElementAt('1xxxx2xxx3x4xxxx', 'x\+', 2, 'x'), '3', 'MvElementAt with array: 1xxxx2xxx3x4xxxx for index 2')
line 1319: "  call s:Assert(MvElementAt('1xxxx2xxx3x4', 'x\+', 0, 'x'), '1', 'MvElementAt with array: 1xxxx2xxx3x4 for index 0')
line 1320: "  call s:Assert(MvElementAt('1xxxx', 'x\+', 0, 'x'), '1', 'MvElementAt with array: 1xxxx for index 0')
line 1321: "  call s:Assert(MvElementAt('1', 'x\+', 0, 'x'), '1', 'MvElementAt with array: 1 for index 0')
line 1322: "
line 1323: "  call s:Assert(MvIndexOfElement('1,,2,,3,,4', ',,', '3'), 2, 'MvIndexOfElement with array: 1,,2,,3,,4 sep: ,, for element 3')
line 1324: "  call s:Assert(MvIndexOfElement('1,,2,,3,,4,,', ',,', '1'), 0, 'MvIndexOfElement with array: 1,,2,,3,,4,, sep: ,, for element 0')
line 1325: "
line 1326: "  call s:Assert(MvIndexOfElement('1xxxx2xxx3x4xxxx', 'x\+', '3', 'x'), 2, 'MvIndexOfElement with array: 1xxxx2xxx3x4xxxx for element 3')
line 1327: "  call s:Assert(MvIndexOfElement('1xxxx2xxx3x4', 'x\+', '4', 'x'), 3, 'MvIndexOfElement with array: 1xxxx2xxx3x4 for element 4')
line 1328: "  call s:Assert(MvIndexOfElement('1xxxx', 'x\+', '1', 'x'), 0, 'MvIndexOfElement with array: 1xxxx for element 1')
line 1329: "  call s:Assert(MvIndexOfElement('1', 'x\+', '1', 'x'), 0, 'MvIndexOfElement with array: 1 for element 1')
line 1330: "
line 1331: "  call s:Assert(MvIndexOfPattern('1a,1b,1c,1d,', ',', '.c'), 2, 'MvIndexOfPattern with array: 1a,1b,1c,1d, for pattern .c')
line 1332: "
line 1333: "  call s:Assert(MvNumberOfElements('1,,2,,3,,4', ',,'), 4, 'MvNumberOfElements with array: 1,,2,,3,,4 sep: ,,')
line 1334: "  call s:Assert(MvNumberOfElements('1,,2,,3,,4', ',,'), 4, 'MvNumberOfElements with array: 1,,2,,3,,4 sep: ,,')
line 1335: "  call s:Assert(MvNumberOfElements('1,,', ',,'), 1, 'MvNumberOfElements with array: 1,, sep: ,,')
line 1336: "  call s:Assert(MvNumberOfElements('1', ',,'), 1, 'MvNumberOfElements with array: 1 sep: ,,')
line 1337: "
line 1338: "  call s:Assert(MvNumberOfElements('1xxxx2xxx3x4xxxx', 'x\+'), 4, 'MvNumberOfElements with array: 1xxxx2xxx3x4xxxx')
line 1339: "  call s:Assert(MvNumberOfElements('1xxxx2xxx3x4', 'x\+'), 4, 'MvNumberOfElements with array: 1xxxx2xxx3x4')
line 1340: "  call s:Assert(MvNumberOfElements('1xxxx', 'x\+'), 1, 'MvNumberOfElements with array: 1xxxx')
line 1341: "  call s:Assert(MvNumberOfElements('1', 'x\+'), 1, 'MvNumberOfElements with array: 1')
line 1342: "
line 1343: "  call s:Assert(MvContainsElement('1,,2,,3,,4', ',,', '3'), 1, 'MvContainsElement with array: 1,,2,,3,,4 sep: ,, for element 3')
line 1344: "  call s:Assert(MvContainsElement('1,,2,,3,,4,,', ',,', '1'), 1, 'MvContainsElement with array: 1,,2,,3,,4,, sep: ,, for element 1')
line 1345: "  call s:Assert(MvContainsElement('1,,2,,3,,4,,', ',,', '0'), 0, 'MvContainsElement with array: 1,,2,,3,,4,, sep: ,, for element 0')
line 1346: "
line 1347: "  call s:Assert(MvContainsElement('1xxxx2xxx3x4xxxx', 'x\+', '3', 'x'), 1, 'MvContainsElement with array: 1xxxx2xxx3x4xxxx for element 3')
line 1348: "  call s:Assert(MvContainsElement('1xxxx2xxx3x4', 'x\+', '4', 'x'), 1, 'MvContainsElement with array: 1xxxx2xxx3x4 for element 4')
line 1349: "  call s:Assert(MvContainsElement('1xxxx', 'x\+', '1', 'x'), 1, 'MvContainsElement with array: 1xxxx for element 1')
line 1350: "  call s:Assert(MvContainsElement('1', 'x\+', '1', 'x'), 1, 'MvContainsElement with array: 1 for element 1')
line 1351: "
line 1352: "  call s:Assert(MvLastElement('1,,2,,3,,4', ',,'), '4', 'MvLastElement with array: 1,,2,,3,,4 sep: ,,')
line 1353: "  call s:Assert(MvLastElement('1,,2,,3,,4,,', ',,'), '4', 'MvLastElement with array: 1,,2,,3,,4,, sep: ,,')
line 1354: "
line 1355: "  call s:Assert(MvLastElement('1xxxx2xxx3x4xxxx', 'x\+', 'x'), '4', 'MvLastElement with array: 1xxxx2xxx3x4xxxx')
line 1356: "  call s:Assert(MvLastElement('1xxxx2xxx3x4', 'x\+', 'x'), '4', 'MvLastElement with array: 1xxxx2xxx3x4')
line 1357: "  call s:Assert(MvLastElement('1xxxx', 'x\+', 'x'), '1', 'MvLastElement with array: 1xxxx')
line 1358: "  call s:Assert(MvLastElement('1', 'x\+', 'x'), '1', 'MvLastElement with array: 1')
line 1359: "
line 1360: "  "
line 1361: "  " Now test the write operations.
line 1362: "  "
line 1363: "  call s:Assert(MvAddElement('1,,2,,3,,4', ',,', '5'), '1,,2,,3,,4,,5,,', 'MvAddElement with array: 1,,2,,3,,4 sep: ,, for element 5')
line 1364: "  call s:Assert(MvAddElement('1,,2,,3,,4,,', ',,', '5'), '1,,2,,3,,4,,5,,', 'MvAddElement with array: 1,,2,,3,,4,, sep: ,, for element 5')
line 1365: "
line 1366: "  call s:Assert(MvAddElement('1,,,2,,,,3,,4', ',\+', '5', ','), '1,,,2,,,,3,,4,5,', 'MvAddElement with array: 1,,,2,,,,3,,4  sep: ,\+ for element 5')
line 1367: "
line 1368: "  call s:Assert(MvRemoveElement('1,,2,,3,,4', ',,', '3'), '1,,2,,4,,', 'MvRemoveElement with array: 1,,2,,3,,4 sep: ,, for element 3')
line 1369: "  call s:Assert(MvRemoveElement('1,,2,,3,,4,,', ',,', '1'), '2,,3,,4,,', 'MvRemoveElement with array: 1,,2,,3,,4,, sep: ,, for element 1')
line 1370: "
line 1371: "  call s:Assert(MvRemoveElement('1,,,2,,,,3,,4', ',\+', '2', ','), '1,,,3,,4,', 'MvRemoveElement with array: 1,,,2,,,,3,,4  sep: ,\+ for element 2')
line 1372: "
line 1373: "  call s:Assert(MvRemoveElementAt('1,,2,,3,,4', ',,', 2), '1,,2,,4,,', 'MvRemoveElementAt with array: 1,,2,,3,,4 sep: ,, for index 2')
line 1374: "  call s:Assert(MvRemoveElementAt('1,,2,,3,,4,,', ',,', 0), '2,,3,,4,,', 'MvRemoveElementAt with array: 1,,2,,3,,4,, sep: ,, for index 0')
line 1375: "
line 1376: "  call s:Assert(MvRemoveElementAt('1,,,2,,,,3,,4', ',\+', 2, ','), '1,,,2,,,,4,', 'MvRemoveElementAt with array: 1,,,2,,,,3,,4  sep: ,\+ for index 2')
line 1377: "
line 1378: "  call s:Assert(MvRemoveElementAll('1,,2,,1,,4', ',,', '1'), '2,,4,,', 'MvRemoveElementAll with array: 1,,2,,1,,4 sep: ,, for element 1')
line 1379: "  call s:Assert(MvRemovePatternAll('abc,,123,,def,,456', ',,', '\d\+'), 'abc,,def,,', 'MvRemoveElementAll with array: abc,,123,,def,,456 sep: ,, for pattern \d\+')
line 1380: "
line 1381: "  call s:Assert(MvPushToFront('1,,2,,3,,4', ',,', '3'), '3,,1,,2,,4,,', 'MvPushToFront with array: 1,,2,,3,,4 sep: ,, for element 3')
line 1382: "  call s:Assert(MvPushToFront('1,,2,,3,,4,,', ',,', '4'), '4,,1,,2,,3,,', 'MvPushToFront with array: 1,,2,,3,,4,, sep: ,, for element 4')
line 1383: "
line 1384: "  call s:Assert(MvPushToFront('1,,,2,,,,3,,4', ',\+', '2', ','), '2,1,,,3,,4,', 'MvPushToFront with array: 1,,,2,,,,3,,4  sep: ,\+ for element 2')
line 1385: "
line 1386: "  call s:Assert(MvPushToFrontElementAt('1,,2,,3,,4', ',,', 2), '3,,1,,2,,4,,', 'MvPushToFrontElementAt with array: 1,,2,,3,,4 sep: ,, for index 2')
line 1387: "  call s:Assert(MvPushToFrontElementAt('1,,2,,3,,4,,', ',,', 3), '4,,1,,2,,3,,', 'MvPushToFrontElementAt with array: 1,,2,,3,,4,, sep: ,, for index 3')
line 1388: "
line 1389: "  call s:Assert(MvPushToFrontElementAt('1,,,2,,,,3,,4', ',\+', 2, ','), '3,1,,,2,,,,4,', 'MvPushToFrontElementAt with array: 1,,,2,,,,3,,4  sep: ,\+ for index 2')
line 1390: "  call s:Assert(MvPushToFrontElementAt('1,2\,3,4,5', '\\\@<!\%(\\\\\)*,', 1, ','), '2\,3,1,4,5,', 'MvPushToFrontElementAt with array: 1,2\,3,4,5  sep: ,\+ for index 2')
line 1391: "
line 1392: "  call s:Assert(MvPullToBack('1,,2,,3,,4', ',,', '3'), '1,,2,,4,,3,,', 'MvPullToBack with array: 1,,2,,3,,4 sep: ,, for element 3')
line 1393: "  call s:Assert(MvPullToBack('1,,2,,3,,4,,', ',,', '1'), '2,,3,,4,,1,,', 'MvPullToBack with array: 1,,2,,3,,4,, sep: ,, for element 1')
line 1394: "
line 1395: "  call s:Assert(MvPullToBack('1,,,2,,,,3,,4', ',\+', '2', ','), '1,,,3,,4,2,', 'MvPullToBack with array: 1,,,2,,,,3,,4  sep: ,\+ for element 2')
line 1396: "
line 1397: "  call s:Assert(MvPullToBackElementAt('1,,2,,3,,4', ',,', 2), '1,,2,,4,,3,,', 'MvPullToBackElementAt with array: 1,,2,,3,,4 sep: ,, for index 2')
line 1398: "  call s:Assert(MvPullToBackElementAt('1,,2,,3,,4', ',,', 0), '2,,3,,4,,1,,', 'MvPullToBackElementAt with array: 1,,2,,3,,4 sep: ,, for index 0')
line 1399: "
line 1400: "  call s:Assert(MvPullToBackElementAt('1,2\,3,4,5', '\\\@<!\%(\\\\\)*,', 1, ','), '1,4,5,2\,3,', 'MvPullToBackElementAt with array: 1,2\,3,4,5  sep: ,\+ for index 2')
line 1401: "
line 1402: "  call s:Assert(s:EnsureTrailingSeparator('1,,2,,3,,4,,', ',,'), '1,,2,,3,,4,,', 's:EnsureTrailingSeparator with array: 1,,2,,3,,4,, sep: ,,')
line 1403: "  call s:Assert(s:EnsureTrailingSeparator('1,,2,,3,,4', ',,'), '1,,2,,3,,4,,', 's:EnsureTrailingSeparator with array: 1,,2,,3,,4 sep: ,,')
line 1404: "
line 1405: "  call s:Assert(s:EnsureTrailingSeparator('1,2\,3,4,5', '\\\@<!\%(\\\\\)*,', ','), '1,2\,3,4,5,', 's:EnsureTrailingSeparator with array: 1,2\,3,4,5,  sep: \\\@<!\%(\\\\\)*,')
line 1406: "
line 1407: "  call s:Assert(MvInsertElementAt('1,,2,,3,,4', ',,', '5', 2), '1,,2,,5,,3,,4,,', 'MvInsertElementAt with array: 1,,2,,3,,4 sep: ,, for element 5 at index 2')
line 1408: "  call s:Assert(MvInsertElementAt('1,,2,,3,,4,,', ',,', '5', 0), '5,,1,,2,,3,,4,,', 'MvInsertElementAt with array: 1,,2,,3,,4,, sep: ,, for element 5 at index 0')
line 1409: "
line 1410: "  call s:Assert(MvInsertElementAt('1,2\,3,4,5', '\\\@<!\%(\\\\\)*,', '6', 2, ','), '1,2\,3,6,4,5,', 'MvInsertElementAt with array: 1,2\,3,4,5  sep: ,\+ for element 6 at index 2')
line 1411: "
line 1412: "  call s:Assert(MvRotateLeftAt('1,,2,,3,,4', ',,', 1), '2,,3,,4,,1,,', 'MvRotateLeftAt with array: 1,,2,,3,,4 sep: ,, at index 1')
line 1413: "  call s:Assert(MvRotateLeftAt('1,,2,,3,,4', ',,', 0), '1,,2,,3,,4', 'MvRotateLeftAt with array: 1,,2,,3,,4 sep: ,, at index 0')
line 1414: "  call s:Assert(MvRotateLeftAt('1,,2,,3,,4', ',,', 3), '4,,1,,2,,3,,', 'MvRotateLeftAt with array: 1,,2,,3,,4 sep: ,, at index 3')
line 1415: "  call s:Assert(MvRotateLeftAt('1,,2,,3,,4', ',,', 4), '1,,2,,3,,4,,', 'MvRotateLeftAt with array: 1,,2,,3,,4 sep: ,, at index 4')
line 1416: "
line 1417: "  call s:Assert(MvRotateLeftAt('1,,,2,,,,3,,4', ',\+', '1', ','), '2,,,,3,,4,1,,,', 'MvRotateLeftAt with array: 1,,,2,,,,3,,4  sep: ,\+ at index 1')
line 1418: "
line 1419: "  call s:Assert(MvRotateRightAt('1,,2,,3,,4', ',,', 1), '3,,4,,1,,2,,', 'MvRotateRightAt with array: 1,,2,,3,,4 sep: ,, at index 1')
line 1420: "  call s:Assert(MvRotateRightAt('1,,2,,3,,4', ',,', 0), '2,,3,,4,,1,,', 'MvRotateRightAt with array: 1,,2,,3,,4 sep: ,, at index 0')
line 1421: "  call s:Assert(MvRotateRightAt('1,,2,,3,,4', ',,', 3), '1,,2,,3,,4,,', 'MvRotateRightAt with array: 1,,2,,3,,4 sep: ,, at index 3')
line 1422: "  call s:Assert(MvRotateRightAt('1,,2,,3,,4', ',,', 4), '1,,2,,3,,4,,', 'MvRotateRightAt with array: 1,,2,,3,,4 sep: ,, at index 4')
line 1423: "
line 1424: "  call s:Assert(MvRotateRightAt('1,,,2,,,,3,,4', ',\+', '1', ','), '3,,4,1,,,2,,,,', 'MvRotateRightAt with array: 1,,,2,,,,3,,4  sep: ,\+ at index 1')
line 1425: "
line 1426: "  call s:Assert(MvPromptForElement('a,,b,,c,,d,,', ',,', 'c', 'Please press Enter:', '', 0), 'c', 'MvPromptForElement with array a,,b,,c,,d,, for default element c')
line 1427: "  call s:Assert(MvPromptForElement2('1,,,2,,,,3,,4', ',\+', 1, 'Please press Enter:', '', 0, 2, ','), '2', 'MvPromptForElement with array a,,b,,c,,d,, for default index 1')
line 1428: "
line 1429: "  call s:Assert(MvSwapElementsAt('1,2,3,4,5', ',', 1, 3), '1,4,3,2,5,', 'MvSwapElementsAt with array: 1,2,3,4,5 for elements: 1 and 3')
line 1430: "  call s:Assert(MvSwapElementsAt('1,2,3,4,5', ',', 3, 1), '1,4,3,2,5,', 'MvSwapElementsAt with array: 1,2,3,4,5 for elements: 3 and 1')
line 1431: "  call s:Assert(MvSwapElementsAt('1,2,3,4,5', ',', 0, 3), '4,2,3,1,5,', 'MvSwapElementsAt with array: 1,2,3,4,5 for elements: 0 and 3')
line 1432: "  call s:Assert(MvSwapElementsAt('1,2,3,4,5', ',', 1, 4), '1,5,3,4,2,', 'MvSwapElementsAt with array: 1,2,3,4,5 for elements: 1 and 4')
line 1433: "  call s:Assert(MvSwapElementsAt('1,2,3,4,5', ',', 3, 3), '1,2,3,4,5,', 'MvSwapElementsAt with array: 1,2,3,4,5 for elements: 3 and 3')
line 1434: "  call s:Assert(MvSwapElementsAt('1,2,3,4,5', ',', 3, 4), '1,2,3,5,4,', 'MvSwapElementsAt with array: 1,2,3,4,5 for elements: 3 and 4')
line 1435: "
line 1436: "  call s:Assert(MvSwapElementsAt('1,,,2,,,,3,,4', ',\+', 1, 3, ','), '1,,,4,3,,2,', 'MvSwapElementsAt with array 1,,,2,,,,3,,4 for for elements:1 and 3')
line 1437: "
line 1438: "  call s:Assert(MvQSortElements('3,4,2,5,7,1,6', ',', 'CmpByNumber', -1), '7,6,5,4,3,2,1,', 'MvQSortElements with array: 3,4,2,5,7,1,6 with number comparator in descending order')
line 1439: "  call s:Assert(MvQSortElements('e,a,d,b,f,c,g', ',', 'CmpByString', 1), 'a,b,c,d,e,f,g,', 'MvQSortElements with array: e,a,d,b,f,c,g with string comparator in ascending order')
line 1440: "
line 1441: "  call s:Assert(MvQSortElements('e,,a,,,d,,b,f,,,,c,,g', ',\+', 'CmpByString', 1, ','), 'a,b,c,d,e,f,g,', 'MvQSortElements with array: e,a,d,b,f,c,g with string comparator in ascending order')
line 1442: "
line 1443: "  call s:Assert(MvBISortElements('3,4,2,5,7,1,6', ',', 'CmpByNumber', -1), '7,6,5,4,3,2,1,', 'MvBISortElements with array: 3,4,2,5,7,1,6 with number comparator in descending order')
line 1444: "  call s:Assert(MvBISortElements('e,a,d,b,f,c,g', ',', 'CmpByString', 1), 'a,b,c,d,e,f,g,', 'MvBISortElements with array: e,a,d,b,f,c,g with string comparator in ascending order')
line 1445: "
line 1446: "  call s:Assert(MvBISortElements('e,,a,,,d,,b,f,,,,c,,g', ',\+', 'CmpByString', 1, ','), 'a,b,c,d,e,f,g,', 'MvBISortElements with array: e,a,d,b,f,c,g with string comparator in ascending order')
line 1447: "
line 1448: "  call s:Assert(MvElementLike('abc,123,ABC,', ',', '\d\+'), '123', 'MvElementLike with array: abc,123,ABC and pattern: \d\+')
line 1449: "endfunction
line 1450: "
line 1451: "function! MvBenchMark(oldFunc, newFunc, ...)
line 1452: "  let array='a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,'
line 1453: "  exec MakeArgumentString()
line 1454: "
line 1455: "  let i = 0
line 1456: "  let stTime = localtime()
line 1457: "  while i < 1000
line 1458: "    exec "call ".a:newFunc."(array, ',', " . argumentString.")"
line 1459: "    let i = i + 1
line 1460: "  endwhile
line 1461: "  let enTime = localtime()
line 1462: "  call input('Total time (new): ' . (enTime - stTime))
line 1463: "
line 1464: "  let i = 0
line 1465: "  let stTime = localtime()
line 1466: "  while i < 1000
line 1467: "    exec "call ".a:oldFunc."(array, ',', " . argumentString.")"
line 1468: "    let i = i + 1
line 1469: "  endwhile
line 1470: "  let enTime = localtime()
line 1471: "  call input('Total time (old): ' . (enTime - stTime))
line 1472: "endfunction
line 1473: "
line 1474: "function! MvCompareBuiltIn()
line 1475: "  let array=''
line 1476: "  let array{1}{'y'} = ''
line 1477: "  let array{1}{'x'} = ''
line 1478: "  let array{1}{'next'} = '2'
line 1479: "  let y = 10
line 1480: "  let i = 1
line 1481: "  while i <= 80
line 1482: "    let array = MvAddElement(array, ';', y.','.i)
line 1483: "    let array{i}{'y'} = y
line 1484: "    let array{i}{'x'} = i
line 1485: "    let array{i}{'next'} = ''
line 1486: "    let array{i-1}{'next'} = i
line 1487: "    let i = i + 1
line 1488: "  endwhile
line 1489: "
line 1490: "  let y = 20
line 1491: "  let x = 10
line 1492: "
line 1493: "  let result = 0
line 1494: "  let i = 0
line 1495: "  let stTime = localtime()
line 1496: "  while i < 500
line 1497: "    let result = MvContainsElement(array, ';', y.','.x)
line 1498: "    let i = i + 1
line 1499: "  endwhile
line 1500: "  let enTime = localtime()
line 1501: "  call input('Total time (multvals): ' . (enTime - stTime) . ' and last result = '.result)
line 1502: "
line 1503: "  let result = 0
line 1504: "  let i = 0
line 1505: "  let stTime = localtime()
line 1506: "  while i < 500
line 1507: "    let tail = 1
line 1508: "    while ! type(array{tail}{'next'})
line 1509: "      if array{tail}{'y'} ==# y && array{tail}{'x'} ==# x
line 1510: "^Ilet result = 1
line 1511: "^Ibreak
line 1512: "      endif
line 1513: "      let tail = array{tail}{'next'}
line 1514: "    endwhile
line 1515: "    let i = i + 1
line 1516: "  endwhile
line 1517: "  let enTime = localtime()
line 1518: "  call input('Total time (linked list): ' . (enTime - stTime) . ' and last result = '.result)
line 1519: "endfunction
line 1520: 
line 1521: " Testing }}}
line 1522: 
line 1523: " Restore cpo.
line 1524: let &cpo = s:save_cpo
line 1525: unlet s:save_cpo
line 1526: 
line 1527: " vim6: fdm=marker et
finished sourcing /home/kguest/.vim/scripts/multvals.vim
continuing in /home/kguest/.vimrc
line 307: source $HOME/.vim/scripts/genutils.vim
chdir(/home/kguest/.vim/scripts)
fchdir() to previous dir
line 307: sourcing "/home/kguest/.vim/scripts/genutils.vim"
line 1: " genutils: Useful buffer, file and window related functions.
line 2: " Author: Hari Krishna Dara <hari_vim at yahoo dot com>
line 3: " Last Change: 15-Mar-2005 @ 19:05
line 4: " Requires: Vim-6.3, multvals.vim(3.5)
line 5: " Version: 1.18.3
line 6: " Licence: This program is free software; you can redistribute it and/or
line 7: "          modify it under the terms of the GNU General Public License.
line 8: "          See http://www.gnu.org/copyleft/gpl.txt 
line 9: " Acknowledgements:
line 10: "     - The GetNextWinnrInStack() function is based on the WinStackMv()
line 11: "       function posted by Charles E. Campbell, Jr. on vim mailing list on Jul
line 12: "       14, 2004.
line 13: "     - The CommonPath() function is based on the thread,
line 14: "       "computing relative path" on Jul 29, 2002.
line 15: "     - The ShowLinesWithSyntax() function is based on a posting by Gary
line 16: "       Holloway (gary at castandcrew dot com) on Jan, 16 2002.
line 17: "     - Robert Webb for the original "quick sort" algorithm from eval.txt.
line 18: "     - Peit Delport's (pjd at 303 dot za dot net) for his original BISort()
line 19: "       algorithm on which the BinInsertSort() and BinInsertSort2() functions
line 20: "       are based on.
line 21: " Download From:
line 22: "     http://www.vim.org/script.php?script_id=197
line 23: " Description:
line 24: "   - Read the "Documentation With Function Prototypes" section below.
line 25: "   - Functions MakeArgumentString(), MakeArgumentList() and CreateArgString()
line 26: "     to work with and pass variable number of arguments to other functions.
line 27: "     There is also an ExtractFuncListing() function that is used by the above
line 28: "     functions to create snippets (see also breakpts.vim, ntservices.vim and
line 29: "     ntprocesses.vim for interesting ideas on how to use this function).
line 30: "   - Misc. window/buffer related functions, NumberOfWindows(),
line 31: "     FindBufferForName(), MoveCursorToWindow(), MoveCurLineToWinLine(),
line 32: "     SetupScratchBuffer(), MapAppendCascaded()
line 33: "   - Save/Restore all the window height/width settings to be restored later.
line 34: "   - Save/Restore position in the buffer to be restored later. Works like the
line 35: "     built-in marks feature, but has more to it.
line 36: "   - AddNotifyWindowClose() to get notifications *after* a window with the
line 37: "     specified buffer has been closed or the buffer is unloaded. The built-in
line 38: "     autocommands can only notify you *before* the window is closed. You can
line 39: "     use this with the Save/Restore window settings feature to restore the
line 40: "     dimensions of existing windows, after your window is closed (just like
line 41: "     how Vim does while closing help windows). See selectbuf.vim or
line 42: "     perforce.vim for examples.
line 43: "     There is also a test function called RunNotifyWindowCloseTest() that
line 44: "     demos the usage (you need to uncomment RunNotifyWindowCloseTest and
line 45: "     NotifyWindowCloseF functions).
line 46: "   - ShowLinesWithSyntax() function to echo lines with syntax coloring.
line 47: "   - ShiftWordInSpace(), CenterWordInSpace() and
line 48: "     AlignWordWithWordInPreviousLine() utility functions to move words in the
line 49: "     space without changing the width of the field. A GetSpacer() function to
line 50: "     return a spacer of specified width.
line 51: "   - A quick-sort functions QSort() that can sort a buffer contents by range
line 52: "     and QSort2() that can sort any arbitrary data and utility compare
line 53: "     methods.  Binary search functions BinSearchForInsert() and
line 54: "     BinSearchForInsert2() to find the location for a newline to be inserted
line 55: "     in an already sorted buffer or arbitrary data.
line 56: "   - ExecMap function has now been separated as a plugin called execmap.vim.
line 57: "   - A sample function to extract the scriptId of a script.
line 58: "   - New CommonPath() function to extract the common part of two paths, and
line 59: "     RelPathFromFile() and RelPathFromDir() to find relative paths (useful
line 60: "     HTML href's). A side effect is the CommonString() function to find the
line 61: "     common string of two strings.
line 62: "   - UnEscape() and DeEscape() functions to reverse and Escape() to compliment
line 63: "     what built-in escape() does. There is also an EscapeCommand() function
line 64: "     to escape external command strings.
line 65: "   - Utility functions CurLineHasSign() and ClearAllSigns() to fill in the
line 66: "     gaps left by Vim.
line 67: "   - GetVimCmdOutput() function to capture the output of Vim built-in
line 68: "     commands, in a safe manner.
line 69: "   - OptClearBuffer() function to clear the contents and undo history of the
line 70: "     current buffer in an optimal manner. Ideal to be used when plugins need
line 71: "     to refresh their windows and don't care about preserving the current
line 72: "     contents (which is the most usual case).
line 73: "   - GetPreviewWinnr() function.
line 74: "   - Functions to have persistent data, PutPersistentVar() and
line 75: "     GetPersistentVar(). You don't need to worry about saving in files and
line 76: "     reading them back. To disable, set g:genutilsNoPersist in your vimrc.
line 77: "   - A function to emulate the default Vim behavior for |timestamp| changes.
line 78: "     It also provides hooks to get call backs before and after handling the
line 79: "     default FileChangedShell autocommand (effectively splitting it into a
line 80: "     Pre and a Post event). Suggested usage is to use AddToFCShellPre() or
line 81: "     AddToFCShell() and either install a default event handling mechanism for
line 82: "     all files by calling DefFCShellInstall() or create your own autocommand on
line 83: "     a matching pattern to call DefFileChangedShell() function. Most useful
line 84: "     for the source control plugins to conditionally reload a file, while
line 85: "     being able to default to the Vim's standard behavior of asking the user.
line 86: "     See perforce.vim for usage examples.
line 87: "
line 88: " Function Prototypes:
line 89: "     The types in prototypes of the functions mimic Java.
line 90: "     This is just a full list for a quick reference, see
line 91: "       "Documentation With Function Prototypes" for more information on the
line 92: "       functions.
line 93: "
line 94: " String  MakeArgumentString(...)
line 95: " String  MakeArgumentList(...)
line 96: " String  CreateArgString(String argList, String sep, ...)
line 97: " void    DebugShowArgs(...)
line 98: " String  ExtractFuncListing(String funcName, String hLines, String tLines)
line 99: " int     NumberOfWindows()
line 100: " int     FindBufferForName(String fileName)
line 101: " String  GetBufNameForAu(String bufName)
line 102: " void    MoveCursorToWindow(int winno)
line 103: " void    MoveCurLineToWinLine(int winLine)
line 104: " void    CloseWindow(int winnr, boolean force)
line 105: " void    MarkActiveWindow()
line 106: " void    RestoreActiveWindow()
line 107: " void    IsOnlyVerticalWindow()
line 108: " void    IsOnlyHorizontalWindow()
line 109: " int     GetNextWinnrInStack(char dir)
line 110: " int     GetLastWinnrInStack(char dir)
line 111: " void    MoveCursorToNextInWinStack(char dir)
line 112: " void    MoveCursorToLastInWinStack(char dir)
line 113: " void    OpenWinNoEa(String openWinCmd)
line 114: " void    CloseWinNoEa(int winnr, boolean force)
line 115: " void    SetupScratchBuffer()
line 116: " void    CleanDiffOptions()
line 117: " boolean ArrayVarExists(String varName, int index)
line 118: " void    MapAppendCascaded(String lhs, String rhs, String mapMode)
line 119: " void    SaveWindowSettings()
line 120: " void    RestoreWindowSettings()
line 121: " void    ResetWindowSettings()
line 122: " void    SaveWindowSettings2(String sid, boolean overwrite)
line 123: " void    RestoreWindowSettings2(String scripid)
line 124: " void    ResetWindowSettings2(String scripid)
line 125: " void    SaveVisualSelection(String scripid)
line 126: " void    RestoreVisualSelection(String scripid)
line 127: " void    SaveSoftPosition(String scriptid)
line 128: " void    RestoreSoftPosition(String scriptid)
line 129: " void    ResetSoftPosition(String scriptid)
line 130: " void    SaveHardPosition(String scriptid)
line 131: " void    RestoreHardPosition(String scriptid)
line 132: " void    ResetHardPosition(String scriptid)
line 133: " int     GetLinePosition(String scriptid)
line 134: " int     GetColPosition(String scriptid)
line 135: " boolean IsPositionSet(String scriptid)
line 136: " String  CleanupFileName(String fileName)
line 137: " boolean OnMS()
line 138: " boolean PathIsAbsolute(String path)
line 139: " boolean PathIsFileNameOnly(String path)
line 140: " void    AddNotifyWindowClose(String windowTitle, String functionName)
line 141: " void    RemoveNotifyWindowClose(String windowTitle)
line 142: " void    CheckWindowClose()
line 143: " void    ShowLinesWithSyntax() range
line 144: " void    ShiftWordInSpace(int direction)
line 145: " void    CenterWordInSpace()
line 146: " void    QSort(String cmp, int direction) range
line 147: " void    QSort2(int start, int end, String cmp, int direction,
line 148: "                String accessor, String swapper, String context)
line 149: " int     BinSearchForInsert(int start, int end, String line, String cmp,
line 150: "                            int direction)
line 151: " int     BinSearchForInsert2(int start, int end, line, String cmp,
line 152: "                             int direction, String accessor, String context)
line 153: " void    BinInsertSort(String cmp, int direction) range
line 154: " void    BinInsertSort2(int start, int end, String cmp, int direction,
line 155: "                String accessor, String mover, String context)
line 156: " String  CommonPath(String path1, String path2)
line 157: " String  CommonString(String str1, String str2)
line 158: " String  RelPathFromFile(String srcFile, String tgtFile)
line 159: " String  RelPathFromDir(String srcDir, String tgtFile)
line 160: " String  Roman2Decimal(String str)
line 161: " String  Escape(String str, String chars)
line 162: " String  UnEscape(String str, String chars)
line 163: " String  DeEscape(String str)
line 164: " String  EscapeCommand(String cmd, String args, String pipe)
line 165: " int     GetShellEnvType()
line 166: " String  ExpandStr(String str)
line 167: " String  QuoteStr(String str)
line 168: " boolean CurLineHasSign()
line 169: " void    ClearAllSigns()
line 170: " String  UserFileComplete(String ArgLead, String CmdLine, String CursorPos,
line 171: "                          String smartSlash, String searchPath)
line 172: " String  UserFileExpand(String fileArgs)
line 173: " String  GetVimCmdOutput(String cmd)
line 174: " void    OptClearBuffer()
line 175: " int     GetPreviewWinnr()
line 176: " void    PutPersistentVar(String pluginName, String persistentVar,
line 177: "                          String value)
line 178: " void    GetPersistentVar(String pluginName, String persistentVar,
line 179: "                          String default)
line 180: " void    AddToFCShellPre(String funcName)
line 181: " void    RemoveFromFCShellPre(String funcName)
line 182: " void    AddToFCShell(String funcName)
line 183: " void    RemoveFromFCShell(String funcName)
line 184: " void    DefFCShellInstall()
line 185: " void    DefFCShellUninstall()
line 186: " boolean DefFileChangedShell()
line 187: " void    SilentSubstitute(String pat, String cmd)
line 188: " void    SilentDelete(String pat)
line 189: " void    SilentDelete(String range, String pat)
line 190: " String  GetSpacer(int width)
line 191: "
line 192: " Documentation With Function Prototypes:
line 193: " -----------------------
line 194: " Execute the function return value to create a local variable called
line 195: "   'argumentString' containsing all your variable number of arguments that
line 196: "   are passed to your function, such a way that it can be passed further down
line 197: "   to another function as arguments.
line 198: " Uses __argCounter and __nextArg local variables, so make sure you don't have
line 199: "   variables with the same name in your function. If you want to change the
line 200: "   name of the resultant variable from the default 'argumentString' to
line 201: "   something else, you can pass the new name as an argument.
line 202: " Ex:
line 203: "   fu! s:IF(...)
line 204: "     exec MakeArgumentString()
line 205: "     exec "call Impl(1, " . argumentString . ")"
line 206: "   endfu
line 207: "
line 208: " String  MakeArgumentString(...)
line 209: " -----------------------
line 210: " Execute the function return value to create a local variable called
line 211: "   'argumentList' containsing all your variable number of arguments that
line 212: "   are passed to your function, such a way that it can manipulated as an
line 213: "   array list separated by commas before passing further down to another
line 214: "   function as arguments. Once manipulated, the string can be passed to
line 215: "   CreateArgString() function to make an argument string which can be
line 216: "   used just like the 'argumentString' as mentioned in the documentation on
line 217: "   MakeArgumentString(). To manipulate 'argumentList' you can use
line 218: "   multvals.vim script.
line 219: " Unlike MakeArgumentString(), this doesn't preserve the argument types
line 220: "   (string vs number).
line 221: " Uses __argCounter and __argSeparator local variables, so make sure you don't
line 222: "   have variables with the same name in your function. You can change the
line 223: "   name of the resultant variable from the default 'argumentList' to
line 224: "   something else, by passing the new name as the first argument. You can
line 225: "   also pass in a second optional argument which is used as the argument
line 226: "   separator instead of the default ','. You need to make sure that the
line 227: "   separator string itself can't occur as part of arguments, or use a
line 228: "   sequence of characters that is hard to occur, as separator.
line 229: " Ex: 
line 230: "   fu! s:IF(...)
line 231: "     exec MakeArgumentList()
line 232: "     exec "call Impl(1, " . CreateArgString(argumentList, ',') . ")"
line 233: "   endfu
line 234: "
line 235: " String  MakeArgumentList(...)
line 236: " -----------------------
line 237: " Useful to collect arguments into a soft-array (see multvals on vim.sf.net)
line 238: "   and then pass them to a function later.
line 239: " You should make sure that the separator itself doesn't exist in the
line 240: "   arguments. You can use the return value same as the way argumentString
line 241: "   created by the "exec g:makeArgumentString" above is used. If the separator
line 242: "   is a pattern, you should pass in an optional additional argument, which
line 243: "   is an arbitrary string that is guaranteed to match the pattern, as a
line 244: "   sample separator (see multvals.vim for details).
line 245: " Usage:
line 246: "     let args = 'a b c' 
line 247: "     exec "call F(" . CreateArgString(args, ' ') . ")"
line 248: "
line 249: " String  CreateArgString(String argList, String sep, ...)
line 250: " -----------------------
line 251: " Useful function to debug passing arguments to functions. See exactly what
line 252: "   you would receive on the other side.
line 253: " Ex: :exec 'call DebugShowArgs('. CreateArgString("a 'b' c", ' ') . ')' 
line 254: "
line 255: " void    DebugShowArgs(...)
line 256: " -----------------------
line 257: " This function returns the body of the specified function ( the name should be
line 258: "   complete, including any scriptid prefix in case of a script local
line 259: "   function), without the function header and tail. You can also pass in the
line 260: "   number of additional lines to be removed from the head and or tail of the
line 261: "   function.
line 262: "
line 263: " String  ExtractFuncListing(String funcName, String hLines, String tLines)
line 264: " -----------------------
line 265: " -----------------------
line 266: " Return the number of windows open currently.
line 267: "
line 268: " int     NumberOfWindows()
line 269: " -----------------------
line 270: " Returns the buffer number of the given fileName if it is already loaded.
line 271: " The fileName argument is treated literally, unlike the bufnr() which treats
line 272: "   the argument as a filename-pattern. The function first escape all the
line 273: "   |filename-pattern| characters before passing it to bufnr(). It should work
line 274: "   in most of the cases, except when backslashes are used in non-windows
line 275: "   platforms, when the result could be unpredictable.
line 276: "
line 277: " Note: The function removes protections for "#%" characters because, these
line 278: "   are special characters on Vim commandline, and so are usually escaped
line 279: "   themselves, but bufnr() wouldn't like them.
line 280: "
line 281: " int     FindBufferForName(String fileName)
line 282: " -----------------------
line 283: " Returns the transformed buffer name that is suitable to be used in
line 284: "   autocommands.
line 285: "
line 286: " String  GetBufNameForAu(String bufName)
line 287: " -----------------------
line 288: " Given the window number, moves the cursor to that window.
line 289: "
line 290: " void    MoveCursorToWindow(int winno)
line 291: " -----------------------
line 292: " Moves the current line such that it is going to be the nth line in the window
line 293: "   without changing the column position.
line 294: "
line 295: " void    MoveCurLineToWinLine(int winLine)
line 296: " -----------------------
line 297: " Closes the given window and returns to the original window. It the simplest,
line 298: " this is equivalent to:
line 299: "
line 300: "   let curWin = winnr()
line 301: "   exec winnr 'wincmd w'
line 302: "   close
line 303: "   exec curWin 'wincmd w'
line 304: "
line 305: " But the function keeps track of the change in window numbers and restores
line 306: " the current window correctly. It also restores the previous window (the
line 307: " window that the cursor would jump to when executing "wincmd p" command).
line 308: " This is something that all plugins should do while moving around in the
line 309: " windows, behind the scenes.
line 310: "
line 311: " Pass 1 to force closing the window (:close!).
line 312: "
line 313: " void    CloseWindow(int winnr, boolean force)
line 314: " -----------------------
line 315: " Remembers the number of the current window as well as the previous-window
line 316: " (the one the cursor would jump to when executing "wincmd p" command). To
line 317: " determine the window number of the previous-window, the function temporarily
line 318: " jumps to the previous-window, so if your script intends to avoid generating
line 319: " unnecessary window events, consider disabling window events before calling
line 320: " this function (see :h 'eventignore').
line 321: "
line 322: " void    MarkActiveWindow()
line 323: " -----------------------
line 324: " Restore the cursor to the window that was previously marked as "active", as
line 325: " well as its previous-window (the one the cursor would jump to when executing
line 326: " "wincmd p" command). To restore the window number of the previous-window,
line 327: " the function temporarily jumps to the previous-window, so if your script
line 328: " intends to avoid generating unnecessary window events, consider disabling
line 329: " window events before calling this function (see :h 'eventignore').
line 330: "
line 331: " void    RestoreActiveWindow()
line 332: " -----------------------
line 333: " Returns 1 if the current window is the only window vertically.
line 334: "
line 335: " void    IsOnlyVerticalWindow()
line 336: " -----------------------
line 337: " Returns 1 if the current window is the only window horizontally.
line 338: "
line 339: " void    IsOnlyHorizontalWindow()
line 340: " -----------------------
line 341: " Returns the window number of the next window while remaining in the same
line 342: "   horizontal or vertical window stack (or 0 when there are no more). Pass
line 343: "   hjkl characters to indicate direction.
line 344: "   Usage:
line 345: "     let wn = GetNextWinnrInStack('h') left  window number in stack.
line 346: "     let wn = GetNextWinnrInStack('l') right window number in stack.
line 347: "     let wn = GetNextWinnrInStack('j') upper window number in stack.
line 348: "     let wn = GetNextWinnrInStack('k') lower window number in stack.
line 349: "
line 350: " int     GetNextWinnrInStack(char dir)
line 351: " -----------------------
line 352: " Returns the window number of the last window while remaining in the same
line 353: "   horizontal or vertical window stack (or 0 when there are no more, or it is
line 354: "   already the last window). Pass hjkl characters to indicate direction.
line 355: "   Usage:
line 356: "     let wn = GetLastWinnrInStack('h') leftmost  window number in stack.
line 357: "     let wn = GetLastWinnrInStack('l') rightmost window number in stack.
line 358: "     let wn = GetLastWinnrInStack('j') top       window number in stack.
line 359: "     let wn = GetLastWinnrInStack('k') bottom    window number in stack.
line 360: "
line 361: " int     GetLastWinnrInStack(char dir)
line 362: " -----------------------
line 363: " Move cursor to the next window in stack. See GetNextWinnrInStack() for more
line 364: "   information.
line 365: "
line 366: " void    MoveCursorToNextInWinStack(char dir)
line 367: " -----------------------
line 368: " Move cursor to the last window in stack. See GetLastWinnrInStack() for more
line 369: "   information.
line 370: "
line 371: " void    MoveCursorToLastInWinStack(char dir)
line 372: " -----------------------
line 373: " This function, which stands for "execute the given command that creates a
line 374: "   window, while disabling the 'equalalways' setting", is a means for plugins
line 375: "   to create new windows without disturbing the existing window dimensions as
line 376: "   much as possible. This function would not be required if 'equalalways' is
line 377: "   not set by the user. Even if set, the below code, though intuitive,
line 378: "   wouldn't work:
line 379: "       let _equalalways = &equalalways
line 380: "       set noequalalways
line 381: "       " open window now.
line 382: "       let &equalalways = _equalalways
line 383: "
line 384: " The problem is that while restoring the value of equalalways, if the user
line 385: "   originally had it set, Vim would immediately try to equalize all the
line 386: "   window dimensions, which is exactly what we tried to avoid by setting
line 387: "   'noequalalways'. The function works around the problem by temporarily
line 388: "   setting 'winfixheight' in all the existing windows and restoring them
line 389: "   after done.
line 390: "   Usage:
line 391: "     call OpenWinNoEa('sb ' pluginBuf)
line 392: "
line 393: " Note: The function doesn't catch any exceptions that are generated by the
line 394: "   operations, so it is advisable to catch them by the caller itself.
line 395: "
line 396: " void    OpenWinNoEa(String openWinCmd)
line 397: " -----------------------
line 398: " This is for the same purpose as described for OpenWinNoEa() function, except
line 399: "   that it is used to close a given window. This is just a convenience
line 400: "   function.
line 401: "
line 402: " void    CloseWinNoEa(int winnr, boolean force)
line 403: " -----------------------
line 404: " Turn on some buffer settings that make it suitable to be a scratch buffer.
line 405: "
line 406: " void    SetupScratchBuffer()
line 407: " -----------------------
line 408: " Turns off those options that are set by diff to the current window.
line 409: "   Also removes the 'hor' option from scrollopt (which is a global option).
line 410: " Better alternative would be to close the window and reopen the buffer in a
line 411: "   new window. 
line 412: "
line 413: " void    CleanDiffOptions()
line 414: " -----------------------
line 415: " This function is an alternative to exists() function, for those odd array
line 416: "   index names for which the built-in function fails. The var should be
line 417: "   accessible to this functions, so it shouldn't be a local or script local
line 418: "   variable.
line 419: "     if ArrayVarExists("array", id)
line 420: "       let val = array{id}
line 421: "     endif
line 422: "
line 423: " boolean ArrayVarExists(String varName, int index)
line 424: " -----------------------
line 425: " If lhs is already mapped, this function makes sure rhs is appended to it
line 426: "   instead of overwriting it. If you are rhs has any script local functions,
line 427: "   make sure you use the <SNR>\d\+_ prefix instead of the <SID> prefix (or the
line 428: "   <SID> will be replaced by the SNR number of genutils script, instead of
line 429: "   yours).
line 430: " mapMode is used to prefix to "oremap" and used as the map command. E.g., if
line 431: "   mapMode is 'n', then the function call results in the execution of noremap
line 432: "   command.
line 433: "
line 434: " void    MapAppendCascaded(String lhs, String rhs, String mapMode)
line 435: " -----------------------
line 436: " -----------------------
line 437: " Saves the heights and widths of the currently open windows for restoring
line 438: "   later.
line 439: "
line 440: " void    SaveWindowSettings()
line 441: " -----------------------
line 442: " Restores the heights of the windows from the information that is saved by
line 443: "  SaveWindowSettings(). Works only when the number of windows haven't changed
line 444: "  since the SaveWindowSettings is called.
line 445: "
line 446: " void    RestoreWindowSettings()
line 447: " -----------------------
line 448: " Reset the previously saved window settings using SaveWindowSettings.
line 449: "
line 450: " void    ResetWindowSettings()
line 451: " -----------------------
line 452: " Same as SaveWindowSettings, but uses the passed in scriptid to create a
line 453: "   private copy for the calling script. Pass in a unique scriptid to avoid
line 454: "   conflicting with other callers. If overwrite is zero and if the settings
line 455: "   are already stored for the passed in sid, it will overwrite previously
line 456: "   saved settings.
line 457: "
line 458: " void    SaveWindowSettings2(String sid, boolean overwrite)
line 459: " -----------------------
line 460: " Same as RestoreWindowSettings, but uses the passed in scriptid to get the
line 461: "   settings. The settings must have been previously saved using this
line 462: "   scriptid. Call ResetWindowSettings2() to explicitly reset the saved
line 463: "   settings.
line 464: "
line 465: " void    RestoreWindowSettings2(String scripid)
line 466: " -----------------------
line 467: " Reset the previously saved window settings using SaveWindowSettings2.
line 468: "   Releases the variables.
line 469: "
line 470: " void    ResetWindowSettings2(String scripid)
line 471: " -----------------------
line 472: " -----------------------
line 473: " Save the current/last visual selection such that it can be later restored
line 474: "   using RestoreVisualSelection(). Pass a unique scripid such that it will
line 475: "   not interfere with the other callers to this function. Saved selections
line 476: "   are not associated with the window so you can later restore the selection
line 477: "   in any window, provided there are enough lines/columns.
line 478: "
line 479: " void    SaveVisualSelection(String scripid)
line 480: " -----------------------
line 481: " Restore the visual selection that was previuosly saved using
line 482: "   SaveVisualSelection().
line 483: "
line 484: " void    RestoreVisualSelection(String scripid)
line 485: " -----------------------
line 486: " -----------------------
line 487: " This method tries to save the hard position along with the line context This
line 488: "   is like the vim builtin marker. Pass in a unique scriptid to avoid
line 489: "   conflicting with other callers.
line 490: "
line 491: " void    SaveSoftPosition(String scriptid)
line 492: " -----------------------
line 493: " Restore the cursor position using the information saved by the previous call
line 494: "   to SaveSoftPosition. This first calls RestoreHardPosition() and then
line 495: "   searches for the original line first in the forward direction and then in
line 496: "   the backward and positions the cursor on the line if found. If the
line 497: "   original line is not found it still behaves like a call to
line 498: "   RestoreHardPosition. This is similar to the functionality of the built-in
line 499: "   marker, as Vim is capable of maintaining the marker even when the line is
line 500: "   moved up or down. However, if there are identical lines in the buffer and
line 501: "   the original line has moved, this function might get confused.
line 502: "
line 503: " void    RestoreSoftPosition(String scriptid)
line 504: " -----------------------
line 505: " Reset the previously cursor position using SaveSoftPosition. Releases the
line 506: "   variables.
line 507: "
line 508: " void    ResetSoftPosition(String scriptid)
line 509: " -----------------------
line 510: " Useful when you want to go to the exact (line, col), but marking will not
line 511: "   work, or if you simply don't want to disturb the marks. Pass in a unique
line 512: "   scriptid.
line 513: "
line 514: " void    SaveHardPosition(String scriptid)
line 515: " -----------------------
line 516: " Restore the cursor position using the information saved by the previous call
line 517: "   to SaveHardPosition. 
line 518: "
line 519: " void    RestoreHardPosition(String scriptid)
line 520: " -----------------------
line 521: " Reset the previously cursor position using SaveHardPosition. Releases the
line 522: "   variables.
line 523: "
line 524: " void    ResetHardPosition(String scriptid)
line 525: " -----------------------
line 526: " Return the line number of the previously saved position for the scriptid.
line 527: "   This is like calling line() builtin function for a mark.
line 528: "
line 529: " int     GetLinePosition(String scriptid)
line 530: " -----------------------
line 531: " Return the column number of the previously saved position for the scriptid.
line 532: "   This is like calling col() builtin function for a mark.
line 533: "
line 534: " int     GetColPosition(String scriptid)
line 535: " -----------------------
line 536: " A convenience function to check if a position has been saved (and not reset)
line 537: "   using the scriptid given.
line 538: "
line 539: " boolean IsPositionSet(String scriptid)
line 540: " -----------------------
line 541: " -----------------------
line 542: " Cleanup file name such that two *cleaned up* file names are easy to be
line 543: "   compared. This probably works only on windows and unix platforms. Also
line 544: "   recognizes UNC paths. Always returns paths with forward slashes only,
line 545: "   irrespective of what your 'shellslash' setting is. The return path will
line 546: "   always be a valid path for use in Vim, provided the original path itself
line 547: "   was valid for the platform (a valid cygwin path after the cleanup will
line 548: "   still be valid in a cygwin vim).
line 549: "
line 550: " String  CleanupFileName(String fileName)
line 551: " -----------------------
line 552: " Returns true if the current OS is any of the Microsoft OSes. Most useful to
line 553: "   know if the path separator is "\".
line 554: "
line 555: " boolean OnMS()
line 556: " -----------------------
line 557: " Returns true if the given path could be an absolute path. Probably works
line 558: "   only on Unix and Windows platforms.
line 559: "
line 560: " boolean PathIsAbsolute(String path)
line 561: " -----------------------
line 562: " Returns true if the given path doesn't have any directory components.
line 563: "   Probably works only on Unix and Windows platforms.
line 564: "
line 565: " boolean PathIsFileNameOnly(String path)
line 566: " -----------------------
line 567: " -----------------------
line 568: " Add a notification to know when a buffer with the given name (referred to as
line 569: "   windowTitle) is no longer visible in any window. This by functionality is
line 570: "   like a BufWinLeavePost event. The function functionName is called back
line 571: "   with the title (buffer name) as an argument. The notification gets removed
line 572: "   after excuting it, so for future notifications, you need to reregister
line 573: "   your function. You can only have one notification for any buffer. The
line 574: "   function should be accessible from the script's local context.
line 575: "
line 576: " void    AddNotifyWindowClose(String windowTitle, String functionName)
line 577: " -----------------------
line 578: " Remove the notification previously added using AddNotifyWindowClose
line 579: "   function.
line 580: "
line 581: " void    RemoveNotifyWindowClose(String windowTitle)
line 582: " -----------------------
line 583: " Normally the plugin checks for closed windows for every WinEnter event, but
line 584: "   you can force a check at anytime by calling this function.
line 585: "
line 586: " void    CheckWindowClose()
line 587: " -----------------------
line 588: " -----------------------
line 589: " Displays the given line(s) from the current file in the command area (i.e.,
line 590: "   echo), using that line's syntax highlighting (i.e., WYSIWYG).  If no line
line 591: "   number is given, display the current line.
line 592: " Originally,
line 593: "   From: Gary Holloway "gary at castandcrew dot com"
line 594: "   Date: Wed, 16 Jan 2002 14:31:56 -0800
line 595: "
line 596: " void    ShowLinesWithSyntax() range
line 597: " -----------------------
line 598: " This function shifts the current word in the space without changing the
line 599: "   column position of the next word. Doesn't work for tabs.
line 600: "
line 601: " void    ShiftWordInSpace(int direction)
line 602: " -----------------------
line 603: " This function centers the current word in the space without changing the
line 604: "   column position of the next word. Doesn't work for tabs.
line 605: " 
line 606: " void    CenterWordInSpace()
line 607: " -----------------------
line 608: " -----------------------
line 609: " Sorts a range of lines in the current buffer, in the given range, using the
line 610: "   comparator that is passed in. The comparator function should accept the
line 611: "   two lines that needs to be compared and the direction as arguments and
line 612: "   return -1, 0 or 1. Pass 1 or -1 for direction to mean asending or
line 613: "   descending order. The function should be accessible from the script's
line 614: "   local context. The plugin also defines the following comparators that you
line 615: "   can use: CmpByString, CmpByStringIgnoreCase, CmpByNumber,
line 616: "            CmpByLength, CmpByLineLengthNname, CmpJavaImports
line 617: "
line 618: " void    QSort(String cmp, int direction) range
line 619: " -----------------------
line 620: " This is a more generic version of QSort, that will let you provide your own
line 621: "   accessor and swapper, so that you can extend the sorting to something
line 622: "   beyond the current buffer lines. See multvals.vim plugin for example
line 623: "   usage.
line 624: "
line 625: " The swapper is called with the two indices that need to be swapped, along
line 626: " with the context, something like this:
line 627: "     function! CustomSwapper(ind1, ind2, context)
line 628: "
line 629: " This is based up on the sort functions given as part of examples in the
line 630: "   eval.txt file, however this rectifies a bug in the original algorithm and
line 631: "   makes it generic too.
line 632: "
line 633: " void    QSort2(int start, int end, String cmp, int direction,
line 634: "                String accessor, String swapper, String context)
line 635: " -----------------------
line 636: " Return the line number where given line can be inserted in the current
line 637: "   buffer. This can also be interpreted as the line in the current buffer
line 638: "   after which the new line should go.
line 639: " Assumes that the lines are already sorted in the given direction using the
line 640: "   given comparator.
line 641: "
line 642: " int     BinSearchForInsert(int start, int end, String line, String cmp,
line 643: "                            int direction)
line 644: " -----------------------
line 645: " A more generic implementation of BinSearchForInsert, which doesn't restrict
line 646: "   the search to the current buffer.
line 647: "
line 648: " int     BinSearchForInsert2(int start, int end, line, String cmp,
line 649: "                             int direction, String accessor, String context)
line 650: " -----------------------
line 651: " Sorts a range of lines in the current buffer, in the given range, using the
line 652: "   comparator that is passed in. This function is just like QSort(), except
line 653: "   that it uses Peit Delport's "binary insertion sort" algorithm, which is
line 654: "   generally much faster than the "quick sort" algorithm.
line 655: "
line 656: " void    BinInsertSort(String cmp, int direction) range
line 657: " -----------------------
line 658: " This is a more generic version of BinInsertSort, just like QSort2, that will
line 659: "   let you provide your own accessor and mover, so that you can extend the
line 660: "   sorting to something beyond the current buffer lines. See multvals.vim
line 661: "   plugin for example usage.
line 662: "
line 663: " The mover is called with the index that needs to be moved and the
line 664: "   destination index to which it needs to be moved, along with the context,
line 665: "   something like this:
line 666: "     function! CustomMover(from, to, context)
line 667: "
line 668: " void    BinInsertSort2(int start, int end, String cmp, int direction,
line 669: "                String accessor, String mover, String context)
line 670: " -----------------------
line 671: " -----------------------
line 672: " Find common path component of two filenames.
line 673: "   Based on the thread, "computing relative path".
line 674: "   Date: Mon, 29 Jul 2002 21:30:56 +0200 (CEST)
line 675: " Ex:
line 676: "   CommonPath('/a/b/c/d.e', '/a/b/f/g/h.i') => '/a/b/'
line 677: "
line 678: " String  CommonPath(String path1, String path2)
line 679: " -----------------------
line 680: " Find common string component of two strings.
line 681: "   Based on the tread, "computing relative path".
line 682: "   Date: Mon, 29 Jul 2002 21:30:56 +0200 (CEST)
line 683: " Ex:
line 684: "   CommonString('abcde', 'abfghi') => 'ab'
line 685: "
line 686: " String  CommonString(String str1, String str2)
line 687: " -----------------------
line 688: " Find the relative path of tgtFile from the directory of srcFile.
line 689: "   Based on the tread, "computing relative path".
line 690: "   Date: Mon, 29 Jul 2002 21:30:56 +0200 (CEST)
line 691: " Ex:
line 692: "   RelPathFromFile('/a/b/c/d.html', '/a/b/e/f.html') => '../f/g.html'
line 693: "
line 694: " String  RelPathFromFile(String srcFile, String tgtFile)
line 695: " -----------------------
line 696: " Find the relative path of tgtFile from the srcDir.
line 697: "   Based on the tread, "computing relative path".
line 698: "   Date: Mon, 29 Jul 2002 21:30:56 +0200 (CEST)
line 699: " Ex:
line 700: "   RelPathFromDir('/a/b/c/d', '/a/b/e/f/g.html') => '../../e/f/g.html'
line 701: "
line 702: " String  RelPathFromDir(String srcDir, String tgtFile)
line 703: " -----------------------
line 704: " -----------------------
line 705: " Convert Roman numerals to decimal. Doesn't detect format errors.
line 706: " Originally,
line 707: "   From: "Preben Peppe Guldberg" <c928400@student.dtu.dk>
line 708: "   Date: Fri, 10 May 2002 14:28:19 +0200
line 709: "
line 710: " String  Roman2Decimal(String str)
line 711: " -----------------------
line 712: " -----------------------
line 713: " Works like the built-in escape(), except that it escapes the specified
line 714: "   characters only if they are not already escaped, so something like
line 715: "   Escape('a\bc\\bd', 'b') would give 'a\bc\\\bd'. The chars value directly
line 716: "   goes into the [] collection, so it can be anything that is accepted in [].
line 717: "
line 718: " String  Escape(String str, String chars)
line 719: " -----------------------
line 720: " Works like the reverse of the builtin escape() function, but un-escapes the
line 721: "   specified characters only if they are already escaped (essentially the
line 722: "   opposite of Escape()). The chars value directly goes into the []
line 723: "   collection, so it can be anything that is acceptable to [].
line 724: "
line 725: " String  UnEscape(String str, String chars)
line 726: " -----------------------
line 727: " Works like the reverse of the built-in escape() function. De-escapes all the
line 728: "   escaped characters. Essentially removes one level of escaping from the
line 729: "   string, so something like: 'a\b\\\\c\\d' would become 'ab\\c\d'.
line 730: "
line 731: " String  DeEscape(String str)
line 732: " ----------------------- 
line 733: " Escape the passed in shell command with quotes and backslashes such a way
line 734: "   that the arguments reach the command literally (avoids shell
line 735: "   interpretations). See the function header for the kind of escapings that
line 736: "   are done. The first argument is the actual command name, the second
line 737: "   argument is the arguments to the command and third argument is any pipe
line 738: "   command that should be appended to the command. The reason the function
line 739: "   requires them to be passed separately is that the escaping is minimized
line 740: "   for the first and third arguments. It understand the protected spaces in
line 741: "   the arguments.
line 742: "   Usage:
line 743: "     let fullCmd = EscapeCommand('ls', '-u '.expand('%:h'), '| grep xxx')
line 744: "   Note:
line 745: "     If the escaped command is used on Vim command-line (such as with ":w !",
line 746: "     ":r !" and ":!"), you need to further protect '%', '#' and '!' chars,
line 747: "     even if they are in quotes, to avoid getting expanded by Vim before
line 748: "     invoking external cmd. However this is not required for using it with
line 749: "     system() function. The easiest way to escape them is by using the
line 750: "     Escape() function as in "Escape(fullCmd, '%#!')".
line 751: " String  EscapeCommand(String cmd, String args, String pipe)
line 752: " -----------------------
line 753: " Returns the global ST_* constants (g:ST_WIN_CMD, g:ST_WIN_SH, g:ST_UNIX)
line 754: " based on the values of shell related settings and the OS on which Vim is
line 755: " running.
line 756: "
line 757: " int     GetShellEnvType()
line 758: " -----------------------
line 759: "
line 760: " Expands the string for the special characters. The return value should
line 761: "   essentially be what you would see if it was a string constant with
line 762: "   double-quotes.
line 763: " Ex:
line 764: "   ExpandStr('a\tA') => 'a     A'
line 765: " String  ExpandStr(String str)
line 766: " -----------------------
line 767: " Quotes the passed in string such that it can be used as a string expression
line 768: " in :execute. It sorrounds the passed in string with single-quotes while
line 769: " escaping any existing single-quotes in the string.
line 770: "
line 771: " String  QuoteStr(String str)
line 772: " -----------------------
line 773: " -----------------------
line 774: " Returns true if the current line has a sign placed.
line 775: "
line 776: " boolean CurLineHasSign()
line 777: " -----------------------
line 778: " Clears all signs in the current buffer.
line 779: "
line 780: " void    ClearAllSigns()
line 781: " -----------------------
line 782: " -----------------------
line 783: " This function is suitable to be used by custom command completion functions
line 784: "   for expanding filenames conditionally. The function could based on the
line 785: "   context, decide whether to do a file completion or a different custom
line 786: "   completion. See breakpts.vim and perforce.vim for examples.
line 787: " If you pass non-zero value to smartSlash, the function decides to use
line 788: "   backslash or forwardslash as the path separator based on the user settings
line 789: "   and the ArgLead, but if you always want to use only forwardslash as the
line 790: "   path separator, then pass 0. If you pass in a comma separated list of
line 791: "   directories as searchPath, then the file expansion is limited to the files
line 792: "   under these directories. This means, you can implement your own commands
line 793: "   that don't expect the user to type in the full path name to the file
line 794: "   (e.g., if the user types in the command while in the explorer window, you
line 795: "   could assume that the path is relative to the directory being viewed). Most
line 796: "   useful with a single directory, but also useful in combination with vim
line 797: "   'runtimepath' in loading scripts etc. (see Runtime command in
line 798: "   breakpts.vim).
line 799: "
line 800: " String  UserFileComplete(String ArgLead, String CmdLine, String CursorPos,
line 801: "                          String smartSlash, String searchPath)
line 802: " -----------------------
line 803: " This is a convenience function to expand filename meta-sequences in the
line 804: "   given arguments just as Vim would have if given to a user-defined command
line 805: "   as arguments with completion mode set to "file". Useful
line 806: "   if you set the completion mode of your command to anything
line 807: "   other than the "file", and later conditionally expand arguments (for
line 808: "   characters such as % and # and other sequences such as #10 and <cword>)
line 809: "   after deciding which arguments represent filenames/patterns.
line 810: "
line 811: " String  UserFileExpand(String fileArgs)
line 812: " -----------------------
line 813: " This returns the output of the vim command as a string, without corrupting
line 814: "   any registers. Returns empty string on errors. Check for v:errmsg after
line 815: "   calling this function for any error messages.
line 816: "
line 817: " String  GetVimCmdOutput(String cmd)
line 818: " -----------------------
line 819: " Clear the contents of the current buffer in an optimum manner. For plugins
line 820: " that keep redrawing the contents of its buffer, executing "1,$d" or its
line 821: " equivalents result in overloading Vim's undo mechanism. Using this function
line 822: " avoids that problem.
line 823: "
line 824: " void    OptClearBuffer()
line 825: " -----------------------
line 826: " Returns the window number of the preview window if open or -1 if not.
line 827: " int     GetPreviewWinnr()
line 828: " -----------------------
line 829: " -----------------------
line 830: " These functions provide a persistent storage mechanism.
line 831: "
line 832: "     Example: Put the following in a file called t.vim in your plugin
line 833: "     directory and watch the magic. You can set new value using SetVar() and
line 834: "     see that it returns the same value across session when GetVar() is
line 835: "     called.
line 836: "     >>>>t.vim<<<<
line 837: "       au VimEnter * call LoadSettings()
line 838: "       au VimLeavePre * call SaveSettings()
line 839: "       
line 840: "       function! LoadSettings()
line 841: "         let s:tVar = GetPersistentVar("T", "tVar", "defVal")
line 842: "       endfunction
line 843: "       
line 844: "       function! SaveSettings()
line 845: "         call PutPersistentVar("T", "tVar", s:tVar)
line 846: "       endfunction
line 847: "       
line 848: "       function! SetVar(val)
line 849: "         let s:tVar = a:val
line 850: "       endfunction
line 851: "       
line 852: "       function! GetVar()
line 853: "         return s:tVar
line 854: "       endfunction
line 855: "     <<<<t.vim>>>>
line 856: "
line 857: " The pluginName and persistentVar have to be unique and are case insensitive.
line 858: "   Ideally called from your VimLeavePre autocommand handler of your plugin.
line 859: "   This simply creates a global variable which will be persisted by Vim
line 860: "   through viminfo. The variable can be read back in the next session by the
line 861: "   plugin using GetPersistentVar() function, ideally from your VimEnter
line 862: "   autocommand handler. The pluginName is to provide a name space for
line 863: "   different plugins, and avoid conflicts in using the same persistentVar
line 864: "   name.
line 865: " This feature uses the '!' option of viminfo, to avoid storing all the
line 866: "   temporary and other plugin specific global variables getting saved.
line 867: "
line 868: " void    PutPersistentVar(String pluginName, String persistentVar,
line 869: "                          String value)
line 870: " -----------------------
line 871: " Ideally called from VimEnter, this simply reads the value of the global
line 872: "   variable for the persistentVar that is saved in the viminfo in a previous
line 873: "   session using PutPersistentVar() and returns it (and default if the variable
line 874: "   is not found). It removes the variable from global space before returning
line 875: "   the value, so can be called only once. It also means that PutPersistentVar
line 876: "   should be called again in the next VimLeavePre if the variable continues
line 877: "   to be persisted.
line 878: "
line 879: " void    GetPersistentVar(String pluginName, String persistentVar,
line 880: "                          String default)
line 881: " -----------------------
line 882: " -----------------------
line 883: " These functions channel the FileChangedShell autocommand and extend it to
line 884: " create an additional fictitious FileChangedShellPre and FileChangedShellPost
line 885: " events.
line 886: "
line 887: " Add the given noarg function to the list of functions that need to be
line 888: "   notified before processing the FileChangedShell event. The function when
line 889: "   called can expand "<abuf>" or "<afile>" to get the details of the buffer
line 890: "   for which this autocommand got executed. It should return 0 to mean
line 891: "   noautoread and 1 to mean autoread the current buffer. It can also return
line 892: "   -1 to make its return value ignored and use default autoread mechanism
line 893: "   (which could still be overridden by the return value of other functions).
line 894: "   The return value of all the functions is ORed to determine the effective
line 895: "   autoread value.
line 896: "
line 897: " void    AddToFCShellPre(String funcName)
line 898: " -----------------------
line 899: " Remove the given function previously added by calling AddToFCShellPre.
line 900: "
line 901: " void    RemoveFromFCShellPre(String funcName)
line 902: " -----------------------
line 903: " Same as AddToFCShellPre except that the function is called after the event
line 904: "   is processed, so this is like a fictitious FileChangedShellPost event.
line 905: "
line 906: " void    AddToFCShell(String funcName)
line 907: " -----------------------
line 908: " Remove the given function previously added by calling AddToFCShell.
line 909: "
line 910: " void    RemoveFromFCShell(String funcName)
line 911: " -----------------------
line 912: " The plugin provides a default autocommand handler which can be installed
line 913: "   by calling this function. 
line 914: " 
line 915: " void    DefFCShellInstall()
line 916: " -----------------------
line 917: " Uninstall the default autocommand handler that was previously installed
line 918: "   using DefFCShellInstall. Calling this function may not actually result in
line 919: "   removing the handler, in case there are other callers still dependent on
line 920: "   it (which is kept track of by the number of times DefFCShellInstall has
line 921: "   been called).
line 922: "
line 923: " void    DefFCShellUninstall()
line 924: " -----------------------
line 925: " This function emulates the Vim's default behavior when a |timestamp| change
line 926: "   is detected. Register your functions by calling AddToFCShellPre or
line 927: "   AddToFCShell and have this function called during the FileChangedShell event
line 928: "   (or just install the default handler by calling DefFCShellInstall).
line 929: "   From your callbacks, return 1 to mean autoread, 0 to mean noautoread and
line 930: "   -1 to mean system default (or ignore). The return value of this method is
line 931: "   1 if the file was reloaded and 0 otherwise. The return value of all the
line 932: "   functions is ORed to determine the effective autoread value. See my
line 933: "   perforce plugin for usage example.
line 934: "
line 935: " boolean DefFileChangedShell()
line 936: " -----------------------
line 937: " Execute a substitute command silently and without corrupting the search
line 938: "   register.
line 939: " Ex:
line 940: "   To insert a tab infrontof all lines:
line 941: "         call SilentSubstitute('^', '%s//\t/e')
line 942: "   To remote all carriage returns at the line ending:
line 943: "         call SilentSubstitute("\<CR>$", '%s///e')
line 944: "
line 945: " void    SilentSubstitute(String pat, String cmd)
line 946: " -----------------------
line 947: " Delete all lines matching the given pattern silently and without corrupting
line 948: "   the search register. The range argument if passed should be a valid prefix
line 949: "   for the :global command.
line 950: " Ex:
line 951: "   To delete all lines that are empty:
line 952: "         call SilentDelete('^\s*$')
line 953: "   To delete all lines that are empty only in the range 10 to 100:
line 954: "         call SilentDelete('10,100', '^\s*$')
line 955: "
line 956: " void    SilentDelete(String pat)
line 957: " void    SilentDelete(String range, String pat)
line 958: " -----------------------
line 959: " Can return a spacer from 0 to 80 characters width.
line 960: "
line 961: " String  GetSpacer(int width)
line 962: " -----------------------
line 963: " -----------------------
line 964: " Deprecations:
line 965: "   - The g:makeArgumentString and g:makeArgumentList are obsolete and are
line 966: "     deprecated, please use MakeArgumentString() and MakeArgumentList()
line 967: "     instead.
line 968: "   - FindWindowForBuffer() function is now deprecated, as the corresponding
line 969: "     Vim bugs are fixed. Use the below expr instead:
line 970: "       bufwinnr(FindBufferForName(fileName))
line 971: "
line 972: " Sample Usages Or Tips:
line 973: "   - Add the following command to your vimrc to turn off diff settings.
line 974: "       command! DiffOff :call CleanDiffOptions()
line 975: "       
line 976: "   - Add the following commands to create simple sort commands.
line 977: "       command! -nargs=0 -range=% SortByLength <line1>,<line2>call QSort(
line 978: "           \ 'CmpByLineLengthNname', 1)
line 979: "       command! -nargs=0 -range=% RSortByLength <line1>,<line2>call QSort(
line 980: "           \ 'CmpByLineLengthNname', -1)
line 981: "       command! -nargs=0 -range=% SortJavaImports <line1>,<line2>call QSort(
line 982: "           \ 'CmpJavaImports', 1)
line 983: "
line 984: "   - You might like the following mappings to adjust spacing:
line 985: "       nnoremap <silent> <C-Space> :call ShiftWordInSpace(1)<CR>
line 986: "       nnoremap <silent> <C-BS> :call ShiftWordInSpace(-1)<CR>
line 987: "       nnoremap <silent> \cw :call CenterWordInSpace()<CR>
line 988: "       nnoremap <silent> \va :call AlignWordWithWordInPreviousLine()<CR>
line 989: "
line 990: "   - The :find command is very useful to search for a file in path, but it
line 991: "     doesn't support file completion. Add the following command in your vimrc
line 992: "     to add this functionality:
line 993: "       command! -nargs=1 -bang -complete=custom,<SID>PathComplete FindInPath
line 994: "             \ :find<bang> <args>
line 995: "       function! s:PathComplete(ArgLead, CmdLine, CursorPos)
line 996: "         return UserFileComplete(a:ArgLead, a:CmdLine, a:CursorPos, 1, &path)
line 997: "       endfunction
line 998: "
line 999: "   - If you are running commands that generate multiple pages of output, you
line 1000: "     might find it useful to redirect the output to a new buffer. Put the
line 1001: "     following command in your vimrc:
line 1002: "       command! -nargs=* -complete=command Redir
line 1003: "             \ :new | put! =GetVimCmdOutput('<args>') | setl bufhidden=wipe |
line 1004: "             \ setl nomodified
line 1005: "
line 1006: " TODO:
line 1007: "   - fnamemodify() on Unix doesn't expand to full name if the filename doesn't
line 1008: "     really exist on the filesystem.
line 1009: "   - Is setting 'scrolloff' and 'sidescrolloff' to 0 required while moving the
line 1010: "     cursor?
line 1011: "
line 1012: "   - EscapeCommand() didn't work for David Fishburn.
line 1013: "   - Save/RestoreWindowSettings doesn't work well.
line 1014: "   - Support specifying arguments (with spaces) enclosed in "" or '' for
line 1015: "     makeArgumentString. Just combine the arguments that are between "" or ''
line 1016: "     and strip the quotes off.
line 1017: "
line 1018: 
line 1019: if exists('loaded_genutils')
line 1020:   finish
line 1021: endif
line 1022: if v:version < 603
line 1023:   echomsg 'genutils: You need at least Vim 6.3'
line 1024:   finish
line 1025: endif
line 1026: 
line 1027: if !exists('loaded_multvals')
line 1028:   runtime plugin/multvals.vim
line 1029: endif
line 1030: if !exists('loaded_multvals') || loaded_multvals < 305
line 1031:   echomsg 'genutils: You need a newer version of multvals.vim plugin'
line 1032:   finish
line 1033: endif
line 1034: let loaded_genutils = 118
line 1035: 
line 1036: " Make sure line-continuations won't cause any problem. This will be restored
line 1037: "   at the end
line 1038: let s:save_cpo = &cpo
line 1039: set cpo&vim
line 1040: 
line 1041: 
line 1042: let g:makeArgumentString = 'exec MakeArgumentString()'
line 1043: let g:makeArgumentList = 'exec MakeArgumentList()'
line 1044: 
line 1045: let s:makeArgumentString = ''
line 1046: function! MakeArgumentString(...)
line 1057: 
line 1058: 
line 1059: let s:makeArgumentList = ''
line 1060: function! MakeArgumentList(...)
line 1076: 
line 1077: function! ExtractFuncListing(funcName, hLines, tLines)
line 1096: 
line 1097: function! CreateArgString(argList, sep, ...)
line 1114: 
line 1115: " {{{
line 1116: function! s:_makeArgumentString()
line 1135: 
line 1136: function! s:_makeArgumentList()
line 1150: " }}}
line 1151: 
line 1152: 
line 1153: function! DebugShowArgs(...)
line 1163: 
line 1164: " Window related functions {{{
line 1165: 
line 1166: function! NumberOfWindows()
line 1173: 
line 1174: " Find the window number for the buffer passed.
line 1175: " The fileName argument is treated literally, unlike the bufnr() which treats
line 1176: "   the argument as a regex pattern.
line 1177: function! FindWindowForBuffer(bufferName, checkUnlisted)
line 1180: 
line 1181: function! FindBufferForName(fileName)
line 1186: 
line 1187: function! s:FindBufferForName(fileName)
line 1199: 
line 1200: function! GetBufNameForAu(bufName)
line 1207: 
line 1208: function! MoveCursorToWindow(winno)
line 1213: 
line 1214: function! MoveCurLineToWinLine(n)
line 1229: 
line 1230: function! CloseWindow(win, force)
line 1252: 
line 1253: function! MarkActiveWindow()
line 1260: 
line 1261: function! RestoreActiveWindow()
line 1275: 
line 1276: function! IsOnlyVerticalWindow()
line 1300: 
line 1301: function! IsOnlyHorizontalWindow()
line 1322: 
line 1323: function! MoveCursorToNextInWinStack(dir)
line 1329: 
line 1330: function! GetNextWinnrInStack(dir)
line 1343: 
line 1344: function! MoveCursorToLastInWinStack(dir)
line 1350: 
line 1351: function! GetLastWinnrInStack(dir)
line 1372: 
line 1373: " Based on the WinStackMv() function posted by Charles E. Campbell, Jr. on vim
line 1374: "   mailing list on Jul 14, 2004.
line 1375: function! s:GetNextWinnrInStack(dir)
line 1426: 
line 1427: function! s:GetWinDim(dir, win)
line 1430: 
line 1431: function! OpenWinNoEa(winOpenCmd)
line 1434: 
line 1435: function! CloseWinNoEa(winnr, force)
line 1438: 
line 1439: function! s:ExecWinCmdNoEa(winCmd)
line 1460: 
line 1461: " Window related functions }}}
line 1462: 
line 1463: function! SetupScratchBuffer()
line 1474: 
line 1475: function! CleanDiffOptions()
line 1484: 
line 1485: function! ArrayVarExists(varName, index)
line 1493: 
line 1494: function! Escape(str, chars)
line 1498: 
line 1499: function! UnEscape(str, chars)
line 1503: 
line 1504: function! DeEscape(str)
line 1509: 
line 1510: " - For windoze+native, use double-quotes to sorround the arguments and for
line 1511: "   embedded double-quotes, just double them.
line 1512: " - For windoze+sh, use single-quotes to sorround the aruments and for embedded
line 1513: "   single-quotes, just replace them with '""'""' (if 'shq' or 'sxq' is a
line 1514: "   double-quote) and just '"'"' otherwise. Embedded double-quotes also need
line 1515: "   to be doubled.
line 1516: " - For Unix+sh, use single-quotes to sorround the arguments and for embedded
line 1517: "   single-quotes, just replace them with '"'"'. 
line 1518: function! EscapeCommand(cmd, args, pipe)
line 1565: 
line 1566: let g:ST_WIN_CMD = 0 | let g:ST_WIN_SH = 1 | let g:ST_UNIX = 2
line 1566:  let g:ST_WIN_SH = 1 | let g:ST_UNIX = 2
line 1566:  let g:ST_UNIX = 2
line 1567: function! GetShellEnvType()
line 1581: 
line 1582: function! ExpandStr(str)
line 1587: 
line 1588: function! QuoteStr(str)
line 1591: 
line 1592: function! GetPreviewWinnr()
line 1610: 
line 1611: " Save/Restore window settings {{{
line 1612: function! SaveWindowSettings()
line 1615: 
line 1616: function! RestoreWindowSettings()
line 1619: 
line 1620: 
line 1621: function! ResetWindowSettings()
line 1624: 
line 1625: function! SaveWindowSettings2(sid, overwrite)
line 1646: 
line 1647: function! RestoreWindowSettings2(sid)
line 1653: 
line 1654: function! s:RestoreWindowSettings2(sid)
line 1694: 
line 1695: 
line 1696: function! ResetWindowSettings2(sid)
line 1701: 
line 1702: " Save/Restore window settings }}}
line 1703: 
line 1704: " Save/Restore selection {{{
line 1705: 
line 1706: function! SaveVisualSelection(sid)
line 1720: 
line 1721: function! RestoreVisualSelection(sid)
line 1731: " Save/Restore selection }}}
line 1732: 
line 1733: function! CleanupFileName(fileName)
line 1777: "echo CleanupFileName('\\a///b/c\')
line 1778: "echo CleanupFileName('C:\a/b/c\d')
line 1779: "echo CleanupFileName('a/b/c\d')
line 1780: "echo CleanupFileName('~/a/b/c\d')
line 1781: "echo CleanupFileName('~/a/b/../c\d')
line 1782: 
line 1783: function! OnMS()
line 1787: 
line 1788: function! PathIsAbsolute(path)
line 1807: 
line 1808: function! PathIsFileNameOnly(path)
line 1811: 
line 1812: 
line 1813: " Copy this method into your script and rename it to find the script id of the
line 1814: "   current script.
line 1815: function! s:MyScriptId()
line 1821: let s:myScriptId = s:MyScriptId()
calling function <SNR>16_MyScriptId()

line 1:   map <SID>xx <SID>xx
line 2:   let s:sid = maparg("<SID>xx")
line 3:   unmap <SID>xx
line 4:   return substitute(s:sid, "xx$", "", "")
function <SNR>16_MyScriptId returning '<SNR>16_'

continuing in /home/kguest/My-.vim-files/scripts/genutils.vim

line 1822: delfunc s:MyScriptId " Not required any more.
line 1823: 
line 1824: 
line 1825: "" --- START save/restore position. {{{
line 1826: 
line 1827: function! SaveSoftPosition(scriptid)
line 1831: 
line 1832: function! RestoreSoftPosition(scriptid)
line 1843: 
line 1844: function! ResetSoftPosition(scriptid)
line 1847: 
line 1848: " A synonym for SaveSoftPosition.
line 1849: function! SaveHardPositionWithContext(scriptid)
line 1852: 
line 1853: " A synonym for RestoreSoftPosition.
line 1854: function! RestoreHardPositionWithContext(scriptid)
line 1857: 
line 1858: " A synonym for ResetSoftPosition.
line 1859: function! ResetHardPositionWithContext(scriptid)
line 1862: 
line 1863: function! SaveHardPosition(scriptid)
line 1868: 
line 1869: function! RestoreHardPosition(scriptid)
line 1876: 
line 1877: function! ResetHardPosition(scriptid)
line 1882: 
line 1883: function! GetLinePosition(scriptid)
line 1886: 
line 1887: function! GetColPosition(scriptid)
line 1890: 
line 1891: function! IsPositionSet(scriptid)
line 1894: 
line 1895: "" --- END save/restore position. }}}
line 1896: 
line 1897: 
line 1898: 
line 1899: ""
line 1900: "" --- START: Notify window close -- {{{
line 1901: ""
line 1902: 
line 1903: function! AddNotifyWindowClose(windowTitle, functionName)
line 1931: 
line 1932: function! RemoveNotifyWindowClose(windowTitle)
line 1958: 
line 1959: function! CheckWindowClose()
line 1986: 
line 1987: "function! NotifyWindowCloseF(title)
line 1988: "  call input(a:title . " closed")
line 1989: "endfunction
line 1990: "
line 1991: "function! RunNotifyWindowCloseTest()
line 1992: "  call input("Creating three windows, 'ABC', 'XYZ' and 'b':")
line 1993: "  split ABC
line 1994: "  split X Y Z
line 1995: "  split b
line 1996: "  redraw
line 1997: "  call AddNotifyWindowClose("ABC", "NotifyWindowCloseF")
line 1998: "  call AddNotifyWindowClose("X Y Z", "NotifyWindowCloseF")
line 1999: "  call input("notifyWindowTitles: " . s:notifyWindowTitles)
line 2000: "  call input("notifyWindowFunctions: " . s:notifyWindowFunctions)
line 2001: "  au NotifyWindowClose WinEnter
line 2002: "  call input("Added notifications for 'ABC' and 'XYZ'\n".
line 2003: "       \ "Now closing the windows, you should see ONLY two notifications:")
line 2004: "  quit
line 2005: "  quit
line 2006: "  quit
line 2007: "endfunction
line 2008: 
line 2009: ""
line 2010: "" --- END: Notify window close -- }}}
line 2011: ""
line 2012: 
line 2013: " TODO: For large ranges, the cmd can become too big, so make it one cmd per
line 2014: "       line.
line 2015: function! ShowLinesWithSyntax() range
line 2057: 
line 2058: 
line 2059: function! AlignWordWithWordInPreviousLine()
line 2105: 
line 2106: function! ShiftWordInSpace(dir)
line 2156: 
line 2157: 
line 2158: function! CenterWordInSpace()
line 2192: 
line 2193: function! MapAppendCascaded(lhs, rhs, mapMode)
line 2208: 
line 2209: " smartSlash simply says whether to depend on shellslash and ArgLead for
line 2210: "   determining path separator. If it shouldn't depend, it will always assume
line 2211: "   that the required pathsep is forward-slash.
line 2212: function! UserFileComplete(ArgLead, CmdLine, CursorPos, smartSlash, searchPath)
line 2241: 
line 2242: command! -complete=file -nargs=* GUDebugEcho :echo <q-args>
line 2243: function! UserFileExpand(fileArgs)
line 2247: 
line 2248: function! s:FixPathSep(matches, opathsep, npathsep)
line 2255: 
line 2256: function! GetVimCmdOutput(cmd)
line 2277: 
line 2278: function! OptClearBuffer()
line 2291: 
line 2292: 
line 2293: "" START: Sorting support. {{{
line 2294: ""
line 2295: 
line 2296: "
line 2297: " Comapare functions.
line 2298: "
line 2299: 
line 2300: function! s:CmpByLineLengthNname(line1, line2, direction)
line 2303: 
line 2304: function! CmpByLineLengthNname(line1, line2, direction)
line 2311: 
line 2312: function! s:CmpByLength(line1, line2, direction)
line 2315: 
line 2316: 
line 2317: function! CmpByLength(line1, line2, direction)
line 2322: 
line 2323: function! s:CmpJavaImports(line1, line2, direction)
line 2326: 
line 2327: " Compare first by name and then by length.
line 2328: " Useful for sorting Java imports.
line 2329: function! CmpJavaImports(line1, line2, direction)
line 2352: 
line 2353: function! s:CmpByString(line1, line2, direction)
line 2356: 
line 2357: function! CmpByString(line1, line2, direction)
line 2366: 
line 2367: function! CmpByStringIgnoreCase(line1, line2, direction)
line 2376: 
line 2377: function! s:CmpByNumber(line1, line2, direction)
line 2380: 
line 2381: function! CmpByNumber(line1, line2, direction)
line 2393: 
line 2394: function! QSort(cmp, direction) range
line 2398: 
line 2399: function! QSort2(start, end, cmp, direction, accessor, swapper, context)
line 2403: 
line 2404: " The default swapper that swaps lines in the current buffer.
line 2405: function! s:BufLineSwapper(line1, line2, context)
line 2410: 
line 2411: " The default accessor that returns lines from the current buffer.
line 2412: function! s:BufLineAccessor(line, context)
line 2415: 
line 2416: " The default mover that moves lines from one place to another in the current
line 2417: " buffer.
line 2418: function! s:BufLineMover(from, to, context)
line 2423: 
line 2424: "
line 2425: " Sort lines.  QSortR() is called recursively.
line 2426: "
line 2427: function! s:QSortR(start, end, cmp, direction, accessor, swapper, context)
line 2484: 
line 2485: function! BinSearchForInsert(start, end, line, cmp, direction)
line 2489: 
line 2491: function! BinSearchForInsert2(start, end, line, cmp, direction, accessor, context)
line 2505: 
line 2506: function! BinInsertSort(cmp, direction) range
line 2510: 
line 2511: function! BinInsertSort2(start, end, cmp, direction, accessor, mover, context)
line 2523: 
line 2524: function! s:BinSearchToAppend(start, end, line, cmp, direction)
line 2528: 
line 2530: function! s:BinSearchToAppend2(start, end, line, cmp, direction, accessor, context)
line 2547: 
line 2548: """ END: Sorting support. }}}
line 2549: 
line 2550: 
line 2551: " Eats character if it matches the given pattern.
line 2552: "
line 2553: " Originally,
line 2554: " From: Benji Fisher <fisherbb@bc.edu>
line 2555: " Date: Mon, 25 Mar 2002 15:05:14 -0500
line 2556: "
line 2557: " Based on Bram's idea of eating a character while type <Space> to expand an
line 2558: "   abbreviation. This solves the problem with abbreviations, where we are
line 2559: "   left with an extra space after the expansion.
line 2560: " Ex:
line 2561: "   inoreabbr \stdout\ System.out.println("");<Left><Left><Left><C-R>=EatChar('\s')<CR>
line 2562: function! EatChar(pat)
line 2568: 
line 2569: 
line 2570: " Can return a spacer from 0 to 80 characters width.
line 2572: let s:spacer= "                                                               ". "                 "
line 2573: function! GetSpacer(width)
line 2576: 
line 2577: function! SilentSubstitute(pat, cmd)
line 2586: 
line 2587: function! SilentDelete(arg1, ...)
line 2604: 
line 2605: " START: Roman2Decimal {{{
line 2606: let s:I = 1
line 2607: let s:V = 5
line 2608: let s:X = 10
line 2609: let s:L = 50
line 2610: let s:C = 100
line 2611: let s:D = 500
line 2612: let s:M = 1000
line 2613: 
line 2614: function! s:Char2Num(c)
line 2622: 
line 2623: function! Roman2Decimal(str)
line 2644: " END: Roman2Decimal }}}
line 2645: 
line 2646: 
line 2647: " BEGIN: Relative path {{{
line 2648: function! CommonPath(path1, path2)
line 2653: 
line 2654: function! CommonString(str1, str2)
line 2666: 
line 2667: function! RelPathFromFile(srcFile, tgtFile)
line 2670: 
line 2671: function! RelPathFromDir(srcDir, tgtFile)
line 2680: 
line 2681: " END: Relative path }}}
line 2682: 
line 2683: 
line 2684: " BEGIN: Persistent settings {{{
line 2685: if ! exists("g:genutilsNoPersist") || ! g:genutilsNoPersist
line 2686:   " Make sure the '!' option to store global variables that are upper cased are
line 2687:   "   stored in viminfo file.
line 2688:   " Make sure it is the first option, so that it will not interfere with the
line 2689:   "   'n' option ("Todd J. Cosgrove" (todd dot cosgrove at softechnics dot
line 2690:   "   com)).
line 2691:   " Also take care of empty value, when 'compatible' mode is on (Bram
line 2692:   "   Moolenar)
line 2693:   if &viminfo == ''
line 2694:     set viminfo=!,'20,"50,h
line 2695:   else
line 2696:     set viminfo^=!
line 2697:   endif
line 2698: endif
line 2699: 
line 2700: function! PutPersistentVar(pluginName, persistentVar, value)
line 2706: 
line 2707: function! GetPersistentVar(pluginName, persistentVar, default)
line 2721: 
line 2722: function! s:PersistentVarName(pluginName, persistentVar)
line 2725: " END: Persistent settings }}}
line 2726: 
line 2727: 
line 2728: " FileChangedShell handling {{{
line 2729: if !exists('s:fcShellPreFuncs')
line 2730:   let s:fcShellPreFuncs = ''
line 2731:   let s:fcShellFuncs = ''
line 2732: endif
line 2733: 
line 2734: function! AddToFCShellPre(funcName)
line 2738: 
line 2739: function! RemoveFromFCShellPre(funcName)
line 2742: 
line 2743: function! AddToFCShell(funcName)
line 2747: 
line 2748: function! RemoveFromFCShell(funcName)
line 2751: 
line 2752: let s:defFCShellInstalled = 0
line 2753: function! DefFCShellInstall()
line 2762: 
line 2763: function! DefFCShellUninstall()
line 2774: 
line 2775: function! DefFileChangedShell()
line 2823: 
line 2824: function! s:InvokeFuncs(funcList)
line 2837: " FileChangedShell handling }}}
line 2838: 
line 2839: 
line 2840: " Sign related utilities {{{
line 2841: function! CurLineHasSign()
line 2846: 
line 2847: function! ClearAllSigns()
line 2860: " }}}
line 2861:  
line 2862: " Restore cpo.
line 2863: let &cpo = s:save_cpo
line 2864: unlet s:save_cpo
line 2865: 
line 2866: " vim6:fdm=marker et
finished sourcing /home/kguest/.vim/scripts/genutils.vim
continuing in /home/kguest/.vimrc
line 308: let tskelUserName='Ken Guest'
line 309: let tskelUserEmail='ken@linux.ie'
line 310: source $HOME/.vim/overrides.vim
chdir(/home/kguest/.vim)
fchdir() to previous dir
line 310: sourcing "/home/kguest/.vim/overrides.vim"
line 1: let tskelUserName='Ken Guest'
line 2: let tskelUserEmail='ken@linux.ie'
finished sourcing /home/kguest/.vim/overrides.vim
continuing in /home/kguest/.vimrc
line 311: " }}}
line 312: highlight Comment ctermfg=darkgreen
line 313: "highlight StatusLine ctermfg=yellow ctermbg=red cterm=bold
line 314: highlight StatusLineNC ctermfg=lightgray ctermbg=blue
line 315: let g:netrw_ftp_cmd="ftp -p"
line 316: 
line 317: function! SetStatusLine()
line 320: 
line 321: function! Time()
line 324: 
line 325: function! ShowTab()
line 332: 
line 333: set runtimepath^=~/.vim/bundle/ctrlp.vim
line 334: " Respect modeline in files
line 335: set modeline
line 336: set modelines=4
line 337: " Enable per-directory .vimrc files and disable unsafe commands in them
line 338: set exrc
line 339: " force 256 colours on terminals
line 340: "set t_Co=256
line 341: 
finished sourcing $HOME/.vimrc
could not source ".vimrc"
could not source ".exrc"
Searching for "plugin/**/*.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/plugin/**/*.vim"
chdir(/home/kguest/.vim/bundle/ctrlp.vim/plugin)
fchdir() to previous dir
sourcing "/home/kguest/.vim/bundle/ctrlp.vim/plugin/ctrlp.vim"
line 1: " =============================================================================
line 2: " File:          plugin/ctrlp.vim
line 3: " Description:   Fuzzy file, buffer, mru, tag, etc finder.
line 4: " Author:        Kien Nguyen <github.com/kien>
line 5: " =============================================================================
line 6: " GetLatestVimScripts: 3736 1 :AutoInstall: ctrlp.zip
line 7: 
line 8: if ( exists('g:loaded_ctrlp') && g:loaded_ctrlp ) || v:version < 700 || &cp
line 9: ^Ifini
line 10: en
line 11: let g:loaded_ctrlp = 1
line 12: 
line 15: let [g:ctrlp_lines, g:ctrlp_allfiles, g:ctrlp_alltags, g:ctrlp_alldirs, g:ctrlp_allmixes, g:ctrlp_buftags, g:ctrlp_ext_vars, g:ctrlp_builtins] = [[], [], [], [], {}, {}, [], 2]
line 16: 
line 17: if !exists('g:ctrlp_map') | let g:ctrlp_map = '<c-p>' | en
line 17:  let g:ctrlp_map = '<c-p>' | en
line 17:  en
line 18: if !exists('g:ctrlp_cmd') | let g:ctrlp_cmd = 'CtrlP' | en
line 18:  let g:ctrlp_cmd = 'CtrlP' | en
line 18:  en
line 19: 
line 20: com! -n=? -com=dir CtrlP cal ctrlp#init(0, <q-args>)
line 21: 
line 22: com! -bar CtrlPBuffer   cal ctrlp#init(1)
line 23: com! -bar CtrlPMRUFiles cal ctrlp#init(2)
line 24: com! -bar CtrlPLastMode cal ctrlp#init(-1)
line 25: 
line 26: com! -bar CtrlPClearCache     cal ctrlp#clr()
line 27: com! -bar CtrlPClearAllCaches cal ctrlp#clra()
line 28: com! -bar CtrlPReload         cal ctrlp#reset()
line 29: 
line 30: com! -bar ClearCtrlPCache     cal ctrlp#clr()
line 31: com! -bar ClearAllCtrlPCaches cal ctrlp#clra()
line 32: com! -bar ResetCtrlP          cal ctrlp#reset()
line 33: 
line 34: com! -bar CtrlPCurWD   cal ctrlp#init(0, 0)
line 35: com! -bar CtrlPCurFile cal ctrlp#init(0, 1)
line 36: com! -bar CtrlPRoot    cal ctrlp#init(0, 2)
line 37: 
line 38: if g:ctrlp_map != '' && !hasmapto(':<c-u>'.g:ctrlp_cmd.'<cr>', 'n')
line 39: ^Iexe 'nn <silent>' g:ctrlp_map ':<c-u>'.g:ctrlp_cmd.'<cr>'
line 39: nn <silent> <c-p> :<c-u>CtrlP<cr>
line 40: en
line 41: 
line 42: cal ctrlp#mrufiles#init()
Searching for "autoload/ctrlp/mrufiles.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim"
chdir(/home/kguest/.vim/bundle/ctrlp.vim/autoload/ctrlp)
fchdir() to previous dir
line 42: sourcing "/home/kguest/.vim/bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim"
line 1: " =============================================================================
line 2: " File:          autoload/ctrlp/mrufiles.vim
line 3: " Description:   Most Recently Used Files extension
line 4: " Author:        Kien Nguyen <github.com/kien>
line 5: " =============================================================================
line 6: 
line 7: " Static variables {{{1
line 8: let [s:mrbs, s:mrufs] = [[], []]
line 9: 
line 10: fu! ctrlp#mrufiles#opts()
line 22: cal ctrlp#mrufiles#opts()
calling function ctrlp#mrufiles#opts()

line 1: ^Ilet [pref, opts] = ['g:ctrlp_mruf_', { 'max': ['s:max', 250], 'include': ['s:in', ''], 'exclude': ['s:ex', ''], 'case_sensitive': ['s:cseno', 1], 'relative': ['s:re', 0], }]
line 8: ^Ifor [ke, va] in items(opts)
line 9: ^I^Ilet [{va[0]}, {pref.ke}] = [pref.ke, exists(pref.ke) ? {pref.ke} : va[1]]
line 10: ^Iendfo
line 8: ^Ifor [ke, va] in items(opts)
line 9: ^I^Ilet [{va[0]}, {pref.ke}] = [pref.ke, exists(pref.ke) ? {pref.ke} : va[1]]
line 10: ^Iendfo
line 8: ^Ifor [ke, va] in items(opts)
line 9: ^I^Ilet [{va[0]}, {pref.ke}] = [pref.ke, exists(pref.ke) ? {pref.ke} : va[1]]
line 10: ^Iendfo
line 8: ^Ifor [ke, va] in items(opts)
line 9: ^I^Ilet [{va[0]}, {pref.ke}] = [pref.ke, exists(pref.ke) ? {pref.ke} : va[1]]
line 10: ^Iendfo
line 8: ^Ifor [ke, va] in items(opts)
line 9: ^I^Ilet [{va[0]}, {pref.ke}] = [pref.ke, exists(pref.ke) ? {pref.ke} : va[1]]
line 10: ^Iendfo
line 8: ^Ifor [ke, va] in items(opts)
line 9: ^I^Ilet [{va[0]}, {pref.ke}] = [pref.ke, exists(pref.ke) ? {pref.ke} : va[1]]
line 10: ^Iendfo
function ctrlp#mrufiles#opts returning #0

continuing in /home/kguest/My-.vim-files/bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim

line 23: " Utilities {{{1
line 24: fu! s:excl(fn)
line 27: 
line 28: fu! s:mergelists()
line 34: 
line 35: fu! s:chop(mrufs)
line 39: 
line 40: fu! s:reformat(mrufs)
line 47: 
line 48: fu! s:record(bufnr)
line 64: 
line 65: fu! s:savetofile(mrufs)
line 68: " Public {{{1
line 69: fu! ctrlp#mrufiles#refresh(...)
line 79: 
line 80: fu! ctrlp#mrufiles#remove(files)
line 89: 
line 90: fu! ctrlp#mrufiles#list(...)
line 93: 
line 94: fu! ctrlp#mrufiles#bufs()
line 97: 
line 98: fu! ctrlp#mrufiles#cachefile()
line 105: 
line 106: fu! ctrlp#mrufiles#init()
line 117: "}}}
line 118: 
line 119: " vim:fen:fdm=marker:fmr={{{,}}}:fdl=0:fdc=1:ts=2:sw=2:sts=2
finished sourcing /home/kguest/.vim/bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim
continuing in /home/kguest/My-.vim-files/bundle/ctrlp.vim/plugin/ctrlp.vim
calling function ctrlp#mrufiles#init()

line 1: ^Iif !has('autocmd') | retu | en
line 1:  retu | en
line 1:  en
line 2: ^Ilet s:locked = 0
line 3: ^Iaug CtrlPMRUF
line 4: ^I^Iau!
line 5: ^I^Iau BufAdd,BufEnter,BufLeave,BufUnload * cal s:record(expand('<abuf>', 1))
line 6: ^I^Iau QuickFixCmdPre  *vimgrep* let s:locked = 1
line 7: ^I^Iau QuickFixCmdPost *vimgrep* let s:locked = 0
line 8: ^I^Iau VimLeavePre * cal s:savetofile(s:mergelists())
line 9: ^Iaug END
function ctrlp#mrufiles#init returning #0

continuing in /home/kguest/My-.vim-files/bundle/ctrlp.vim/plugin/ctrlp.vim

line 43: 
line 44: com! -bar CtrlPTag         cal ctrlp#init(ctrlp#tag#id())
line 45: com! -bar CtrlPQuickfix    cal ctrlp#init(ctrlp#quickfix#id())
line 47: com! -n=? -com=dir CtrlPDir cal ctrlp#init(ctrlp#dir#id(), <q-args>)
line 49: com! -n=? -com=buffer CtrlPBufTag cal ctrlp#init(ctrlp#buffertag#cmd(0, <q-args>))
line 50: com! -bar CtrlPBufTagAll   cal ctrlp#init(ctrlp#buffertag#cmd(1))
line 51: com! -bar CtrlPRTS         cal ctrlp#init(ctrlp#rtscript#id())
line 52: com! -bar CtrlPUndo        cal ctrlp#init(ctrlp#undo#id())
line 53: com! -bar CtrlPLine        cal ctrlp#init(ctrlp#line#id())
line 55: com! -n=? -com=buffer CtrlPChange cal ctrlp#init(ctrlp#changes#cmd(0, <q-args>))
line 56: com! -bar CtrlPChangeAll   cal ctrlp#init(ctrlp#changes#cmd(1))
line 57: com! -bar CtrlPMixed       cal ctrlp#init(ctrlp#mixed#id())
line 58: com! -bar CtrlPBookmarkDir cal ctrlp#init(ctrlp#bookmarkdir#id())
line 60: com! -n=? -com=dir CtrlPBookmarkDirAdd cal ctrlp#call('ctrlp#bookmarkdir#add', <q-args>)
finished sourcing /home/kguest/.vim/bundle/ctrlp.vim/plugin/ctrlp.vim
Searching for "/home/kguest/.vim/plugin/**/*.vim"
chdir(/home/kguest/.vim/plugin)
fchdir() to previous dir
sourcing "/home/kguest/.vim/plugin/EncodeURL.vim"
line 1: " EncodeURL.vim
line 2: " @Author:      Thomas Link (mailto:samul AT web.de?subject=vim-EncodeURL)
line 3: " @License:     GPL (see http://www.gnu.org/licenses/gpl.txt)
line 4: " @Created:     01-Aug-2005.
line 5: " @Last Change: 05-Aug-2005.
line 6: " @Revision:    0.1.13
line 7: 
line 8: if &cp || exists("loaded_encodeurl")
line 9:     finish
line 10: endif
line 11: let loaded_encodeurl = 1
line 12: 
line 13: " fun! DecodeHex(hex)
line 14: "     if a:hex == '%'
line 15: "         return a:hex
line 16: "     else
line 17: "         " return escape(nr2char('0x'. a:hex), '\')
line 18: "         return nr2char('0x'. a:hex)
line 19: "     endif
line 20: " endf
line 21: "
line 22: "fun! DecodeURL(url)
line 23: "    let rv = substitute(a:url, '%\(%\|\x\x\)', '\=DecodeHex(submatch(1))', 'g')
line 24: "    return rv
line 25: "endf
line 26: 
line 27: fun! DecodeURL(url)
line 47: 
line 48: fun! EncodeChar(char)
line 62: 
line 63: fun! EncodeURL(url)
line 66: 
line 67: 
finished sourcing /home/kguest/.vim/plugin/EncodeURL.vim
chdir(/home/kguest/.vim/plugin)
fchdir() to previous dir
sourcing "/home/kguest/.vim/plugin/camelcasemotion.vim"
line 1: " camelcasemotion.vim: Mappings for motion through CamelCaseWords and
line 2: " underscore_notation. 
line 3: "
line 4: " DESCRIPTION: {{{1
line 5: "   VIM provides many built-in motions, e.g. to move to the next word, or
line 6: "   end of the current word. Most programming languages use either CamelCase
line 7: "   ("anIdentifier") or underscore_notation ("an_identifier") naming
line 8: "   conventions for identifiers. The best way to navigate inside those
line 9: "   identifiers using VIM built-in motions is the '[count]f{char}' motion, i.e.
line 10: "   'f<uppercase char>' or 'f_', respectively. But we can make this easier: 
line 11: "
line 12: "   This script defines motions ',w', ',b' and ',e' (similar to 'w', 'b', 'e'),
line 13: "   which do not move word-wise (forward/backward), but Camel-wise; i.e. to word
line 14: "   boundaries and uppercase letters. The motions also work on underscore
line 15: "   notation, where words are delimited by underscore ('_') characters. 
line 16: "   From here on, both CamelCase and underscore_notation entities are referred
line 17: "   to as "words" (in double quotes). 
line 18: "
line 19: " USAGE:
line 20: "   Use the new motions ',w', ',b' and ',e' in normal mode, operator-pending
line 21: "   mode (cp. :help operator), and visual mode. For example, type 'bc,w' to
line 22: "   change 'Camel' in 'CamelCase' to something else. 
line 23: "
line 24: " EXAMPLE:
line 25: "   Given the following CamelCase identifiers in a source code fragment:
line 26: "^Iset Script31337PathAndNameWithoutExtension11=%~dpn0
line 27: "^Iset Script31337PathANDNameWITHOUTExtension11=%~dpn0
line 28: "   and the corresponding identifiers in underscore_notation:
line 29: "^Iset script_31337_path_and_name_without_extension_11=%~dpn0
line 30: "^Iset SCRIPT_31337_PATH_AND_NAME_WITHOUT_EXTENSION_11=%~dpn0
line 31: "
line 32: "   ,w moves to ([x] is cursor position): [s]et, [s]cript, [3]1337, [p]ath,
line 33: "^I[a]nd, [n]ame, [w]ithout, [e]xtension, [1]1, [d]pn0, dpn[0], [s]et
line 34: "   ,b moves to: [d]pn0, [1]1, [e]xtension, [w]ithout, ...
line 35: "   ,e moves to: se[t], scrip[t], 3133[7], pat[h], an[d], nam[e], withou[t],
line 36: "^Iextensio[n], 1[1], dpn[0]
line 37: "
line 38: " INSTALLATION: {{{1
line 39: "   Put the script into your user or system VIM plugin directory (e.g.
line 40: "   ~/.vim/plugin). 
line 41: "
line 42: " DEPENDENCIES:
line 43: "   - Requires VIM 6.0 or higher for limited functionality
line 44: "     (,e motions do not work correctly and move like ,w).  
line 45: "   - Requires VIM 7.0 or higher for full functionality. 
line 46: "
line 47: " CONFIGURATION:
line 48: "
line 49: " LIMITATIONS:
line 50: "
line 51: " ASSUMPTIONS:
line 52: "
line 53: " KNOWN PROBLEMS:
line 54: "   - A degenerate CamelCaseWord containing '\U\u\d' (e.g. "MaP1Roblem")
line 55: "     confuses the operator-pending and visual mode ,e mapping if 'selection' is
line 56: "     not set to "exclusive". It'll skip "P" and select "P1" in one step. As a
line 57: "     workaround, use ',w' instead of ',e'; those two mappings have the same
line 58: "     effect inside CamelCaseWords, anyway. 
line 59: "   - The operator-pending and visual mode ,e mapping doesn't work properly when
line 60: "     it reaches the end of the buffer; the final character of the moved-over
line 61: "     "word" remains. As a workaround, use the default 'e' motion instead of
line 62: "     ',e'. 
line 63: "   - When the VIM setting 'selection' is not set to "exclusive", a
line 64: "     forward-backward combination in visual mode (e.g. 'v,w,b') selects one
line 65: "     additional character to the left, instead of only the character where the
line 66: "     motion started. Likewise, extension of the visual selection from the front
line 67: "     end is off by one additional character. 
line 68: "
line 69: " TODO:
line 70: "
line 71: " Copyright: (C) 2007 by Ingo Karkat
line 72: "   The VIM LICENSE applies to this script; see ':help copyright'. 
line 73: "
line 74: " Source: Based on vimtip #1016 by Anthony Van Ham. 
line 75: " Maintainer:^IIngo Karkat <ingo@karkat.de>
line 76: " REVISION^IDATE^I^IREMARKS {{{1
line 77: "   1.20.012^I02-Jun-2007^IBF: Corrected motions through mixed
line 78: "^I^I^I^ICamelCase_and_UnderScore words by re-ordering
line 79: "^I^I^I^Iand narrowing the search patterns.  
line 80: "   1.20.011^I02-Jun-2007^IThanks again to Joseph Barker for discussing the
line 81: "^I^I^I^Icomplicated visual mode mapping on the vim-dev
line 82: "^I^I^I^Imailing list and coming up with a great
line 83: "^I^I^I^Isimplification:
line 84: "^I^I^I^IRemoved s:CheckForChangesToTheSelectionSetting().
line 85: "^I^I^I^IIntroduced s:VisualCamelCaseMotion(), which
line 86: "^I^I^I^Ihandles the differences depending on the
line 87: "^I^I^I^I'selection' setting. 
line 88: "^I^I^I^IVisual mode mappings now directly map to the
line 89: "^I^I^I^Is:VisualCamelCaseMotion() function; no mark is
line 90: "^I^I^I^Iclobbered, the complex mapping with the inline
line 91: "^I^I^I^Iexpression has been retired. 
line 92: "   1.20.010^I29-May-2007^IBF: The operator-pending and visual mode ,e
line 93: "^I^I^I^Imapping doesn't work properly when it reaches
line 94: "^I^I^I^Ithe end of line; the final character of the
line 95: "^I^I^I^Imoved-over "word" remains. Fixed this problem
line 96: "^I^I^I^Iunless the "word" is at the very end of the
line 97: "^I^I^I^Ibuffer. 
line 98: "^I^I^I^IENH: The visual mode motions now also (mostly)
line 99: "^I^I^I^Iwork with the (default) setting
line 100: "^I^I^I^I'set selection=inclusive', instead of selecting
line 101: "^I^I^I^Ione character too much. 
line 102: "^I^I^I^IENH: All mappings will check for changes to the
line 103: "^I^I^I^I'selection' setting and remap the visual mode
line 104: "^I^I^I^Imappings via function
line 105: "^I^I^I^Is:SetupVisualModeMappings(). We cannot rely on
line 106: "^I^I^I^Ithe setting while sourcing camelcasemotion.vim
line 107: "^I^I^I^Ibecause the mswin.vim script may be sourced
line 108: "^I^I^I^Iafterwards, and its 'behave mswin' changes
line 109: "^I^I^I^I'selection'. 
line 110: "^I^I^I^IRefactored the arguments of function 
line 111: "^I^I^I^Is:CamelCaseMotion(...). 
line 112: "   1.10.009^I28-May-2007^IBF: Degenerate CamelCaseWords that consist of
line 113: "^I^I^I^Ionly a single uppercase letter (e.g. "P" in
line 114: "^I^I^I^I"MapPRoblem") are skipped by all motions. Thanks
line 115: "^I^I^I^Ito Joseph Barker for reporting this. 
line 116: "^I^I^I^IBF: In CamelCaseWords that consist of uppercase
line 117: "^I^I^I^Iletters followed by decimals (e.g.
line 118: "^I^I^I^I"MyUPPER123Problem", the uppercase "word" is
line 119: "^I^I^I^Iskipped by all motions. 
line 120: "   1.10.008^I28-May-2007^IIncorporated major improvements and
line 121: "^I^I^I^Isimplifications done by Joseph Barker:
line 122: "^I^I^I^IOperator-pending and visual mode motions now
line 123: "^I^I^I^Iaccept [count] of more than 9. 
line 124: "^I^I^I^IVisual selections can now be extended from
line 125: "^I^I^I^Ieither end. 
line 126: "^I^I^I^IInstead of misusing the :[range], the special
line 127: "^I^I^I^Ivariable v:count1 is used. Custom commands are
line 128: "^I^I^I^Inot needed anymore. 
line 129: "^I^I^I^IOperator-pending and visual mode mappings are
line 130: "^I^I^I^Inow generic: There's only a single mapping for
line 131: "^I^I^I^I,w that can be repeated, rather than having a
line 132: "^I^I^I^Iseparate mapping for 1,w 2,w 3,w ...
line 133: "   1.00.007^I22-May-2007^IAdded documentation for publication. 
line 134: "^I006^I20-May-2007^IBF: visual mode [1,2,3],e on pure CamelCase
line 135: "^I^I^I^Imistakenly marks [2,4,6] words. If the cursor is
line 136: "^I^I^I^Ion a uppercase letter, the search pattern
line 137: "^I^I^I^I'\u\l\+' doesn't match at the cursor position,
line 138: "^I^I^I^Iso another match won. Changed search pattern
line 139: "^I^I^I^Ifrom '\l\+', 
line 140: "^I005^I16-May-2007^IAdded support for underscore notation. 
line 141: "^I^I^I^IAdded support for "forward to end of word"
line 142: "^I^I^I^I(',e') motion. 
line 143: "^I004^I16-May-2007^IImproved search pattern so that
line 144: "^I^I^I^IUppercaseWORDSInBetween and digits are handled,
line 145: "^I^I^I^Itoo. 
line 146: "^I003^I15-May-2007^IChanged mappings from <Leader>w to ,w; 
line 147: "^I^I^I^Iother \w mappings interfere here, because it's
line 148: "^I^I^I^Iirritating when the cursor jump doesn't happen
line 149: "^I^I^I^Iimmediately, because VIM waits whether the
line 150: "^I^I^I^Imapping is complete. ,w is faster to type that
line 151: "^I^I^I^I\w (and, because of the left-right touch,
line 152: "^I^I^I^Ipreferred over gw). 
line 153: "^I^I^I^IAdded visual mode mappings. 
line 154: "^I0.02^I15-Feb-2006^IBF: missing <SID> for omaps. 
line 155: "^I0.01^I11-Oct-2005^Ifile creation
line 156: 
line 157: " Avoid installing twice or when in compatible mode
line 158: if exists("loaded_camelcasemotion") || (v:version < 600)
line 159:     finish
line 160: endif
line 161: let loaded_camelcasemotion = 1
line 162: " }}}1
line 163: 
line 164: "- functions ------------------------------------------------------------------"
line 165: function! s:CamelCaseMotion( direction, count, mode ) " {{{1
line 217: " }}}1
line 218: 
line 219: "- mappings -------------------------------------------------------------------
line 220: " The count is passed into the function through the special variable 'v:count1',
line 221: " which is easier than misusing the :[range] that :call supports. 
line 222: " <C-U> is used to delete the unused range. 
line 223: " Another option would be to use a custom 'command! -count=1', but that doesn't
line 224: " work with the normal mode mapping: When a count is typed before the mapping,
line 225: " the ':' will convert a count of 3 into ':.,+2MyCommand', but ':3MyCommand'
line 226: " would be required to use -count and <count>. 
line 227: 
line 228: " Normal mode motions:
line 229: nmap <silent> ,w :<C-U>call <SID>CamelCaseMotion('w',v:count1,'n')<CR>
line 230: nmap <silent> ,b :<C-U>call <SID>CamelCaseMotion('b',v:count1,'n')<CR>
line 231: nmap <silent> ,e :<C-U>call <SID>CamelCaseMotion('e',v:count1,'n')<CR>
line 232: " We do not provide the fourth "backward to end" motion (,E), because it is
line 233: " seldomly used. 
line 234: 
line 235: 
line 236: " Operator-pending mode motions:
line 237: omap <silent> ,w :<C-U>call <SID>CamelCaseMotion('w',v:count1,'o')<CR>
line 238: omap <silent> ,b :<C-U>call <SID>CamelCaseMotion('b',v:count1,'o')<CR>
line 239: omap <silent> ,e :<C-U>call <SID>CamelCaseMotion('e',v:count1,'o')<CR>
line 240: 
line 241: 
line 242: " Visual mode motions:
line 243: function! s:VisualCamelCaseMotion( direction, count, mode ) " {{{1
line 274: " }}}1
line 275: 
line 276: vmap <silent> ,w :<C-U>call <SID>VisualCamelCaseMotion('w',v:count1,'v')<CR>
line 277: vmap <silent> ,b :<C-U>call <SID>VisualCamelCaseMotion('b',v:count1,'v')<CR>
line 278: vmap <silent> ,e :<C-U>call <SID>VisualCamelCaseMotion('e',v:count1,'v')<CR>
line 279: 
line 280: " vim: set sts=4 sw=4 noexpandtab ff=unix fdm=marker :
finished sourcing /home/kguest/.vim/plugin/camelcasemotion.vim
chdir(/home/kguest/.vim/plugin)
fchdir() to previous dir
sourcing "/home/kguest/.vim/plugin/matchit.vim"
line 1: "  matchit.vim: (global plugin) Extended "%" matching
line 2: "  Last Change: Sun Feb 26 10:00 AM 2006 EST
line 3: "  Maintainer:  Benji Fisher PhD   <benji@member.AMS.org>
line 4: "  Version:     1.10, for Vim 6.3
line 5: "  URL:^I^Ihttp://www.vim.org/script.php?script_id=39
line 6: 
line 7: " Documentation:
line 8: "  The documentation is in a separate file, matchit.txt .
line 9: 
line 10: " Credits:
line 11: "  Vim editor by Bram Moolenaar (Thanks, Bram!)
line 12: "  Original script and design by Raul Segura Acevedo
line 13: "  Support for comments by Douglas Potts
line 14: "  Support for back references and other improvements by Benji Fisher
line 15: "  Support for many languages by Johannes Zellner
line 16: "  Suggestions for improvement, bug reports, and support for additional
line 17: "  languages by Jordi-Albert Batalla, Neil Bird, Servatius Brandt, Mark
line 18: "  Collett, Stephen Wall, Dany St-Amant, and Johannes Zellner.
line 19: 
line 20: " Debugging:
line 21: "  If you'd like to try the built-in debugging commands...
line 22: "   :MatchDebug      to activate debugging for the current buffer
line 23: "  This saves the values of several key script variables as buffer-local
line 24: "  variables.  See the MatchDebug() function, below, for details.
line 25: 
line 26: " TODO:  I should think about multi-line patterns for b:match_words.
line 27: "   This would require an option:  how many lines to scan (default 1).
line 28: "   This would be useful for Python, maybe also for *ML.
line 29: " TODO:  Maybe I should add a menu so that people will actually use some of
line 30: "   the features that I have implemented.
line 31: " TODO:  Eliminate the MultiMatch function.  Add yet another argument to
line 32: "   Match_wrapper() instead.
line 33: " TODO:  Allow :let b:match_words = '\(\(foo\)\(bar\)\):\3\2:end\1'
line 34: " TODO:  Make backrefs safer by using '\V' (very no-magic).
line 35: " TODO:  Add a level of indirection, so that custom % scripts can use my
line 36: "   work but extend it.
line 37: 
line 38: " allow user to prevent loading
line 39: " and prevent duplicate loading
line 40: if exists("loaded_matchit") || &cp
line 41:   finish
line 42: endif
line 43: let loaded_matchit = 1
line 44: let s:last_mps = ""
line 45: let s:last_words = ""
line 46: 
line 47: let s:save_cpo = &cpo
line 48: set cpo&vim
line 49: 
line 50: nnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'n') <CR>
line 51: nnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'n') <CR>
line 52: vnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'v') <CR>m'gv``
line 53: vnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'v') <CR>m'gv``
line 54: onoremap <silent> %  v:<C-U>call <SID>Match_wrapper('',1,'o') <CR>
line 55: onoremap <silent> g% v:<C-U>call <SID>Match_wrapper('',0,'o') <CR>
line 56: 
line 57: " Analogues of [{ and ]} using matching patterns:
line 58: nnoremap <silent> [% :<C-U>call <SID>MultiMatch("bW", "n") <CR>
line 59: nnoremap <silent> ]% :<C-U>call <SID>MultiMatch("W",  "n") <CR>
line 60: vmap [% <Esc>[%m'gv``
line 61: vmap ]% <Esc>]%m'gv``
line 62: " vnoremap <silent> [% :<C-U>call <SID>MultiMatch("bW", "v") <CR>m'gv``
line 63: " vnoremap <silent> ]% :<C-U>call <SID>MultiMatch("W",  "v") <CR>m'gv``
line 64: onoremap <silent> [% v:<C-U>call <SID>MultiMatch("bW", "o") <CR>
line 65: onoremap <silent> ]% v:<C-U>call <SID>MultiMatch("W",  "o") <CR>
line 66: 
line 67: " text object:
line 68: vmap a% <Esc>[%v]%
line 69: 
line 70: " Auto-complete mappings:  (not yet "ready for prime time")
line 71: " TODO Read :help write-plugin for the "right" way to let the user
line 72: " specify a key binding.
line 73: "   let g:match_auto = '<C-]>'
line 74: "   let g:match_autoCR = '<C-CR>'
line 75: " if exists("g:match_auto")
line 76: "   execute "inoremap " . g:match_auto . ' x<Esc>"=<SID>Autocomplete()<CR>Pls'
line 77: " endif
line 78: " if exists("g:match_autoCR")
line 79: "   execute "inoremap " . g:match_autoCR . ' <CR><C-R>=<SID>Autocomplete()<CR>'
line 80: " endif
line 81: " if exists("g:match_gthhoh")
line 82: "   execute "inoremap " . g:match_gthhoh . ' <C-O>:call <SID>Gthhoh()<CR>'
line 83: " endif " gthhoh = "Get the heck out of here!"
line 84: 
line 85: let s:notslash = '\\\@<!\%(\\\\\)*'
line 86: 
line 87: function! s:Match_wrapper(word, forward, mode) range
line 284: 
line 285: " Restore options and do some special handling for Operator-pending mode.
line 286: " The optional argument is the tail of the matching group.
line 287: fun! s:CleanUp(options, mode, startline, startcol, ...)
line 313: 
line 314: " Example (simplified HTML patterns):  if
line 315: "   a:groupBR^I= '<\(\k\+\)>:</\1>'
line 316: "   a:prefix^I= '^.\{3}\('
line 317: "   a:group^I= '<\(\k\+\)>:</\(\k\+\)>'
line 318: "   a:suffix^I= '\).\{2}$'
line 319: "   a:matchline^I=  "123<tag>12" or "123</tag>12"
line 320: " then extract "tag" from a:matchline and return "<tag>:</tag>" .
line 321: fun! s:InsertRefs(groupBR, prefix, group, suffix, matchline)
line 376: 
line 377: " Input a comma-separated list of groups with backrefs, such as
line 378: "   a:groups = '\(foo\):end\1,\(bar\):end\1'
line 379: " and return a comma-separated list of groups with backrefs replaced:
line 380: "   return '\(foo\):end\(foo\),\(bar\):end\(bar\)'
line 381: fun! s:ParseWords(groups)
line 404: 
line 405: " TODO I think this can be simplified and/or made more efficient.
line 406: " TODO What should I do if a:start is out of range?
line 407: " Return a regexp that matches all of a:string, such that
line 408: " matchstr(a:string, regexp) represents the match for a:pat that starts
line 409: " as close to a:start as possible, before being preferred to after, and
line 410: " ends after a:start .
line 411: " Usage:
line 412: " let regexp = s:Wholematch(getline("."), 'foo\|bar', col(".")-1)
line 413: " let i      = match(getline("."), regexp)
line 414: " let j      = matchend(getline("."), regexp)
line 415: " let match  = matchstr(getline("."), regexp)
line 416: fun! s:Wholematch(string, pat, start)
line 426: 
line 427: " No extra arguments:  s:Ref(string, d) will
line 428: " find the d'th occurrence of '\(' and return it, along with everything up
line 429: " to and including the matching '\)'.
line 430: " One argument:  s:Ref(string, d, "start") returns the index of the start
line 431: " of the d'th '\(' and any other argument returns the length of the group.
line 432: " Two arguments:  s:Ref(string, d, "foo", "bar") returns a string to be
line 433: " executed, having the effect of
line 434: "   :let foo = s:Ref(string, d, "start")
line 435: "   :let bar = s:Ref(string, d, "len")
line 436: fun! s:Ref(string, d, ...)
line 477: 
line 478: " Count the number of disjoint copies of pattern in string.
line 479: " If the pattern is a literal string and contains no '0' or '1' characters
line 480: " then s:Count(string, pattern, '0', '1') should be faster than
line 481: " s:Count(string, pattern).
line 482: fun! s:Count(string, pattern, ...)
line 500: 
line 501: " s:Resolve('\(a\)\(b\)', '\(c\)\2\1\1\2') should return table.word, where
line 502: " word = '\(c\)\(b\)\(a\)\3\2' and table = '-32-------'.  That is, the first
line 503: " '\1' in target is replaced by '\(a\)' in word, table[1] = 3, and this
line 504: " indicates that all other instances of '\1' in target are to be replaced
line 505: " by '\3'.  The hard part is dealing with nesting...
line 506: " Note that ":" is an illegal character for source and target,
line 507: " unless it is preceded by "\".
line 508: fun! s:Resolve(source, target, output)
line 555: 
line 556: " Assume a:comma = ",".  Then the format for a:patterns and a:1 is
line 557: "   a:patterns = "<pat1>,<pat2>,..."
line 558: "   a:1 = "<alt1>,<alt2>,..."
line 559: " If <patn> is the first pattern that matches a:string then return <patn>
line 560: " if no optional arguments are given; return <patn>,<altn> if a:1 is given.
line 561: fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)
line 596: 
line 597: " Call this function to turn on debugging information.  Every time the main
line 598: " script is run, buffer variables will be saved.  These can be used directly
line 599: " or viewed using the menu items below.
line 600: if !exists(":MatchDebug")
line 601:   command! -nargs=0 MatchDebug call s:Match_debug()
line 602: endif
line 603: 
line 604: fun! s:Match_debug()
line 625: 
line 626: " Jump to the nearest unmatched "(" or "if" or "<tag>" if a:spflag == "bW"
line 627: " or the nearest unmatched "</tag>" or "endif" or ")" if a:spflag == "W".
line 628: " Return a "mark" for the original position, so that
line 629: "   let m = MultiMatch("bW", "n") ... execute m
line 630: " will return to the original position.  If there is a problem, do not
line 631: " move the cursor and return "", unless a count is given, in which case
line 632: " go up or down as many levels as possible and again return "".
line 633: " TODO This relies on the same patterns as % matching.  It might be a good
line 634: " idea to give it its own matching patterns.
line 635: fun! s:MultiMatch(spflag, mode)
line 730: 
line 731: " Search backwards for "if" or "while" or "<tag>" or ...
line 732: " and return "endif" or "endwhile" or "</tag>" or ... .
line 733: " For now, this uses b:match_words and the same script variables
line 734: " as s:Match_wrapper() .  Later, it may get its own patterns,
line 735: " either from a buffer variable or passed as arguments.
line 736: " fun! s:Autocomplete()
line 737: "   echo "autocomplete not yet implemented :-("
line 738: "   if !exists("b:match_words") || b:match_words == ""
line 739: "     return ""
line 740: "   end
line 741: "   let startpos = s:MultiMatch("bW")
line 742: "
line 743: "   if startpos == ""
line 744: "     return ""
line 745: "   endif
line 746: "   " - TODO:  figure out whether 'if' or '<tag>' matched, and construct
line 747: "   " - the appropriate closing.
line 748: "   let matchline = getline(".")
line 749: "   let curcol = col(".") - 1
line 750: "   " - TODO:  Change the s:all argument if there is a new set of match pats.
line 751: "   let regexp = s:Wholematch(matchline, s:all, curcol)
line 752: "   let suf = strlen(matchline) - matchend(matchline, regexp)
line 753: "   let prefix = (curcol ? '^.\{'  . curcol . '}\%(' : '^\%(')
line 754: "   let suffix = (suf ? '\).\{' . suf . '}$'  : '\)$')
line 755: "   " Reconstruct the version with unresolved backrefs.
line 756: "   let patBR = substitute(b:match_words.',', '[,:]*,[,:]*', ',', 'g')
line 757: "   let patBR = substitute(patBR, ':\{2,}', ':', "g")
line 758: "   " Now, set group and groupBR to the matching group: 'if:endif' or
line 759: "   " 'while:endwhile' or whatever.
line 760: "   let group = s:Choose(s:pat, matchline, ",", ":", prefix, suffix, patBR)
line 761: "   let i = matchend(group, s:notslash . ",")
line 762: "   let groupBR = strpart(group, i)
line 763: "   let group = strpart(group, 0, i-1)
line 764: "   " Now, matchline =~ prefix . substitute(group,':','\|','g') . suffix
line 765: "   if s:do_BR
line 766: "     let group = s:InsertRefs(groupBR, prefix, group, suffix, matchline)
line 767: "   endif
line 768: " " let g:group = group
line 769: "
line 770: "   " - TODO:  Construct the closing from group.
line 771: "   let fake = "end" . expand("<cword>")
line 772: "   execute startpos
line 773: "   return fake
line 774: " endfun
line 775: 
line 776: " Close all open structures.  "Get the heck out of here!"
line 777: " fun! s:Gthhoh()
line 778: "   let close = s:Autocomplete()
line 779: "   while strlen(close)
line 780: "     put=close
line 781: "     let close = s:Autocomplete()
line 782: "   endwhile
line 783: " endfun
line 784: 
line 785: " Parse special strings as typical skip arguments for searchpair():
line 786: "   s:foo becomes (current syntax item) =~ foo
line 787: "   S:foo becomes (current syntax item) !~ foo
line 788: "   r:foo becomes (line before cursor) =~ foo
line 789: "   R:foo becomes (line before cursor) !~ foo
line 790: fun! s:ParseSkip(str)
line 807: 
line 808: let &cpo = s:save_cpo
line 809: 
line 810: " vim:sts=2:sw=2:
finished sourcing /home/kguest/.vim/plugin/matchit.vim
chdir(/home/kguest/.vim/plugin)
fchdir() to previous dir
sourcing "/home/kguest/.vim/plugin/tSkeleton.vim"
line 1: " tSkeleton.vim
line 2: " @Author:      Thomas Link (samul AT web.de)
line 3: " @License:     GPL (see http://www.gnu.org/licenses/gpl.txt)
line 4: " @Created:     21-Sep-2004.
line 5: " @Last Change: 12-Aug-2005.
line 6: " @Revision:    2.0.1315
line 7: "
line 8: " vimscript #1160
line 9: " http://www.vim.org/scripts/script.php?script_id=1160
line 10: "
line 11: " TODO:
line 12: " - More latex & html bits
line 13: " - <tskel:post> embedded tag (evaluate some vim code on the visual region 
line 14: "   covering the final expansion)
line 15: " - Create maps/map files from ctags files?
line 16: 
line 17: 
line 18: if &cp || exists("loaded_tskeleton") "{{{2
line 19:     finish
line 20: endif
line 21: let loaded_tskeleton = 200
line 22: 
line 23: if !exists('loaded_genutils') "{{{2
line 24:     runtime plugin/genutils.vim
line 25:     if !exists('loaded_genutils')
line 26:         echoerr "tSkeleton: genutils (vimscript #197) is required"
line 27:         finish
line 28:     endif
line 29: endif
line 30: 
line 31: if !exists("g:tskelDir") "{{{2
line 32:     if has("win16") || has("win32") || has("win64")
line 33:         let g:tskelDir = $HOME ."/vimfiles/skeletons/"
line 34:     else
line 35:         let g:tskelDir = $HOME ."/.vim/skeletons/"
line 36:     endif
line 37: endif
line 38: if !isdirectory(g:tskelDir) "{{{2
line 39:     echoerr "tSkeleton: Please set g:tskelDir (". g:tskelDir .") first!"
line 40:     finish
line 41: endif
line 42: 
line 43: let g:tskelBitsDir = g:tskelDir ."bits/"
line 44: 
line 45: if !exists("g:tskelLicense") "{{{2
line 46:     let g:tskelLicense = "GPL (see http://www.gnu.org/licenses/gpl.txt)"
line 47: endif
line 48: 
line 49: if !exists("g:tskelMapLeader")     | let g:tskelMapLeader     = "<Leader>#"   | endif "{{{2
line 49:  let g:tskelMapLeader     = "<Leader>#"   | endif "{{{2
line 49:  endif "{{{2
line 50: if !exists("g:tskelMapInsert")     | let g:tskelMapInsert     = '<c-\><c-\>'  | endif "{{{2
line 50:  let g:tskelMapInsert     = '<c-\><c-\>'  | endif "{{{2
line 50:  endif "{{{2
line 51: if !exists("g:tskelPatternLeft")   | let g:tskelPatternLeft   = "<+"          | endif "{{{2
line 51:  let g:tskelPatternLeft   = "<+"          | endif "{{{2
line 51:  endif "{{{2
line 52: if !exists("g:tskelPatternRight")  | let g:tskelPatternRight  = "+>"          | endif "{{{2
line 52:  let g:tskelPatternRight  = "+>"          | endif "{{{2
line 52:  endif "{{{2
line 53: if !exists("g:tskelPatternCursor") | let g:tskelPatternCursor = "<+CURSOR+>"  | endif "{{{2
line 53:  let g:tskelPatternCursor = "<+CURSOR+>"  | endif "{{{2
line 53:  endif "{{{2
line 54: if !exists("g:tskelDateFormat")    | let g:tskelDateFormat    = "%d-%b-%Y"    | endif "{{{2
line 54:  let g:tskelDateFormat    = "%d-%b-%Y"    | endif "{{{2
line 54:  endif "{{{2
line 55: if !exists("g:tskelUserName")      | let g:tskelUserName      = "<+NAME+>"    | endif "{{{2
line 55:  let g:tskelUserName      = "<+NAME+>"    | endif "{{{2
line 55:  endif "{{{2
line 56: if !exists("g:tskelUserAddr")      | let g:tskelUserAddr      = "<+ADDRESS+>" | endif "{{{2
line 56:  let g:tskelUserAddr      = "<+ADDRESS+>" | endif "{{{2
line 56:  endif "{{{2
line 57: if !exists("g:tskelUserEmail")     | let g:tskelUserEmail     = "<+EMAIL+>"   | endif "{{{2
line 57:  let g:tskelUserEmail     = "<+EMAIL+>"   | endif "{{{2
line 57:  endif "{{{2
line 58: if !exists("g:tskelUserWWW")       | let g:tskelUserWWW       = "<+WWW+>"     | endif "{{{2
line 58:  let g:tskelUserWWW       = "<+WWW+>"     | endif "{{{2
line 58:  endif "{{{2
line 59: 
line 60: if !exists("g:tskelRevisionMarkerRx") | let g:tskelRevisionMarkerRx = '@Revision:\s\+' | endif "{{{2
line 60:  let g:tskelRevisionMarkerRx = '@Revision:\s\+' | endif "{{{2
line 60:  endif "{{{2
line 61: if !exists("g:tskelRevisionVerRx")    | let g:tskelRevisionVerRx = '\(RC\d*\|pre\d*\|p\d\+\|-\?\d\+\)\.' | endif "{{{2
line 61:  let g:tskelRevisionVerRx = '\(RC\d*\|pre\d*\|p\d\+\|-\?\d\+\)\.' | endif "{{{2
line 61:  endif "{{{2
line 62: if !exists("g:tskelRevisionGrpIdx")   | let g:tskelRevisionGrpIdx = 3 | endif "{{{2
line 62:  let g:tskelRevisionGrpIdx = 3 | endif "{{{2
line 62:  endif "{{{2
line 63: 
line 64: if !exists("g:tskelMaxRecDepth") | let g:tskelMaxRecDepth = 10 | endif "{{{2
line 64:  let g:tskelMaxRecDepth = 10 | endif "{{{2
line 64:  endif "{{{2
line 65: if !exists("g:tskelChangeDir")   | let g:tskelChangeDir   = 1  | endif "{{{2
line 65:  let g:tskelChangeDir   = 1  | endif "{{{2
line 65:  endif "{{{2
line 66: 
line 67: if !exists("g:tskelMenuPrefix")   | let g:tskelMenuPrefix  = 'TSke&l'    | endif "{{{2
line 67:  let g:tskelMenuPrefix  = 'TSke&l'    | endif "{{{2
line 67:  endif "{{{2
line 68: if !exists("g:tskelMenuCache")    | let g:tskelMenuCache = '.tskelmenu' | endif "{{{2
line 68:  let g:tskelMenuCache = '.tskelmenu' | endif "{{{2
line 68:  endif "{{{2
line 69: if !exists("g:tskelMenuPriority") | let g:tskelMenuPriority = 90 | endif "{{{2
line 69:  let g:tskelMenuPriority = 90 | endif "{{{2
line 69:  endif "{{{2
line 70: 
line 71: if !exists("g:tskelPopupNumbered") | let g:tskelPopupNumbered = 1 | endif "{{{2
line 71:  let g:tskelPopupNumbered = 1 | endif "{{{2
line 71:  endif "{{{2
line 72: 
line 73: if !exists("g:tskelKeyword_viki") | let g:tskelKeyword_viki = '\(#\|{\)\?[^#{[:blank:]]\{-}' | endif "{{{2
line 73:  let g:tskelKeyword_viki = '\(#\|{\)\?[^#{[:blank:]]\{-}' | endif "{{{2
line 73:  endif "{{{2
line 74: if !exists("g:tskelKeyword_html") | let g:tskelKeyword_html = '<\?[^>[:blank:]]\{-}' | endif "{{{2
line 74:  let g:tskelKeyword_html = '<\?[^>[:blank:]]\{-}' | endif "{{{2
line 74:  endif "{{{2
line 75: if !exists("g:tskelKeyword_tex")  | let g:tskelKeyword_tex = '\\\?\w\{-}' | endif "{{{2
line 75:  let g:tskelKeyword_tex = '\\\?\w\{-}' | endif "{{{2
line 75:  endif "{{{2
line 76: 
line 77: if !exists("g:tskelBitGroup_php") "{{{2
line 78:     let g:tskelBitGroup_php = "php\nhtml"
line 79: endif
line 80: 
line 81: let s:tskelScratchIdx  = 0
line 82: let s:tskelScratchMax  = 0
line 83: let s:tskelDestBufNr   = -1
line 84: let s:tskelBuiltMenu   = 0
line 85: let s:tskelSetFiletype = 1
line 86: let s:tskelLine        = 0
line 87: let s:tskelCol         = 0
line 88: let s:tskelDidSetup    = 0
line 94: let s:tskelPattern     = g:tskelPatternLeft ."\\(" ."&.\\{-}\\|b:.\\{-}\\|g:.\\{-}\\|bit:.\\{-}\\|tskel:.\\{-}" ."\\|?.\\{-}?" ."\\|call:\\('[^']*'\\|\"\\(\\\\\"\\|[^\"]\\)*\"\\|[bgs]:\\|.\\)\\{-1,}" ."\\|[a-zA-Z ]\\+" ."\\)\\(: *.\\{-} *\\)\\?". g:tskelPatternRight
line 95: 
line 96: fun! TSkeletonFillIn(bit, ...) "{{{3
line 146: 
line 147: fun! <SID>HandleTag(match, filetype) "{{{3
line 166: 
line 167: " <SID>SetCursor(from, to, ?mode='n', ?findOnly)
line 168: fun! <SID>SetCursor(from, to, ...) "{{{3
line 203: 
line 204: fun! <SID>Var(arg) "{{{3
line 211: 
line 212: fun! <SID>Exec(arg) "{{{3
line 215: 
line 216: fun! TSkelIncreaseIndex(var) "{{{3
line 220: 
line 221: fun! <SID>Query(arg) "{{{3
line 263: 
line 264: fun! <SID>QuerySeparator(txt) "{{{3
line 270: 
line 271: fun! <SID>GetVarName(name, global) "{{{3
line 280: 
line 281: fun! <SID>SaveBitProcess(name, match, global) "{{{3
line 292: 
line 293: fun! <SID>GetBitProcess(name, global) "{{{3
line 299: 
line 300: fun! <SID>EvalBitProcess(name, global) "{{{3
line 312: 
line 313: fun! <SID>Modify(text, modifier) "{{{3
line 342: 
line 343: fun! <SID>Dispatch(name) "{{{3
line 352: 
line 353: fun! <SID>Call(fn) "{{{3
line 356: 
line 357: fun! <SID>Expand(bit, ...) "{{{3
line 390: 
line 391: fun! TSkeletonGetVar(name, ...) "{{{3
line 400: 
line 401: fun! TSkeletonEvalInDestBuffer(code) "{{{3
line 404: 
line 405: fun! TSkeletonExecInDestBuffer(code) "{{{3
line 418: 
line 419: if !exists('*TSkeleton_FILE_DIRNAME') "{{{2
line 420:     fun! TSkeleton_FILE_DIRNAME() "{{{3
line 423: endif
line 424: 
line 425: if !exists('*TSkeleton_FILE_SUFFIX') "{{{2
line 426:     fun! TSkeleton_FILE_SUFFIX() "{{{3
line 429: endif
line 430: 
line 431: if !exists('*TSkeleton_FILE_NAME_ROOT') "{{{2
line 432:     fun! TSkeleton_FILE_NAME_ROOT() "{{{3
line 435: endif
line 436: 
line 437: if !exists('*TSkeleton_FILE_NAME') "{{{2
line 438:     fun! TSkeleton_FILE_NAME() "{{{3
line 441: endif
line 442: 
line 443: if !exists('*TSkeleton_NOTE') "{{{2
line 444:     fun! TSkeleton_NOTE() "{{{3
line 449: endif
line 450: 
line 451: if !exists('*TSkeleton_DATE') "{{{2
line 452:     fun! TSkeleton_DATE() "{{{3
line 455: endif
line 456: 
line 457: if !exists('*TSkeleton_TIME') "{{{2
line 458:     fun! TSkeleton_TIME() "{{{3
line 461: endif
line 462: 
line 463: if !exists('*TSkeleton_AUTHOR') "{{{2
line 464:     fun! TSkeleton_AUTHOR() "{{{3
line 467: endif
line 468: 
line 469: if !exists('*TSkeleton_EMAIL') "{{{2
line 470:     fun! TSkeleton_EMAIL() "{{{3
line 475: endif
line 476: 
line 477: if !exists('*TSkeleton_WEBSITE') "{{{2
line 478:     fun! TSkeleton_WEBSITE() "{{{3
line 481: endif
line 482: 
line 483: if !exists('*TSkeleton_LICENSE') "{{{2
line 484:     fun! TSkeleton_LICENSE() "{{{3
line 487: endif
line 488: 
line 489: fun! TSkeletonSetup(template, ...) "{{{3
line 514: 
line 515: fun! TSkeletonSelectTemplate(ArgLead, CmdLine, CursorPos) "{{{3
line 523: 
line 525: command! -nargs=* -complete=custom,TSkeletonSelectTemplate TSkeletonSetup  call TSkeletonSetup(<f-args>)
line 526: 
line 527: if has("browse") "{{{2
line 528:     fun! <SID>TSkeletonBrowse(save, title, initdir, default) "{{{3
line 531: else
line 532:     fun! <SID>TSkeletonBrowse(save, title, initdir, default) "{{{3
line 540: endif
line 541: 
line 542: " TSkeletonEdit(?dir)
line 543: fun! TSkeletonEdit(...) "{{{3
line 551: command! -nargs=* -complete=custom,TSkeletonSelectTemplate TSkeletonEdit  call TSkeletonEdit(<f-args>)
line 552: 
line 553: " TSkeletonNewFile(?template, ?dir, ?fileName)
line 554: fun! TSkeletonNewFile(...) "{{{3
line 588: command! -nargs=* -complete=custom,TSkeletonSelectTemplate TSkeletonNewFile  call TSkeletonNewFile(<f-args>)
line 589: 
line 590: 
line 591: " GlobBits(path, ?flatten=1)
line 592: fun! <SID>GlobBits(path, ...) "{{{3
line 606: 
line 607: fun! <SID>PrepareMiniBit(bit, expansion)
line 610: 
line 611: fun! <SID>MiniBits(filename)
line 620: 
line 621: fun! <SID>SavePos()
line 624: 
line 625: fun! <SID>RestorePos(saved)
line 628: 
line 629: fun! <SID>ExpandMiniBit(bit)
line 642: 
line 643: " <SID>Collect(array, function, ?onlyfirst=0, ?sep="\n")
line 644: fun! <SID>Collect(array, function, ...) "{{{3
line 675: 
line 676: fun! <SID>sprintf1(string, arg) "{{{3
line 681: 
line 682: fun! <SID>GetBitGroup(filetype, ...) "{{{3
line 695: 
line 696: fun! <SID>PurifyBits(bits) "{{{3
line 701: 
line 702: " <SID>PrepareMenu(type, ?menuprefix='')
line 703: fun! <SID>PrepareMenu(type, ...) "{{{3
line 758: 
line 759: fun! <SID>GetMenuCacheFilename(type) "{{{3
line 770: 
line 771: fun! <SID>PrepareMenuEntry(name, subpriority) "{{{3
line 783: 
line 784: fun! <SID>BuildBufferMenu() "{{{3
line 801: 
line 802: fun! <SID>GetMenuCache(type) "{{{3
line 808: 
line 809: " <SID>PrepareBits(?filetype=&ft, ?reset=0)
line 810: fun! <SID>PrepareBits(...) "{{{3
line 836: 
line 837: fun! <SID>BitsBuilt4Type(type) "{{{3
line 840: 
line 841: fun! <SID>PrepareConditionEntry(pattern, eligible) "{{{3
line 846: 
line 847: fun! <SID>ReadFile(filename)
line 862: 
line 863: fun! <SID>PrepareMap4Type(type, anyway) "{{{3
line 874: 
line 875: fun! <SID>PrepareMenu4Type(type) "{{{3
line 882: 
line 883: fun! <SID>GetBits4Type(type) "{{{3
line 886: 
line 887: fun! <SID>PrepareBits4Type(type, anyway) "{{{3
line 896: 
line 897: fun! <SID>GetMiniBits(type)
line 903: 
line 904: command! TSkeletonBitReset call <SID>PrepareBits('', 1)
line 905: 
line 906: fun! <SID>ResetBits() "{{{3
line 909: 
line 910: fun! TSkeletonSelectBit(ArgLead, CmdLine, CursorPos) "{{{3
line 915: 
line 916: fun! <SID>SetLine() "{{{3
line 920: 
line 921: fun! <SID>UnsetLine() "{{{3
line 925: 
line 926: fun! <SID>GetElibigleBits(type) "{{{3
line 932: 
line 933: fun! <SID>EligibleBits(type) "{{{3
line 945: 
line 946: fun! <SID>EditScratchBuffer(...)
line 967: 
line 968: " <SID>RetrieveBit(agent, bit, ?indent, ?filetype) => setCursor?; @t=expanded template bit
line 969: fun! <SID>RetrieveBit(agent, bit, ...) "{{{3
line 1016: 
line 1017: fun! <SID>RetrieveAgent_read(bit)
line 1020: 
line 1021: fun! <SID>RetrieveAgent_text(bit)
line 1030: 
line 1031: fun! TSkeletonGetBit(bit) "{{{3
line 1045: 
line 1046: fun! <SID>InsertBit(agent, bit, mode) "{{{3
line 1070: 
line 1071: fun! <SID>InsertTReg(mode)
line 1079: 
line 1080: fun! <SID>GetIndent(line) "{{{3
line 1083: 
line 1084: fun! <SID>IndentLines(from, to, indent) "{{{3
line 1087: 
line 1088: fun! <SID>CharRx(char) "{{{3
line 1098: 
line 1099: fun! <SID>BitRx(bit, escapebs) "{{{3
line 1103: 
line 1104: fun! <SID>SelectBitForMode(type, bit) "{{{3
line 1123: 
line 1124: fun! <SID>SelectBit(bit, ...) "{{{3
line 1130: 
line 1131: fun! <SID>SelectAndInsert(bit, mode)
line 1149: 
line 1150: " TSkeletonBit(bit, ?mode='n')
line 1151: fun! TSkeletonBit(bit, ...) "{{{3
line 1177: 
line 1179: command! -nargs=1 -complete=custom,TSkeletonSelectBit TSkeletonBit call TSkeletonBit(<q-args>)
line 1180: 
line 1181: if !hasmapto("TSkeletonBit") "{{{2
line 1182:     " noremap <unique> <Leader>tt ""diw:TSkeletonBit <c-r>"
line 1183:     exec "noremap <unique> ". g:tskelMapLeader ."t :TSkeletonBit "
line 1183: noremap <unique> <Leader>#t :TSkeletonBit 
line 1184: endif
line 1185: 
line 1186: fun! <SID>IsInsertMode(mode)
line 1189: 
line 1190: fun! <SID>IsEOL(mode)
line 1193: 
line 1194: fun! <SID>IsPopup(mode)
line 1197: 
line 1198: fun! <SID>BitMenu(bit, mode, ft)
line 1241:     
line 1242: " TSkeletonExpandBitUnderCursor(mode, ?bit)
line 1243: fun! TSkeletonExpandBitUnderCursor(mode, ...) "{{{3
line 1299: 
line 1300: if !hasmapto("TSkeletonExpandBitUnderCursor") "{{{2
line 1301:     exec "nnoremap <unique> ". g:tskelMapLeader ."# :call TSkeletonExpandBitUnderCursor('n')<cr>"
line 1301: nnoremap <unique> <Leader>## :call TSkeletonExpandBitUnderCursor('n')<cr>
line 1302:     exec "inoremap <unique> ". g:tskelMapInsert ." <esc>:call TSkeletonExpandBitUnderCursor('i')<cr>"
line 1302: inoremap <unique> <c-\><c-\> <esc>:call TSkeletonExpandBitUnderCursor('i')<cr>
line 1303: endif
line 1304: 
line 1305: fun! TSkeletonGoToNextTag() "{{{3
line 1336: 
line 1337: fun! TSkeletonMapGoToNextTag() "{{{3
line 1342: 
line 1343: fun! TSkeletonLateExpand() "{{{3
line 1370: 
line 1371: if !hasmapto("TSkeletonLateExpand()") "{{{2
line 1372:     exec "nnoremap <unique> ". g:tskelMapLeader ."x :call TSkeletonLateExpand()<cr>"
line 1372: nnoremap <unique> <Leader>#x :call TSkeletonLateExpand()<cr>
line 1373:     exec "vnoremap <unique> ". g:tskelMapLeader ."x <esc>`<:call TSkeletonLateExpand()<cr>"
line 1373: vnoremap <unique> <Leader>#x <esc>`<:call TSkeletonLateExpand()<cr>
line 1374: endif
line 1375: 
line 1376: 
line 1377: " misc utilities {{{1
line 1378: fun! TSkeletonIncreaseRevisionNumber() "{{{3
line 1385: 
line 1386: " fun! ToirtoiseSvnLogMsg() "{{{3
line 1387: "     let rev = exists("b:revisionRx") ? b:revisionRx : g:tskelRevisionMarkerRx
line 1388: "     let ver = exists("b:versionRx")  ? b:versionRx  : g:tskelRevisionVerRx
line 1389: "     normal m`
line 1390: "     let rv = ''
line 1391: "     exe '%g/'.rev.'\(\('.ver.'\)*-\?\d\+\)/let rv=getline(".")'
line 1392: "     normal ``
line 1393: "     return rv
line 1394: " endf
line 1395: 
line 1396: " autocmd BufWritePre * call TSkeletonIncreaseRevisionNumber()
line 1397: 
line 1398: fun! TSkeletonCleanUpBibEntry() "{{{3
line 1404: command! TSkeletonCleanUpBibEntry call TSkeletonCleanUpBibEntry()
line 1405: 
line 1406: " TSkeletonRepeat(n, string, ?sep="\n")
line 1407: fun! TSkeletonRepeat(n, string, ...) "{{{3
line 1417: 
line 1418: fun! TSkeletonInsertTable(rows, cols, rowbeg, rowend, celljoin) "{{{3
line 1440: 
line 1441: 
line 1442: if !s:tskelDidSetup "{{{2
line 1443:     if !exists("g:tskelDontSetup") "{{{2
line 1444:         autocmd BufNewFile *.bat       TSkeletonSetup batch.bat
line 1445:         autocmd BufNewFile *.tex       TSkeletonSetup latex.tex
line 1446:         autocmd BufNewFile tc-*.rb     TSkeletonSetup tc-ruby.rb
line 1447:         autocmd BufNewFile *.rb        TSkeletonSetup ruby.rb
line 1448:         autocmd BufNewFile *.rbx       TSkeletonSetup ruby.rb
line 1449:         autocmd BufNewFile *.sh        TSkeletonSetup shell.sh
line 1450:         autocmd BufNewFile *.txt       TSkeletonSetup text.txt
line 1451:         autocmd BufNewFile *.vim       TSkeletonSetup plugin.vim
line 1452:         autocmd BufNewFile *.inc.php   TSkeletonSetup php.inc.php
line 1453:         autocmd BufNewFile *.class.php TSkeletonSetup php.class.php
line 1454:         autocmd BufNewFile *.php       TSkeletonSetup php.php
line 1455:         autocmd BufNewFile *.tpl       TSkeletonSetup smarty.tpl
line 1456:         autocmd BufNewFile *.html      TSkeletonSetup html.html
line 1457:         autocmd BufNewFile *.py        TSkeletonSetup python.py
line 1458:     endif
line 1459: 
line 1460:     autocmd BufNewFile,BufRead */skeletons/* if s:tskelSetFiletype | setf tskeleton | endif
line 1461:     autocmd BufEnter * if (g:tskelMenuCache != '') | call <SID>BuildBufferMenu() | endif
line 1462: 
line 1463:     autocmd FileType bib if !hasmapto(":TSkeletonCleanUpBibEntry") | exec "noremap <buffer> ". g:tskelMapLeader ."c :TSkeletonCleanUpBibEntry<cr>" | endif
line 1464: 
line 1465:     let s:tskelDidSetup = 1
line 1466: endif
line 1467: 
line 1468: finish
finished sourcing /home/kguest/.vim/plugin/tSkeleton.vim
chdir(/home/kguest/.vim/plugin)
fchdir() to previous dir
sourcing "/home/kguest/.vim/plugin/vcscommand.vim"
line 1: " vim600: set foldmethod=marker:
line 2: "
line 3: " Vim plugin to assist in working with files under control of various Version
line 4: " Control Systems, such as CVS, SVN, SVK, and git.
line 5: "
line 6: " Maintainer:    Bob Hiestand <bob.hiestand@gmail.com>
line 7: " Version:       Beta 29
line 8: " License:
line 9: " Copyright (c) 2008 Bob Hiestand
line 10: "
line 11: " Permission is hereby granted, free of charge, to any person obtaining a copy
line 12: " of this software and associated documentation files (the "Software"), to
line 13: " deal in the Software without restriction, including without limitation the
line 14: " rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
line 15: " sell copies of the Software, and to permit persons to whom the Software is
line 16: " furnished to do so, subject to the following conditions:
line 17: "
line 18: " The above copyright notice and this permission notice shall be included in
line 19: " all copies or substantial portions of the Software.
line 20: "
line 21: " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
line 22: " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
line 23: " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
line 24: " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
line 25: " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
line 26: " FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
line 27: " IN THE SOFTWARE.
line 28: "
line 29: " Section: Documentation {{{1
line 30: "
line 31: " Provides functions to invoke various source control commands on the current
line 32: " file (either the current buffer, or, in the case of an directory buffer, the
line 33: " directory and all subdirectories associated with the current buffer).  The
line 34: " output of the commands is captured in a new scratch window.
line 35: "
line 36: " This plugin needs additional extension plugins, each  specific to a source
line 37: " control system, to function.  Those plugins should be placed in a
line 38: " subdirectory of the standard plugin directory named 'vcscommand'.  Several
line 39: " options include the name of the version control system in the option name.
line 40: " Such options use the placeholder text '{VCSType}', which would be replaced
line 41: " in actual usage with 'CVS' or 'SVN', for instance.
line 42: "
line 43: " Command documentation {{{2
line 44: "
line 45: " VCSAdd           Adds the current file to source control.
line 46: "
line 47: " VCSAnnotate      Displays the current file with each line annotated with the
line 48: "                  version in which it was most recently changed.  If an
line 49: "                  argument is given, the argument is used as a revision
line 50: "                  number to display.  If not given an argument, it uses the
line 51: "                  most recent version of the file on the current branch.
line 52: "                  Additionally, if the current buffer is a VCSAnnotate buffer
line 53: "                  already, the version number on the current line is used.
line 54: "
line 55: " VCSBlame         Alias for 'VCSAnnotate'.
line 56: "
line 57: " VCSCommit[!]     Commits changes to the current file to source control.
line 58: "
line 59: "                  If called with arguments, the arguments are the log message.
line 60: "
line 61: "                  If '!' is used, an empty log message is committed.
line 62: "
line 63: "                  If called with no arguments, this is a two-step command.
line 64: "                  The first step opens a buffer to accept a log message.
line 65: "                  When that buffer is written, it is automatically closed and
line 66: "                  the file is committed using the information from that log
line 67: "                  message.  The commit can be abandoned if the log message
line 68: "                  buffer is deleted or wiped before being written.
line 69: "
line 70: " VCSDelete        Deletes the current file and removes it from source control.
line 71: "
line 72: " VCSDiff          With no arguments, this displays the differences between
line 73: "                  the current file and its parent version under source
line 74: "                  control in a new scratch buffer.
line 75: "
line 76: "                  With one argument, the diff is performed on the
line 77: "                  current file against the specified revision.
line 78: "
line 79: "                  With two arguments, the diff is performed between the
line 80: "                  specified revisions of the current file.
line 81: "
line 82: "                  This command uses the 'VCSCommand{VCSType}DiffOpt' variable
line 83: "                  to specify diff options.  If that variable does not exist,
line 84: "                  a plugin-specific default is used.  If you wish to have no
line 85: "                  options, then set it to the empty string.
line 86: "
line 87: " VCSGotoOriginal  Jumps to the source buffer if the current buffer is a VCS
line 88: "                  scratch buffer.  If VCSGotoOriginal[!] is used, remove all
line 89: "                  VCS scratch buffers associated with the original file.
line 90: "
line 91: " VCSInfo          Displays extended information about the current file in a
line 92: "                  new scratch buffer. 
line 93: "
line 94: " VCSLock          Locks the current file in order to prevent other users from
line 95: "                  concurrently modifying it.  The exact semantics of this
line 96: "                  command depend on the underlying VCS.
line 97: "
line 98: " VCSLog           Displays the version history of the current file in a new
line 99: "                  scratch buffer.
line 100: "
line 101: " VCSRemove        Alias for 'VCSDelete'.
line 102: "
line 103: " VCSRevert        Replaces the modified version of the current file with the
line 104: "                  most recent version from the repository.
line 105: "
line 106: " VCSReview        Displays a particular version of the current file in a new
line 107: "                  scratch buffer.  If no argument is given, the most recent
line 108: "                  version of the file on the current branch is retrieved.
line 109: "
line 110: " VCSStatus        Displays versioning information about the current file in a
line 111: "                  new scratch buffer.
line 112: "
line 113: " VCSUnlock        Unlocks the current file in order to allow other users from
line 114: "                  concurrently modifying it.  The exact semantics of this
line 115: "                  command depend on the underlying VCS.
line 116: "
line 117: " VCSUpdate        Updates the current file with any relevant changes from the
line 118: "                  repository.
line 119: "
line 120: " VCSVimDiff       Uses vimdiff to display differences between versions of the
line 121: "                  current file.
line 122: "
line 123: "                  If no revision is specified, the most recent version of the
line 124: "                  file on the current branch is used.  With one argument,
line 125: "                  that argument is used as the revision as above.  With two
line 126: "                  arguments, the differences between the two revisions is
line 127: "                  displayed using vimdiff.
line 128: "
line 129: "                  With either zero or one argument, the original buffer is
line 130: "                  used to perform the vimdiff.  When the scratch buffer is
line 131: "                  closed, the original buffer will be returned to normal
line 132: "                  mode.
line 133: "
line 134: "                  Once vimdiff mode is started using the above methods,
line 135: "                  additional vimdiff buffers may be added by passing a single
line 136: "                  version argument to the command.  There may be up to 4
line 137: "                  vimdiff buffers total.
line 138: "
line 139: "                  Using the 2-argument form of the command resets the vimdiff
line 140: "                  to only those 2 versions.  Additionally, invoking the
line 141: "                  command on a different file will close the previous vimdiff
line 142: "                  buffers.
line 143: "
line 144: " Mapping documentation: {{{2
line 145: "
line 146: " By default, a mapping is defined for each command.  User-provided mappings
line 147: " can be used instead by mapping to <Plug>CommandName, for instance:
line 148: "
line 149: " nmap ,ca <Plug>VCSAdd
line 150: "
line 151: " The default mappings are as follow:
line 152: "
line 153: "   <Leader>ca VCSAdd
line 154: "   <Leader>cn VCSAnnotate
line 155: "   <Leader>cc VCSCommit
line 156: "   <Leader>cD VCSDelete
line 157: "   <Leader>cd VCSDiff
line 158: "   <Leader>cg VCSGotoOriginal
line 159: "   <Leader>cG VCSGotoOriginal!
line 160: "   <Leader>ci VCSInfo
line 161: "   <Leader>cl VCSLog
line 162: "   <Leader>cL VCSLock
line 163: "   <Leader>cr VCSReview
line 164: "   <Leader>cs VCSStatus
line 165: "   <Leader>cu VCSUpdate
line 166: "   <Leader>cU VCSUnlock
line 167: "   <Leader>cv VCSVimDiff
line 168: "
line 169: " Options documentation: {{{2
line 170: "
line 171: " Several variables are checked by the script to determine behavior as follow:
line 172: "
line 173: " VCSCommandCommitOnWrite
line 174: "   This variable, if set to a non-zero value, causes the pending commit to
line 175: "   take place immediately as soon as the log message buffer is written.  If
line 176: "   set to zero, only the VCSCommit mapping will cause the pending commit to
line 177: "   occur.  If not set, it defaults to 1.
line 178: "
line 179: " VCSCommandDeleteOnHide
line 180: "   This variable, if set to a non-zero value, causes the temporary VCS result
line 181: "   buffers to automatically delete themselves when hidden.
line 182: "
line 183: " VCSCommand{VCSType}DiffOpt
line 184: "   This variable, if set, determines the options passed to the diff command
line 185: "   of the underlying VCS.  Each VCS plugin defines a default value.
line 186: "
line 187: " VCSCommandDiffSplit
line 188: "   This variable overrides the VCSCommandSplit variable, but only for buffers
line 189: "   created with VCSVimDiff.
line 190: "
line 191: " VCSCommandDisableAll
line 192: "   This variable, if set, prevents the plugin or any extensions from loading
line 193: "   at all.  This is useful when a single runtime distribution is used on
line 194: "   multiple systems with varying versions.
line 195: "
line 196: " VCSCommandDisableMappings
line 197: "   This variable, if set to a non-zero value, prevents the default command
line 198: "   mappings from being set.
line 199: "
line 200: " VCSCommandDisableExtensionMappings
line 201: "   This variable, if set to a non-zero value, prevents the default command
line 202: "   mappings from being set for commands specific to an individual VCS.
line 203: "
line 204: " VCSCommandEdit
line 205: "   This variable controls whether to split the current window to display a
line 206: "   scratch buffer ('split'), or to display it in the current buffer ('edit').
line 207: "   If not set, it defaults to 'split'.
line 208: "
line 209: " VCSCommandEnableBufferSetup
line 210: "   This variable, if set to a non-zero value, activates VCS buffer management
line 211: "   mode.  This mode means that the buffer variable 'VCSRevision' is set if
line 212: "   the file is VCS-controlled.  This is useful for displaying version
line 213: "   information in the status bar.  Additional options may be set by
line 214: "   individual VCS plugins.
line 215: "
line 216: " VCSCommandMappings
line 217: "   This variable, if set, overrides the default mappings used for shortcuts.
line 218: "   It should be a List of 2-element Lists, each containing a shortcut and
line 219: "   function name pair.
line 220: "
line 221: " VCSCommandMapPrefix
line 222: "   This variable, if set, overrides the default mapping prefix ('<Leader>c').
line 223: "   This allows customization of the mapping space used by the vcscommand
line 224: "   shortcuts.
line 225: "
line 226: " VCSCommandResultBufferNameExtension
line 227: "   This variable, if set to a non-blank value, is appended to the name of the
line 228: "   VCS command output buffers.  For example, '.vcs'.  Using this option may
line 229: "   help avoid problems caused by autocommands dependent on file extension.
line 230: "
line 231: " VCSCommandResultBufferNameFunction
line 232: "   This variable, if set, specifies a custom function for naming VCS command
line 233: "   output buffers.  This function will be passed the following arguments:
line 234: "
line 235: "   command - name of the VCS command being executed (such as 'Log' or
line 236: "   'Diff').
line 237: "
line 238: "   originalBuffer - buffer number of the source file.
line 239: "
line 240: "   vcsType - type of VCS controlling this file (such as 'CVS' or 'SVN').
line 241: "
line 242: "   statusText - extra text associated with the VCS action (such as version
line 243: "   numbers).
line 244: "
line 245: " VCSCommandSplit
line 246: "   This variable controls the orientation of the various window splits that
line 247: "   may occur (such as with VCSVimDiff, when using a VCS command on a VCS
line 248: "   command buffer, or when the 'VCSCommandEdit' variable is set to 'split'.
line 249: "   If set to 'horizontal', the resulting windows will be on stacked on top of
line 250: "   one another.  If set to 'vertical', the resulting windows will be
line 251: "   side-by-side.  If not set, it defaults to 'horizontal' for all but
line 252: "   VCSVimDiff windows.
line 253: "
line 254: " VCSCommandVCSTypeOverride
line 255: "   This variable allows the VCS type detection to be overridden on a
line 256: "   path-by-path basis.  The value of this variable is expected to be a List
line 257: "   of Lists.  Each high-level List item is a List containing two elements.
line 258: "   The first element is a regular expression that will be matched against the
line 259: "   full file name of a given buffer.  If it matches, the second element will
line 260: "   be used as the VCS type.
line 261: "
line 262: " Event documentation {{{2
line 263: "   For additional customization, VCSCommand.vim uses User event autocommand
line 264: "   hooks.  Each event is in the VCSCommand group, and different patterns
line 265: "   match the various hooks.
line 266: "
line 267: "   For instance, the following could be added to the vimrc to provide a 'q'
line 268: "   mapping to quit a VCS scratch buffer:
line 269: "
line 270: "   augroup VCSCommand
line 271: "     au VCSCommand User VCSBufferCreated silent! nmap <unique> <buffer> q :bwipeout<cr> 
line 272: "   augroup END
line 273: "
line 274: "   The following hooks are available:
line 275: "
line 276: "   VCSBufferCreated           This event is fired just after a VCS command
line 277: "                              output buffer is created.  It is executed
line 278: "                              within the context of the new buffer.
line 279: "
line 280: "   VCSBufferSetup             This event is fired just after VCS buffer setup
line 281: "                              occurs, if enabled.
line 282: "
line 283: "   VCSPluginInit              This event is fired when the VCSCommand plugin
line 284: "                              first loads.
line 285: "
line 286: "   VCSPluginFinish            This event is fired just after the VCSCommand
line 287: "                              plugin loads.
line 288: "
line 289: "   VCSVimDiffFinish           This event is fired just after the VCSVimDiff
line 290: "                              command executes to allow customization of,
line 291: "                              for instance, window placement and focus.
line 292: "
line 293: " Section: Plugin header {{{1
line 294: 
line 295: " loaded_VCSCommand is set to 1 when the initialization begins, and 2 when it
line 296: " completes.  This allows various actions to only be taken by functions after
line 297: " system initialization.
line 298: 
line 299: if exists('VCSCommandDisableAll')
line 300: ^Ifinish
line 301: endif
line 302: 
line 303: if exists('loaded_VCSCommand')
line 304: ^Ifinish
line 305: endif
line 306: let loaded_VCSCommand = 1
line 307: 
line 308: if v:version < 700
line 309: ^Iechohl WarningMsg|echomsg 'VCSCommand requires at least VIM 7.0'|echohl None
line 309: echomsg 'VCSCommand requires at least VIM 7.0'|echohl None
line 309: echohl None
line 310: ^Ifinish
line 311: endif
line 312: 
line 313: let s:save_cpo=&cpo
line 314: set cpo&vim
line 315: 
line 316: " Section: Event group setup {{{1
line 317: 
line 318: augroup VCSCommand
line 319: augroup END
line 320: 
line 321: augroup VCSCommandCommit
line 322: augroup END
line 323: 
line 324: " Section: Plugin initialization {{{1
line 325: silent do VCSCommand User VCSPluginInit
No matching autocommands
line 326: 
line 327: " Section: Constants declaration {{{1
line 328: 
line 329: let g:VCSCOMMAND_IDENTIFY_EXACT = 1
line 330: let g:VCSCOMMAND_IDENTIFY_INEXACT = -1
line 331: 
line 332: " Section: Script variable initialization {{{1
line 333: 
line 334: " plugin-specific information:  {vcs -> [script, {command -> function}, {key -> mapping}]}
line 335: let s:plugins = {}
line 336: 
line 337: " temporary values of overridden configuration variables
line 338: let s:optionOverrides = {}
line 339: 
line 340: " state flag used to vary behavior of certain automated actions
line 341: let s:isEditFileRunning = 0
line 342: 
line 343: " commands needed to restore diff buffers to their original state
line 344: unlet! s:vimDiffRestoreCmd
line 345: 
line 346: " original buffer currently reflected in vimdiff windows
line 347: unlet! s:vimDiffSourceBuffer
line 348: 
line 349: " 
line 350: unlet! s:vimDiffScratchList
line 351: 
line 352: " Section: Utility functions {{{1
line 353: 
line 354: " Function: s:ReportError(mapping) {{{2
line 355: " Displays the given error in a consistent faction.  This is intended to be
line 356: " invoked from a catch statement.
line 357: 
line 358: function! s:ReportError(error)
line 361: 
line 362: 
line 363: " Function: s:CreateMapping(shortcut, expansion, display) {{{2
line 364: " Creates the given mapping by prepending the contents of
line 365: " 'VCSCommandMapPrefix' (by default '<Leader>c') to the given shortcut and
line 366: " mapping it to the given plugin function.  If a mapping exists for the
line 367: " specified shortcut + prefix, emit an error but continue.  If a mapping
line 368: " exists for the specified function, do nothing.
line 369: 
line 370: function! s:CreateMapping(shortcut, expansion, display)
line 382: 
line 383: " Function: s:ExecuteExtensionMapping(mapping) {{{2
line 384: " Invokes the appropriate extension mapping depending on the type of the
line 385: " current buffer.
line 386: 
line 387: function! s:ExecuteExtensionMapping(mapping)
line 398: 
line 399: " Function: s:ExecuteVCSCommand(command, argList) {{{2
line 400: " Calls the indicated plugin-specific VCS command on the current buffer.
line 401: " Returns: buffer number of resulting output scratch buffer, or -1 if an error
line 402: " occurs.
line 403: 
line 404: function! s:ExecuteVCSCommand(command, argList)
line 435: 
line 436: " Function: s:GenerateResultBufferName(command, originalBuffer, vcsType, statusText) {{{2
line 437: " Default method of generating the name for VCS result buffers.  This can be
line 438: " overridden with the VCSResultBufferNameFunction variable.
line 439: 
line 440: function! s:GenerateResultBufferName(command, originalBuffer, vcsType, statusText)
line 455: 
line 456: " Function: s:GenerateResultBufferNameWithExtension(command, originalBuffer, vcsType, statusText) {{{2
line 457: " Method of generating the name for VCS result buffers that uses the original
line 458: " file name with the VCS type and command appended as extensions.
line 459: 
line 460: function! s:GenerateResultBufferNameWithExtension(command, originalBuffer, vcsType, statusText)
line 475: 
line 476: " Function: s:EditFile(command, originalBuffer, statusText) {{{2
line 477: " Creates a new buffer of the given name and associates it with the given
line 478: " original buffer.
line 479: 
line 480: function! s:EditFile(command, originalBuffer, statusText)
line 527: 
line 528: " Function: s:SetupBuffer() {{{2
line 529: " Attempts to set the b:VCSCommandBufferInfo variable
line 530: 
line 531: function! s:SetupBuffer()
line 558: 
line 559: " Function: s:MarkOrigBufferForSetup(buffer) {{{2
line 560: " Resets the buffer setup state of the original buffer for a given VCS scratch
line 561: " buffer.
line 562: " Returns:  The VCS buffer number in a passthrough mode.
line 563: 
line 564: function! s:MarkOrigBufferForSetup(buffer)
line 575: 
line 576: " Function: s:OverrideOption(option, [value]) {{{2
line 577: " Provides a temporary override for the given VCS option.  If no value is
line 578: " passed, the override is disabled.
line 579: 
line 580: function! s:OverrideOption(option, ...)
line 590: 
line 591: " Function: s:WipeoutCommandBuffers() {{{2
line 592: " Clears all current VCS output buffers of the specified type for a given source.
line 593: 
line 594: function! s:WipeoutCommandBuffers(originalBuffer, VCSCommand)
line 605: 
line 606: " Function: s:VimDiffRestore(vimDiffBuff) {{{2
line 607: " Checks whether the given buffer is one whose deletion should trigger
line 608: " restoration of an original buffer after it was diffed.  If so, it executes
line 609: " the appropriate setting command stored with that original buffer.
line 610: 
line 611: function! s:VimDiffRestore(vimDiffBuff)
line 667: 
line 668: " Section: Generic VCS command functions {{{1
line 669: 
line 670: " Function: s:VCSCommit() {{{2
line 671: function! s:VCSCommit(bang, message)
line 713: 
line 714: " Function: s:VCSFinishCommitWithBuffer() {{{2
line 715: " Wrapper for s:VCSFinishCommit which is called only from a commit log buffer
line 716: " which removes all lines starting with 'VCS:'.
line 717: 
line 718: function! s:VCSFinishCommitWithBuffer()
line 729: 
line 730: " Function: s:VCSFinishCommit(logMessageList, originalBuffer) {{{2
line 731: function! s:VCSFinishCommit(logMessageList, originalBuffer)
line 750: 
line 751: " Function: s:VCSGotoOriginal(bang) {{{2
line 752: function! s:VCSGotoOriginal(bang)
line 773: 
line 774: " Function: s:VCSVimDiff(...) {{{2
line 775: function! s:VCSVimDiff(...)
line 896: 
line 897: " Section: Public functions {{{1
line 898: 
line 899: " Function: VCSCommandGetVCSType() {{{2
line 900: " Sets the b:VCSCommandVCSType variable in the given buffer to the
line 901: " appropriate source control system name.
line 902: "
line 903: " This uses the Identify extension function to test the buffer.  If the
line 904: " Identify function returns VCSCOMMAND_IDENTIFY_EXACT, the match is considered
line 905: " exact.  If the Identify function returns VCSCOMMAND_IDENTIFY_INEXACT, the
line 906: " match is considered inexact, and is only applied if no exact match is found.
line 907: " Multiple inexact matches is currently considered an error.
line 908: 
line 909: function! VCSCommandGetVCSType(buffer)
line 944: 
line 945: " Function: VCSCommandChdir(directory) {{{2
line 946: " Changes the current directory, respecting :lcd changes.
line 947: 
line 948: function! VCSCommandChdir(directory)
line 955: 
line 956: " Function: VCSCommandChangeToCurrentFileDir() {{{2
line 957: " Go to the directory in which the given file is located.
line 958: 
line 959: function! VCSCommandChangeToCurrentFileDir(fileName)
line 967: 
line 968: " Function: VCSCommandGetOriginalBuffer(vcsBuffer) {{{2
line 969: " Attempts to locate the original file to which VCS operations were applied
line 970: " for a given buffer.
line 971: 
line 972: function! VCSCommandGetOriginalBuffer(vcsBuffer)
line 986: 
line 987: " Function: VCSCommandRegisterModule(name, file, commandMap) {{{2
line 988: " Allows VCS modules to register themselves.
line 989: 
line 990: function! VCSCommandRegisterModule(name, path, commandMap, mappingMap)
line 1001: 
line 1002: " Function: VCSCommandDoCommand(cmd, cmdName, statusText, [options]) {{{2
line 1003: " General skeleton for VCS function execution.  The given command is executed
line 1004: " after appending the current buffer name (or substituting it for
line 1005: " <VCSCOMMANDFILE>, if such a token is present).  The output is captured in a
line 1006: " new buffer.
line 1007: "
line 1008: " The optional 'options' Dictionary may contain the following options:
line 1009: " ^IallowNonZeroExit:  if non-zero, if the underlying VCS command has a
line 1010: "^I^Inon-zero exit status, the command is still considered
line 1011: "^I^Isuccessfuly.  This defaults to zero.
line 1012: " Returns: name of the new command buffer containing the command results
line 1013: 
line 1014: function! VCSCommandDoCommand(cmd, cmdName, statusText, options)
line 1097: 
line 1098: " Function: VCSCommandGetOption(name, default) {{{2
line 1099: " Grab a user-specified option to override the default provided.  Options are
line 1100: " searched in the window, buffer, then global spaces.
line 1101: 
line 1102: function! VCSCommandGetOption(name, default)
line 1115: 
line 1116: " Function: VCSCommandDisableBufferSetup() {{{2
line 1117: " Global function for deactivating the buffer autovariables.
line 1118: 
line 1119: function! VCSCommandDisableBufferSetup()
line 1123: 
line 1124: " Function: VCSCommandEnableBufferSetup() {{{2
line 1125: " Global function for activating the buffer autovariables.
line 1126: 
line 1127: function! VCSCommandEnableBufferSetup()
line 1140: 
line 1141: " Function: VCSCommandGetStatusLine() {{{2
line 1142: " Default (sample) status line entry for VCS-controlled files.  This is only
line 1143: " useful if VCS-managed buffer mode is on (see the VCSCommandEnableBufferSetup
line 1144: " variable for how to do this).
line 1145: 
line 1146: function! VCSCommandGetStatusLine()
line 1162: 
line 1163: " Section: Command definitions {{{1
line 1164: " Section: Primary commands {{{2
line 1165: com! -nargs=* VCSAdd call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Add', [<f-args>]))
line 1166: com! -nargs=* VCSAnnotate call s:ExecuteVCSCommand('Annotate', [<f-args>])
line 1167: com! -nargs=* VCSBlame call s:ExecuteVCSCommand('Annotate', [<f-args>])
line 1168: com! -nargs=? -bang VCSCommit call s:VCSCommit(<q-bang>, <q-args>)
line 1169: com! -nargs=* VCSDelete call s:ExecuteVCSCommand('Delete', [<f-args>])
line 1170: com! -nargs=* VCSDiff call s:ExecuteVCSCommand('Diff', [<f-args>])
line 1171: com! -nargs=0 -bang VCSGotoOriginal call s:VCSGotoOriginal(<q-bang>)
line 1172: com! -nargs=* VCSInfo call s:ExecuteVCSCommand('Info', [<f-args>])
line 1173: com! -nargs=* VCSLock call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Lock', [<f-args>]))
line 1174: com! -nargs=* VCSLog call s:ExecuteVCSCommand('Log', [<f-args>])
line 1175: com! -nargs=* VCSRemove call s:ExecuteVCSCommand('Delete', [<f-args>])
line 1176: com! -nargs=0 VCSRevert call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Revert', []))
line 1177: com! -nargs=? VCSReview call s:ExecuteVCSCommand('Review', [<f-args>])
line 1178: com! -nargs=* VCSStatus call s:ExecuteVCSCommand('Status', [<f-args>])
line 1179: com! -nargs=* VCSUnlock call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Unlock', [<f-args>]))
line 1180: com! -nargs=0 VCSUpdate call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Update', []))
line 1181: com! -nargs=* VCSVimDiff call s:VCSVimDiff(<f-args>)
line 1182: 
line 1183: " Section: VCS buffer management commands {{{2
line 1184: com! VCSCommandDisableBufferSetup call VCSCommandDisableBufferSetup()
line 1185: com! VCSCommandEnableBufferSetup call VCSCommandEnableBufferSetup()
line 1186: 
line 1187: " Allow reloading VCSCommand.vim
line 1188: com! VCSReload let savedPlugins = s:plugins|let s:plugins = {}|aunmenu Plugin.VCS|unlet! g:loaded_VCSCommand|runtime plugin/vcscommand.vim|for plugin in values(savedPlugins)|execute 'source' plugin[0]|endfor|unlet savedPlugins
line 1189: 
line 1190: " Section: Plugin command mappings {{{1
line 1191: nnoremap <silent> <Plug>VCSAdd :VCSAdd<CR>
line 1192: nnoremap <silent> <Plug>VCSAnnotate :VCSAnnotate<CR>
line 1193: nnoremap <silent> <Plug>VCSCommit :VCSCommit<CR>
line 1194: nnoremap <silent> <Plug>VCSDelete :VCSDelete<CR>
line 1195: nnoremap <silent> <Plug>VCSDiff :VCSDiff<CR>
line 1196: nnoremap <silent> <Plug>VCSGotoOriginal :VCSGotoOriginal<CR>
line 1197: nnoremap <silent> <Plug>VCSClearAndGotoOriginal :VCSGotoOriginal!<CR>
line 1198: nnoremap <silent> <Plug>VCSInfo :VCSInfo<CR>
line 1199: nnoremap <silent> <Plug>VCSLock :VCSLock<CR>
line 1200: nnoremap <silent> <Plug>VCSLog :VCSLog<CR>
line 1201: nnoremap <silent> <Plug>VCSRevert :VCSRevert<CR>
line 1202: nnoremap <silent> <Plug>VCSReview :VCSReview<CR>
line 1203: nnoremap <silent> <Plug>VCSStatus :VCSStatus<CR>
line 1204: nnoremap <silent> <Plug>VCSUnlock :VCSUnlock<CR>
line 1205: nnoremap <silent> <Plug>VCSUpdate :VCSUpdate<CR>
line 1206: nnoremap <silent> <Plug>VCSVimDiff :VCSVimDiff<CR>
line 1207: 
line 1208: " Section: Default mappings {{{1
line 1209: 
line 1227: let s:defaultMappings = [['a', 'VCSAdd'],['c', 'VCSCommit'],['D', 'VCSDelete'],['d', 'VCSDiff'],['G', 'VCSClearAndGotoOriginal'],['g', 'VCSGotoOriginal'],['i', 'VCSInfo'],['L', 'VCSLock'],['l', 'VCSLog'],['n', 'VCSAnnotate'],['q', 'VCSRevert'],['r', 'VCSReview'],['s', 'VCSStatus'],['U', 'VCSUnlock'],['u', 'VCSUpdate'],['v', 'VCSVimDiff'],]
line 1228: 
line 1229: if !VCSCommandGetOption('VCSCommandDisableMappings', 0)
calling function VCSCommandGetOption('VCSCommandDisableMappings', 0)

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function VCSCommandGetOption returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
calling function VCSCommandGetOption('VCSCommandMappings', [['a', 'VCSAdd'], ['c', 'VCSCommit'],...['u', 'VCSUpdate'], ['v', 'VCSVimDiff']])

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function VCSCommandGetOption returning [['a', 'VCSAdd'], ['c', 'VCSCommit'],...['u', 'VCSUpdate'], ['v', 'VCSVimDiff']]

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
calling function <SNR>24_CreateMapping('a', '<Plug>VCSAdd', '''VCSAdd''')

line 1: ^Ilet lhs = VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c') . a:shortcut
calling function <SNR>24_CreateMapping..VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function <SNR>24_CreateMapping..VCSCommandGetOption returning '<Leader>c'

continuing in function <SNR>24_CreateMapping

line 2: ^Iif !hasmapto(a:expansion)
line 3: ^I^Itry
line 4: ^I^I^Iexecute 'nmap <silent> <unique>' lhs a:expansion
line 4: nmap <silent> <unique> <Leader>ca <Plug>VCSAdd
line 5: ^I^Icatch /^Vim(.*):E227:/
line 6: ^I^I^Iif(&verbose != 0)
line 7: ^I^I^I^Iechohl WarningMsg|echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echohl None
line 8: ^I^I^Iendif
line 9: ^I^Iendtry
line 10: ^Iendif
function <SNR>24_CreateMapping returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1232: ^Iendfor
line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
calling function <SNR>24_CreateMapping('c', '<Plug>VCSCommit', '''VCSCommit''')

line 1: ^Ilet lhs = VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c') . a:shortcut
calling function <SNR>24_CreateMapping..VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function <SNR>24_CreateMapping..VCSCommandGetOption returning '<Leader>c'

continuing in function <SNR>24_CreateMapping

line 2: ^Iif !hasmapto(a:expansion)
line 3: ^I^Itry
line 4: ^I^I^Iexecute 'nmap <silent> <unique>' lhs a:expansion
line 4: nmap <silent> <unique> <Leader>cc <Plug>VCSCommit
line 5: ^I^Icatch /^Vim(.*):E227:/
line 6: ^I^I^Iif(&verbose != 0)
line 7: ^I^I^I^Iechohl WarningMsg|echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echohl None
line 8: ^I^I^Iendif
line 9: ^I^Iendtry
line 10: ^Iendif
function <SNR>24_CreateMapping returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1232: ^Iendfor
line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
calling function <SNR>24_CreateMapping('D', '<Plug>VCSDelete', '''VCSDelete''')

line 1: ^Ilet lhs = VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c') . a:shortcut
calling function <SNR>24_CreateMapping..VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function <SNR>24_CreateMapping..VCSCommandGetOption returning '<Leader>c'

continuing in function <SNR>24_CreateMapping

line 2: ^Iif !hasmapto(a:expansion)
line 3: ^I^Itry
line 4: ^I^I^Iexecute 'nmap <silent> <unique>' lhs a:expansion
line 4: nmap <silent> <unique> <Leader>cD <Plug>VCSDelete
line 5: ^I^Icatch /^Vim(.*):E227:/
line 6: ^I^I^Iif(&verbose != 0)
line 7: ^I^I^I^Iechohl WarningMsg|echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echohl None
line 8: ^I^I^Iendif
line 9: ^I^Iendtry
line 10: ^Iendif
function <SNR>24_CreateMapping returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1232: ^Iendfor
line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
calling function <SNR>24_CreateMapping('d', '<Plug>VCSDiff', '''VCSDiff''')

line 1: ^Ilet lhs = VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c') . a:shortcut
calling function <SNR>24_CreateMapping..VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function <SNR>24_CreateMapping..VCSCommandGetOption returning '<Leader>c'

continuing in function <SNR>24_CreateMapping

line 2: ^Iif !hasmapto(a:expansion)
line 3: ^I^Itry
line 4: ^I^I^Iexecute 'nmap <silent> <unique>' lhs a:expansion
line 4: nmap <silent> <unique> <Leader>cd <Plug>VCSDiff
line 5: ^I^Icatch /^Vim(.*):E227:/
line 6: ^I^I^Iif(&verbose != 0)
line 7: ^I^I^I^Iechohl WarningMsg|echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echohl None
line 8: ^I^I^Iendif
line 9: ^I^Iendtry
line 10: ^Iendif
function <SNR>24_CreateMapping returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1232: ^Iendfor
line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
calling function <SNR>24_CreateMapping('G', '<Plug>VCSClearAndGotoOriginal', '''VCSClearAndGotoOriginal''')

line 1: ^Ilet lhs = VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c') . a:shortcut
calling function <SNR>24_CreateMapping..VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function <SNR>24_CreateMapping..VCSCommandGetOption returning '<Leader>c'

continuing in function <SNR>24_CreateMapping

line 2: ^Iif !hasmapto(a:expansion)
line 3: ^I^Itry
line 4: ^I^I^Iexecute 'nmap <silent> <unique>' lhs a:expansion
line 4: nmap <silent> <unique> <Leader>cG <Plug>VCSClearAndGotoOriginal
line 5: ^I^Icatch /^Vim(.*):E227:/
line 6: ^I^I^Iif(&verbose != 0)
line 7: ^I^I^I^Iechohl WarningMsg|echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echohl None
line 8: ^I^I^Iendif
line 9: ^I^Iendtry
line 10: ^Iendif
function <SNR>24_CreateMapping returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1232: ^Iendfor
line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
calling function <SNR>24_CreateMapping('g', '<Plug>VCSGotoOriginal', '''VCSGotoOriginal''')

line 1: ^Ilet lhs = VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c') . a:shortcut
calling function <SNR>24_CreateMapping..VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function <SNR>24_CreateMapping..VCSCommandGetOption returning '<Leader>c'

continuing in function <SNR>24_CreateMapping

line 2: ^Iif !hasmapto(a:expansion)
line 3: ^I^Itry
line 4: ^I^I^Iexecute 'nmap <silent> <unique>' lhs a:expansion
line 4: nmap <silent> <unique> <Leader>cg <Plug>VCSGotoOriginal
line 5: ^I^Icatch /^Vim(.*):E227:/
line 6: ^I^I^Iif(&verbose != 0)
line 7: ^I^I^I^Iechohl WarningMsg|echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echohl None
line 8: ^I^I^Iendif
line 9: ^I^Iendtry
line 10: ^Iendif
function <SNR>24_CreateMapping returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1232: ^Iendfor
line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
calling function <SNR>24_CreateMapping('i', '<Plug>VCSInfo', '''VCSInfo''')

line 1: ^Ilet lhs = VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c') . a:shortcut
calling function <SNR>24_CreateMapping..VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function <SNR>24_CreateMapping..VCSCommandGetOption returning '<Leader>c'

continuing in function <SNR>24_CreateMapping

line 2: ^Iif !hasmapto(a:expansion)
line 3: ^I^Itry
line 4: ^I^I^Iexecute 'nmap <silent> <unique>' lhs a:expansion
line 4: nmap <silent> <unique> <Leader>ci <Plug>VCSInfo
line 5: ^I^Icatch /^Vim(.*):E227:/
line 6: ^I^I^Iif(&verbose != 0)
line 7: ^I^I^I^Iechohl WarningMsg|echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echohl None
line 8: ^I^I^Iendif
line 9: ^I^Iendtry
line 10: ^Iendif
function <SNR>24_CreateMapping returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1232: ^Iendfor
line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
calling function <SNR>24_CreateMapping('L', '<Plug>VCSLock', '''VCSLock''')

line 1: ^Ilet lhs = VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c') . a:shortcut
calling function <SNR>24_CreateMapping..VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function <SNR>24_CreateMapping..VCSCommandGetOption returning '<Leader>c'

continuing in function <SNR>24_CreateMapping

line 2: ^Iif !hasmapto(a:expansion)
line 3: ^I^Itry
line 4: ^I^I^Iexecute 'nmap <silent> <unique>' lhs a:expansion
line 4: nmap <silent> <unique> <Leader>cL <Plug>VCSLock
line 5: ^I^Icatch /^Vim(.*):E227:/
line 6: ^I^I^Iif(&verbose != 0)
line 7: ^I^I^I^Iechohl WarningMsg|echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echohl None
line 8: ^I^I^Iendif
line 9: ^I^Iendtry
line 10: ^Iendif
function <SNR>24_CreateMapping returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1232: ^Iendfor
line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
calling function <SNR>24_CreateMapping('l', '<Plug>VCSLog', '''VCSLog''')

line 1: ^Ilet lhs = VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c') . a:shortcut
calling function <SNR>24_CreateMapping..VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function <SNR>24_CreateMapping..VCSCommandGetOption returning '<Leader>c'

continuing in function <SNR>24_CreateMapping

line 2: ^Iif !hasmapto(a:expansion)
line 3: ^I^Itry
line 4: ^I^I^Iexecute 'nmap <silent> <unique>' lhs a:expansion
line 4: nmap <silent> <unique> <Leader>cl <Plug>VCSLog
line 5: ^I^Icatch /^Vim(.*):E227:/
line 6: ^I^I^Iif(&verbose != 0)
line 7: ^I^I^I^Iechohl WarningMsg|echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echohl None
line 8: ^I^I^Iendif
line 9: ^I^Iendtry
line 10: ^Iendif
function <SNR>24_CreateMapping returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1232: ^Iendfor
line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
calling function <SNR>24_CreateMapping('n', '<Plug>VCSAnnotate', '''VCSAnnotate''')

line 1: ^Ilet lhs = VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c') . a:shortcut
calling function <SNR>24_CreateMapping..VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function <SNR>24_CreateMapping..VCSCommandGetOption returning '<Leader>c'

continuing in function <SNR>24_CreateMapping

line 2: ^Iif !hasmapto(a:expansion)
line 3: ^I^Itry
line 4: ^I^I^Iexecute 'nmap <silent> <unique>' lhs a:expansion
line 4: nmap <silent> <unique> <Leader>cn <Plug>VCSAnnotate
line 5: ^I^Icatch /^Vim(.*):E227:/
line 6: ^I^I^Iif(&verbose != 0)
line 7: ^I^I^I^Iechohl WarningMsg|echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echohl None
line 8: ^I^I^Iendif
line 9: ^I^Iendtry
line 10: ^Iendif
function <SNR>24_CreateMapping returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1232: ^Iendfor
line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
calling function <SNR>24_CreateMapping('q', '<Plug>VCSRevert', '''VCSRevert''')

line 1: ^Ilet lhs = VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c') . a:shortcut
calling function <SNR>24_CreateMapping..VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function <SNR>24_CreateMapping..VCSCommandGetOption returning '<Leader>c'

continuing in function <SNR>24_CreateMapping

line 2: ^Iif !hasmapto(a:expansion)
line 3: ^I^Itry
line 4: ^I^I^Iexecute 'nmap <silent> <unique>' lhs a:expansion
line 4: nmap <silent> <unique> <Leader>cq <Plug>VCSRevert
line 5: ^I^Icatch /^Vim(.*):E227:/
line 6: ^I^I^Iif(&verbose != 0)
line 7: ^I^I^I^Iechohl WarningMsg|echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echohl None
line 8: ^I^I^Iendif
line 9: ^I^Iendtry
line 10: ^Iendif
function <SNR>24_CreateMapping returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1232: ^Iendfor
line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
calling function <SNR>24_CreateMapping('r', '<Plug>VCSReview', '''VCSReview''')

line 1: ^Ilet lhs = VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c') . a:shortcut
calling function <SNR>24_CreateMapping..VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function <SNR>24_CreateMapping..VCSCommandGetOption returning '<Leader>c'

continuing in function <SNR>24_CreateMapping

line 2: ^Iif !hasmapto(a:expansion)
line 3: ^I^Itry
line 4: ^I^I^Iexecute 'nmap <silent> <unique>' lhs a:expansion
line 4: nmap <silent> <unique> <Leader>cr <Plug>VCSReview
line 5: ^I^Icatch /^Vim(.*):E227:/
line 6: ^I^I^Iif(&verbose != 0)
line 7: ^I^I^I^Iechohl WarningMsg|echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echohl None
line 8: ^I^I^Iendif
line 9: ^I^Iendtry
line 10: ^Iendif
function <SNR>24_CreateMapping returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1232: ^Iendfor
line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
calling function <SNR>24_CreateMapping('s', '<Plug>VCSStatus', '''VCSStatus''')

line 1: ^Ilet lhs = VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c') . a:shortcut
calling function <SNR>24_CreateMapping..VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function <SNR>24_CreateMapping..VCSCommandGetOption returning '<Leader>c'

continuing in function <SNR>24_CreateMapping

line 2: ^Iif !hasmapto(a:expansion)
line 3: ^I^Itry
line 4: ^I^I^Iexecute 'nmap <silent> <unique>' lhs a:expansion
line 4: nmap <silent> <unique> <Leader>cs <Plug>VCSStatus
line 5: ^I^Icatch /^Vim(.*):E227:/
line 6: ^I^I^Iif(&verbose != 0)
line 7: ^I^I^I^Iechohl WarningMsg|echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echohl None
line 8: ^I^I^Iendif
line 9: ^I^Iendtry
line 10: ^Iendif
function <SNR>24_CreateMapping returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1232: ^Iendfor
line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
calling function <SNR>24_CreateMapping('U', '<Plug>VCSUnlock', '''VCSUnlock''')

line 1: ^Ilet lhs = VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c') . a:shortcut
calling function <SNR>24_CreateMapping..VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function <SNR>24_CreateMapping..VCSCommandGetOption returning '<Leader>c'

continuing in function <SNR>24_CreateMapping

line 2: ^Iif !hasmapto(a:expansion)
line 3: ^I^Itry
line 4: ^I^I^Iexecute 'nmap <silent> <unique>' lhs a:expansion
line 4: nmap <silent> <unique> <Leader>cU <Plug>VCSUnlock
line 5: ^I^Icatch /^Vim(.*):E227:/
line 6: ^I^I^Iif(&verbose != 0)
line 7: ^I^I^I^Iechohl WarningMsg|echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echohl None
line 8: ^I^I^Iendif
line 9: ^I^Iendtry
line 10: ^Iendif
function <SNR>24_CreateMapping returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1232: ^Iendfor
line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
calling function <SNR>24_CreateMapping('u', '<Plug>VCSUpdate', '''VCSUpdate''')

line 1: ^Ilet lhs = VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c') . a:shortcut
calling function <SNR>24_CreateMapping..VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function <SNR>24_CreateMapping..VCSCommandGetOption returning '<Leader>c'

continuing in function <SNR>24_CreateMapping

line 2: ^Iif !hasmapto(a:expansion)
line 3: ^I^Itry
line 4: ^I^I^Iexecute 'nmap <silent> <unique>' lhs a:expansion
line 4: nmap <silent> <unique> <Leader>cu <Plug>VCSUpdate
line 5: ^I^Icatch /^Vim(.*):E227:/
line 6: ^I^I^Iif(&verbose != 0)
line 7: ^I^I^I^Iechohl WarningMsg|echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echohl None
line 8: ^I^I^Iendif
line 9: ^I^Iendtry
line 10: ^Iendif
function <SNR>24_CreateMapping returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1232: ^Iendfor
line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
calling function <SNR>24_CreateMapping('v', '<Plug>VCSVimDiff', '''VCSVimDiff''')

line 1: ^Ilet lhs = VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c') . a:shortcut
calling function <SNR>24_CreateMapping..VCSCommandGetOption('VCSCommandMapPrefix', '<Leader>c')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function <SNR>24_CreateMapping..VCSCommandGetOption returning '<Leader>c'

continuing in function <SNR>24_CreateMapping

line 2: ^Iif !hasmapto(a:expansion)
line 3: ^I^Itry
line 4: ^I^I^Iexecute 'nmap <silent> <unique>' lhs a:expansion
line 4: nmap <silent> <unique> <Leader>cv <Plug>VCSVimDiff
line 5: ^I^Icatch /^Vim(.*):E227:/
line 6: ^I^I^Iif(&verbose != 0)
line 7: ^I^I^I^Iechohl WarningMsg|echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echomsg 'VCSCommand:  mapping ''' . lhs . ''' already exists, refusing to overwrite.  The mapping for ' . a:display . ' will not be available.'|echohl None
line 7: echohl None
line 8: ^I^I^Iendif
line 9: ^I^Iendtry
line 10: ^Iendif
function <SNR>24_CreateMapping returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1232: ^Iendfor
line 1230: ^Ifor [shortcut, vcsFunction] in VCSCommandGetOption('VCSCommandMappings', s:defaultMappings)
line 1231: ^I^Icall s:CreateMapping(shortcut, '<Plug>' . vcsFunction, '''' . vcsFunction . '''')
line 1232: ^Iendfor
line 1233: endif
line 1234: 
line 1235: " Section: Menu items {{{1
line 1236: amenu <silent> &Plugin.VCS.&Add        <Plug>VCSAdd
line 1237: amenu <silent> &Plugin.VCS.A&nnotate   <Plug>VCSAnnotate
line 1238: amenu <silent> &Plugin.VCS.&Commit     <Plug>VCSCommit
line 1239: amenu <silent> &Plugin.VCS.Delete      <Plug>VCSDelete
line 1240: amenu <silent> &Plugin.VCS.&Diff       <Plug>VCSDiff
line 1241: amenu <silent> &Plugin.VCS.&Info       <Plug>VCSInfo
line 1242: amenu <silent> &Plugin.VCS.&Log        <Plug>VCSLog
line 1243: amenu <silent> &Plugin.VCS.Revert      <Plug>VCSRevert
line 1244: amenu <silent> &Plugin.VCS.&Review     <Plug>VCSReview
line 1245: amenu <silent> &Plugin.VCS.&Status     <Plug>VCSStatus
line 1246: amenu <silent> &Plugin.VCS.&Update     <Plug>VCSUpdate
line 1247: amenu <silent> &Plugin.VCS.&VimDiff    <Plug>VCSVimDiff
line 1248: 
line 1249: " Section: Autocommands to restore vimdiff state {{{1
line 1250: augroup VimDiffRestore
line 1251: ^Iau!
line 1252: ^Iau BufUnload * call s:VimDiffRestore(str2nr(expand('<abuf>')))
line 1253: augroup END
line 1254: 
line 1255: " Section: Optional activation of buffer management {{{1
line 1256: 
line 1257: if VCSCommandGetOption('VCSCommandEnableBufferSetup', 0)
calling function VCSCommandGetOption('VCSCommandEnableBufferSetup', 0)

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function VCSCommandGetOption returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcscommand.vim

line 1258: ^Icall VCSCommandEnableBufferSetup()
line 1259: endif
line 1260: 
line 1261: " Section: VIM shutdown hook {{{1
line 1262: 
line 1263: " Close all result buffers when VIM exits, to prevent them from being restored
line 1264: " via viminfo.
line 1265: 
line 1266: " Function: s:CloseAllResultBuffers() {{{2
line 1267: " Closes all vcscommand result buffers.
line 1268: function! s:CloseAllResultBuffers()
line 1280: 
line 1281: augroup VCSCommandVIMShutdown
line 1282: ^Iau!
line 1283: ^Iau VimLeavePre * call s:CloseAllResultBuffers()
line 1284: augroup END
line 1285: 
line 1286: " Section: Plugin completion {{{1
line 1287: 
line 1288: let loaded_VCSCommand = 2
line 1289: 
line 1290: silent do VCSCommand User VCSPluginFinish
No matching autocommands
line 1291: 
line 1292: let &cpo = s:save_cpo
finished sourcing /home/kguest/.vim/plugin/vcscommand.vim
chdir(/home/kguest/.vim/plugin)
fchdir() to previous dir
sourcing "/home/kguest/.vim/plugin/vcscvs.vim"
line 1: " vim600: set foldmethod=marker:
line 2: "
line 3: " CVS extension for VCSCommand.
line 4: "
line 5: " Version:       VCS development
line 6: " Maintainer:    Bob Hiestand <bob.hiestand@gmail.com>
line 7: " License:
line 8: " Copyright (c) 2007 Bob Hiestand
line 9: "
line 10: " Permission is hereby granted, free of charge, to any person obtaining a copy
line 11: " of this software and associated documentation files (the "Software"), to
line 12: " deal in the Software without restriction, including without limitation the
line 13: " rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
line 14: " sell copies of the Software, and to permit persons to whom the Software is
line 15: " furnished to do so, subject to the following conditions:
line 16: "
line 17: " The above copyright notice and this permission notice shall be included in
line 18: " all copies or substantial portions of the Software.
line 19: "
line 20: " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
line 21: " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
line 22: " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
line 23: " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
line 24: " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
line 25: " FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
line 26: " IN THE SOFTWARE.
line 27: "
line 28: " Section: Documentation {{{1
line 29: "
line 30: " Command documentation {{{2
line 31: "
line 32: " The following commands only apply to files under CVS source control.
line 33: "
line 34: " CVSEdit          Performs "cvs edit" on the current file.
line 35: "   
line 36: " CVSEditors       Performs "cvs editors" on the current file.
line 37: "   
line 38: " CVSUnedit        Performs "cvs unedit" on the current file.
line 39: "   
line 40: " CVSWatch         Takes an argument which must be one of [on|off|add|remove].
line 41: "                  Performs "cvs watch" with the given argument on the current
line 42: "                  file.
line 43: "   
line 44: " CVSWatchers      Performs "cvs watchers" on the current file.
line 45: "   
line 46: " CVSWatchAdd      Alias for "CVSWatch add"
line 47: "   
line 48: " CVSWatchOn       Alias for "CVSWatch on"
line 49: "   
line 50: " CVSWatchOff      Alias for "CVSWatch off"
line 51: "   
line 52: " CVSWatchRemove   Alias for "CVSWatch remove"
line 53: "
line 54: " Mapping documentation: {{{2
line 55: "
line 56: " By default, a mapping is defined for each command.  User-provided mappings
line 57: " can be used instead by mapping to <Plug>CommandName, for instance:
line 58: "
line 59: " nnoremap ,ce <Plug>CVSEdit
line 60: "
line 61: " The default mappings are as follow:
line 62: "
line 63: "   <Leader>ce CVSEdit
line 64: "   <Leader>cE CVSEditors
line 65: "   <Leader>ct CVSUnedit
line 66: "   <Leader>cwv CVSWatchers
line 67: "   <Leader>cwa CVSWatchAdd
line 68: "   <Leader>cwn CVSWatchOn
line 69: "   <Leader>cwf CVSWatchOff
line 70: "   <Leader>cwr CVSWatchRemove
line 71: "
line 72: " Options documentation: {{{2
line 73: "
line 74: " VCSCommandCVSExec
line 75: "   This variable specifies the CVS executable.  If not set, it defaults to
line 76: "   'cvs' executed from the user's executable path.
line 77: "
line 78: " VCSCommandCVSDiffOpt
line 79: "   This variable, if set, determines the options passed to the cvs diff
line 80: "   command.  If not set, it defaults to 'u'.
line 81: 
line 82: " Section: Plugin header {{{1
line 83: 
line 84: if exists('VCSCommandDisableAll')
line 85: ^Ifinish
line 86: endif
line 87: 
line 88: if v:version < 700
line 89: ^Iechohl WarningMsg|echomsg 'VCSCommand requires at least VIM 7.0'|echohl None
line 89: echomsg 'VCSCommand requires at least VIM 7.0'|echohl None
line 89: echohl None
line 90: ^Ifinish
line 91: endif
line 92: 
line 93: runtime plugin/vcscommand.vim
Searching for "plugin/vcscommand.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/plugin/vcscommand.vim"
Searching for "/home/kguest/.vim/plugin/vcscommand.vim"
chdir(/home/kguest/.vim/plugin)
fchdir() to previous dir
line 93: sourcing "/home/kguest/.vim/plugin/vcscommand.vim"
line 1: " vim600: set foldmethod=marker:
line 2: "
line 3: " Vim plugin to assist in working with files under control of various Version
line 4: " Control Systems, such as CVS, SVN, SVK, and git.
line 5: "
line 6: " Maintainer:    Bob Hiestand <bob.hiestand@gmail.com>
line 7: " Version:       Beta 29
line 8: " License:
line 9: " Copyright (c) 2008 Bob Hiestand
line 10: "
line 11: " Permission is hereby granted, free of charge, to any person obtaining a copy
line 12: " of this software and associated documentation files (the "Software"), to
line 13: " deal in the Software without restriction, including without limitation the
line 14: " rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
line 15: " sell copies of the Software, and to permit persons to whom the Software is
line 16: " furnished to do so, subject to the following conditions:
line 17: "
line 18: " The above copyright notice and this permission notice shall be included in
line 19: " all copies or substantial portions of the Software.
line 20: "
line 21: " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
line 22: " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
line 23: " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
line 24: " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
line 25: " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
line 26: " FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
line 27: " IN THE SOFTWARE.
line 28: "
line 29: " Section: Documentation {{{1
line 30: "
line 31: " Provides functions to invoke various source control commands on the current
line 32: " file (either the current buffer, or, in the case of an directory buffer, the
line 33: " directory and all subdirectories associated with the current buffer).  The
line 34: " output of the commands is captured in a new scratch window.
line 35: "
line 36: " This plugin needs additional extension plugins, each  specific to a source
line 37: " control system, to function.  Those plugins should be placed in a
line 38: " subdirectory of the standard plugin directory named 'vcscommand'.  Several
line 39: " options include the name of the version control system in the option name.
line 40: " Such options use the placeholder text '{VCSType}', which would be replaced
line 41: " in actual usage with 'CVS' or 'SVN', for instance.
line 42: "
line 43: " Command documentation {{{2
line 44: "
line 45: " VCSAdd           Adds the current file to source control.
line 46: "
line 47: " VCSAnnotate      Displays the current file with each line annotated with the
line 48: "                  version in which it was most recently changed.  If an
line 49: "                  argument is given, the argument is used as a revision
line 50: "                  number to display.  If not given an argument, it uses the
line 51: "                  most recent version of the file on the current branch.
line 52: "                  Additionally, if the current buffer is a VCSAnnotate buffer
line 53: "                  already, the version number on the current line is used.
line 54: "
line 55: " VCSBlame         Alias for 'VCSAnnotate'.
line 56: "
line 57: " VCSCommit[!]     Commits changes to the current file to source control.
line 58: "
line 59: "                  If called with arguments, the arguments are the log message.
line 60: "
line 61: "                  If '!' is used, an empty log message is committed.
line 62: "
line 63: "                  If called with no arguments, this is a two-step command.
line 64: "                  The first step opens a buffer to accept a log message.
line 65: "                  When that buffer is written, it is automatically closed and
line 66: "                  the file is committed using the information from that log
line 67: "                  message.  The commit can be abandoned if the log message
line 68: "                  buffer is deleted or wiped before being written.
line 69: "
line 70: " VCSDelete        Deletes the current file and removes it from source control.
line 71: "
line 72: " VCSDiff          With no arguments, this displays the differences between
line 73: "                  the current file and its parent version under source
line 74: "                  control in a new scratch buffer.
line 75: "
line 76: "                  With one argument, the diff is performed on the
line 77: "                  current file against the specified revision.
line 78: "
line 79: "                  With two arguments, the diff is performed between the
line 80: "                  specified revisions of the current file.
line 81: "
line 82: "                  This command uses the 'VCSCommand{VCSType}DiffOpt' variable
line 83: "                  to specify diff options.  If that variable does not exist,
line 84: "                  a plugin-specific default is used.  If you wish to have no
line 85: "                  options, then set it to the empty string.
line 86: "
line 87: " VCSGotoOriginal  Jumps to the source buffer if the current buffer is a VCS
line 88: "                  scratch buffer.  If VCSGotoOriginal[!] is used, remove all
line 89: "                  VCS scratch buffers associated with the original file.
line 90: "
line 91: " VCSInfo          Displays extended information about the current file in a
line 92: "                  new scratch buffer. 
line 93: "
line 94: " VCSLock          Locks the current file in order to prevent other users from
line 95: "                  concurrently modifying it.  The exact semantics of this
line 96: "                  command depend on the underlying VCS.
line 97: "
line 98: " VCSLog           Displays the version history of the current file in a new
line 99: "                  scratch buffer.
line 100: "
line 101: " VCSRemove        Alias for 'VCSDelete'.
line 102: "
line 103: " VCSRevert        Replaces the modified version of the current file with the
line 104: "                  most recent version from the repository.
line 105: "
line 106: " VCSReview        Displays a particular version of the current file in a new
line 107: "                  scratch buffer.  If no argument is given, the most recent
line 108: "                  version of the file on the current branch is retrieved.
line 109: "
line 110: " VCSStatus        Displays versioning information about the current file in a
line 111: "                  new scratch buffer.
line 112: "
line 113: " VCSUnlock        Unlocks the current file in order to allow other users from
line 114: "                  concurrently modifying it.  The exact semantics of this
line 115: "                  command depend on the underlying VCS.
line 116: "
line 117: " VCSUpdate        Updates the current file with any relevant changes from the
line 118: "                  repository.
line 119: "
line 120: " VCSVimDiff       Uses vimdiff to display differences between versions of the
line 121: "                  current file.
line 122: "
line 123: "                  If no revision is specified, the most recent version of the
line 124: "                  file on the current branch is used.  With one argument,
line 125: "                  that argument is used as the revision as above.  With two
line 126: "                  arguments, the differences between the two revisions is
line 127: "                  displayed using vimdiff.
line 128: "
line 129: "                  With either zero or one argument, the original buffer is
line 130: "                  used to perform the vimdiff.  When the scratch buffer is
line 131: "                  closed, the original buffer will be returned to normal
line 132: "                  mode.
line 133: "
line 134: "                  Once vimdiff mode is started using the above methods,
line 135: "                  additional vimdiff buffers may be added by passing a single
line 136: "                  version argument to the command.  There may be up to 4
line 137: "                  vimdiff buffers total.
line 138: "
line 139: "                  Using the 2-argument form of the command resets the vimdiff
line 140: "                  to only those 2 versions.  Additionally, invoking the
line 141: "                  command on a different file will close the previous vimdiff
line 142: "                  buffers.
line 143: "
line 144: " Mapping documentation: {{{2
line 145: "
line 146: " By default, a mapping is defined for each command.  User-provided mappings
line 147: " can be used instead by mapping to <Plug>CommandName, for instance:
line 148: "
line 149: " nmap ,ca <Plug>VCSAdd
line 150: "
line 151: " The default mappings are as follow:
line 152: "
line 153: "   <Leader>ca VCSAdd
line 154: "   <Leader>cn VCSAnnotate
line 155: "   <Leader>cc VCSCommit
line 156: "   <Leader>cD VCSDelete
line 157: "   <Leader>cd VCSDiff
line 158: "   <Leader>cg VCSGotoOriginal
line 159: "   <Leader>cG VCSGotoOriginal!
line 160: "   <Leader>ci VCSInfo
line 161: "   <Leader>cl VCSLog
line 162: "   <Leader>cL VCSLock
line 163: "   <Leader>cr VCSReview
line 164: "   <Leader>cs VCSStatus
line 165: "   <Leader>cu VCSUpdate
line 166: "   <Leader>cU VCSUnlock
line 167: "   <Leader>cv VCSVimDiff
line 168: "
line 169: " Options documentation: {{{2
line 170: "
line 171: " Several variables are checked by the script to determine behavior as follow:
line 172: "
line 173: " VCSCommandCommitOnWrite
line 174: "   This variable, if set to a non-zero value, causes the pending commit to
line 175: "   take place immediately as soon as the log message buffer is written.  If
line 176: "   set to zero, only the VCSCommit mapping will cause the pending commit to
line 177: "   occur.  If not set, it defaults to 1.
line 178: "
line 179: " VCSCommandDeleteOnHide
line 180: "   This variable, if set to a non-zero value, causes the temporary VCS result
line 181: "   buffers to automatically delete themselves when hidden.
line 182: "
line 183: " VCSCommand{VCSType}DiffOpt
line 184: "   This variable, if set, determines the options passed to the diff command
line 185: "   of the underlying VCS.  Each VCS plugin defines a default value.
line 186: "
line 187: " VCSCommandDiffSplit
line 188: "   This variable overrides the VCSCommandSplit variable, but only for buffers
line 189: "   created with VCSVimDiff.
line 190: "
line 191: " VCSCommandDisableAll
line 192: "   This variable, if set, prevents the plugin or any extensions from loading
line 193: "   at all.  This is useful when a single runtime distribution is used on
line 194: "   multiple systems with varying versions.
line 195: "
line 196: " VCSCommandDisableMappings
line 197: "   This variable, if set to a non-zero value, prevents the default command
line 198: "   mappings from being set.
line 199: "
line 200: " VCSCommandDisableExtensionMappings
line 201: "   This variable, if set to a non-zero value, prevents the default command
line 202: "   mappings from being set for commands specific to an individual VCS.
line 203: "
line 204: " VCSCommandEdit
line 205: "   This variable controls whether to split the current window to display a
line 206: "   scratch buffer ('split'), or to display it in the current buffer ('edit').
line 207: "   If not set, it defaults to 'split'.
line 208: "
line 209: " VCSCommandEnableBufferSetup
line 210: "   This variable, if set to a non-zero value, activates VCS buffer management
line 211: "   mode.  This mode means that the buffer variable 'VCSRevision' is set if
line 212: "   the file is VCS-controlled.  This is useful for displaying version
line 213: "   information in the status bar.  Additional options may be set by
line 214: "   individual VCS plugins.
line 215: "
line 216: " VCSCommandMappings
line 217: "   This variable, if set, overrides the default mappings used for shortcuts.
line 218: "   It should be a List of 2-element Lists, each containing a shortcut and
line 219: "   function name pair.
line 220: "
line 221: " VCSCommandMapPrefix
line 222: "   This variable, if set, overrides the default mapping prefix ('<Leader>c').
line 223: "   This allows customization of the mapping space used by the vcscommand
line 224: "   shortcuts.
line 225: "
line 226: " VCSCommandResultBufferNameExtension
line 227: "   This variable, if set to a non-blank value, is appended to the name of the
line 228: "   VCS command output buffers.  For example, '.vcs'.  Using this option may
line 229: "   help avoid problems caused by autocommands dependent on file extension.
line 230: "
line 231: " VCSCommandResultBufferNameFunction
line 232: "   This variable, if set, specifies a custom function for naming VCS command
line 233: "   output buffers.  This function will be passed the following arguments:
line 234: "
line 235: "   command - name of the VCS command being executed (such as 'Log' or
line 236: "   'Diff').
line 237: "
line 238: "   originalBuffer - buffer number of the source file.
line 239: "
line 240: "   vcsType - type of VCS controlling this file (such as 'CVS' or 'SVN').
line 241: "
line 242: "   statusText - extra text associated with the VCS action (such as version
line 243: "   numbers).
line 244: "
line 245: " VCSCommandSplit
line 246: "   This variable controls the orientation of the various window splits that
line 247: "   may occur (such as with VCSVimDiff, when using a VCS command on a VCS
line 248: "   command buffer, or when the 'VCSCommandEdit' variable is set to 'split'.
line 249: "   If set to 'horizontal', the resulting windows will be on stacked on top of
line 250: "   one another.  If set to 'vertical', the resulting windows will be
line 251: "   side-by-side.  If not set, it defaults to 'horizontal' for all but
line 252: "   VCSVimDiff windows.
line 253: "
line 254: " VCSCommandVCSTypeOverride
line 255: "   This variable allows the VCS type detection to be overridden on a
line 256: "   path-by-path basis.  The value of this variable is expected to be a List
line 257: "   of Lists.  Each high-level List item is a List containing two elements.
line 258: "   The first element is a regular expression that will be matched against the
line 259: "   full file name of a given buffer.  If it matches, the second element will
line 260: "   be used as the VCS type.
line 261: "
line 262: " Event documentation {{{2
line 263: "   For additional customization, VCSCommand.vim uses User event autocommand
line 264: "   hooks.  Each event is in the VCSCommand group, and different patterns
line 265: "   match the various hooks.
line 266: "
line 267: "   For instance, the following could be added to the vimrc to provide a 'q'
line 268: "   mapping to quit a VCS scratch buffer:
line 269: "
line 270: "   augroup VCSCommand
line 271: "     au VCSCommand User VCSBufferCreated silent! nmap <unique> <buffer> q :bwipeout<cr> 
line 272: "   augroup END
line 273: "
line 274: "   The following hooks are available:
line 275: "
line 276: "   VCSBufferCreated           This event is fired just after a VCS command
line 277: "                              output buffer is created.  It is executed
line 278: "                              within the context of the new buffer.
line 279: "
line 280: "   VCSBufferSetup             This event is fired just after VCS buffer setup
line 281: "                              occurs, if enabled.
line 282: "
line 283: "   VCSPluginInit              This event is fired when the VCSCommand plugin
line 284: "                              first loads.
line 285: "
line 286: "   VCSPluginFinish            This event is fired just after the VCSCommand
line 287: "                              plugin loads.
line 288: "
line 289: "   VCSVimDiffFinish           This event is fired just after the VCSVimDiff
line 290: "                              command executes to allow customization of,
line 291: "                              for instance, window placement and focus.
line 292: "
line 293: " Section: Plugin header {{{1
line 294: 
line 295: " loaded_VCSCommand is set to 1 when the initialization begins, and 2 when it
line 296: " completes.  This allows various actions to only be taken by functions after
line 297: " system initialization.
line 298: 
line 299: if exists('VCSCommandDisableAll')
line 300: ^Ifinish
line 301: endif
line 302: 
line 303: if exists('loaded_VCSCommand')
line 304: ^Ifinish
finished sourcing /home/kguest/.vim/plugin/vcscommand.vim
continuing in /home/kguest/My-.vim-files/plugin/vcscvs.vim
line 94: 
line 95: if !executable(VCSCommandGetOption('VCSCommandCVSExec', 'cvs'))
calling function VCSCommandGetOption('VCSCommandCVSExec', 'cvs')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function VCSCommandGetOption returning 'cvs'

continuing in /home/kguest/My-.vim-files/plugin/vcscvs.vim

line 96: ^I" CVS is not installed
line 97: ^Ifinish
finished sourcing /home/kguest/.vim/plugin/vcscvs.vim
chdir(/home/kguest/.vim/plugin)
fchdir() to previous dir
sourcing "/home/kguest/.vim/plugin/vcsgit.vim"
line 1: " vim600: set foldmethod=marker:
line 2: "
line 3: " git extension for VCSCommand.
line 4: "
line 5: " Version:       VCS development
line 6: " Maintainer:    Bob Hiestand <bob.hiestand@gmail.com>
line 7: " License:
line 8: " Copyright (c) 2008 Bob Hiestand
line 9: "
line 10: " Permission is hereby granted, free of charge, to any person obtaining a copy
line 11: " of this software and associated documentation files (the "Software"), to
line 12: " deal in the Software without restriction, including without limitation the
line 13: " rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
line 14: " sell copies of the Software, and to permit persons to whom the Software is
line 15: " furnished to do so, subject to the following conditions:
line 16: "
line 17: " The above copyright notice and this permission notice shall be included in
line 18: " all copies or substantial portions of the Software.
line 19: "
line 20: " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
line 21: " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
line 22: " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
line 23: " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
line 24: " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
line 25: " FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
line 26: " IN THE SOFTWARE.
line 27: "
line 28: " Section: Documentation {{{1
line 29: "
line 30: " Options documentation: {{{2
line 31: "
line 32: " VCSCommandGitExec
line 33: "   This variable specifies the git executable.  If not set, it defaults to
line 34: "   'git' executed from the user's executable path.
line 35: "
line 36: " VCSCommandGitDiffOpt
line 37: "   This variable, if set, determines the default options passed to the
line 38: "   VCSDiff command.  If any options (starting with '-') are passed to the
line 39: "   command, this variable is not used.
line 40: 
line 41: " Section: Plugin header {{{1
line 42: 
line 43: if exists('VCSCommandDisableAll')
line 44: ^Ifinish
line 45: endif
line 46: 
line 47: if v:version < 700
line 48: ^Iechohl WarningMsg|echomsg 'VCSCommand requires at least VIM 7.0'|echohl None
line 48: echomsg 'VCSCommand requires at least VIM 7.0'|echohl None
line 48: echohl None
line 49: ^Ifinish
line 50: endif
line 51: 
line 52: runtime plugin/vcscommand.vim
Searching for "plugin/vcscommand.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/plugin/vcscommand.vim"
Searching for "/home/kguest/.vim/plugin/vcscommand.vim"
chdir(/home/kguest/.vim/plugin)
fchdir() to previous dir
line 52: sourcing "/home/kguest/.vim/plugin/vcscommand.vim"
line 1: " vim600: set foldmethod=marker:
line 2: "
line 3: " Vim plugin to assist in working with files under control of various Version
line 4: " Control Systems, such as CVS, SVN, SVK, and git.
line 5: "
line 6: " Maintainer:    Bob Hiestand <bob.hiestand@gmail.com>
line 7: " Version:       Beta 29
line 8: " License:
line 9: " Copyright (c) 2008 Bob Hiestand
line 10: "
line 11: " Permission is hereby granted, free of charge, to any person obtaining a copy
line 12: " of this software and associated documentation files (the "Software"), to
line 13: " deal in the Software without restriction, including without limitation the
line 14: " rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
line 15: " sell copies of the Software, and to permit persons to whom the Software is
line 16: " furnished to do so, subject to the following conditions:
line 17: "
line 18: " The above copyright notice and this permission notice shall be included in
line 19: " all copies or substantial portions of the Software.
line 20: "
line 21: " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
line 22: " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
line 23: " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
line 24: " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
line 25: " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
line 26: " FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
line 27: " IN THE SOFTWARE.
line 28: "
line 29: " Section: Documentation {{{1
line 30: "
line 31: " Provides functions to invoke various source control commands on the current
line 32: " file (either the current buffer, or, in the case of an directory buffer, the
line 33: " directory and all subdirectories associated with the current buffer).  The
line 34: " output of the commands is captured in a new scratch window.
line 35: "
line 36: " This plugin needs additional extension plugins, each  specific to a source
line 37: " control system, to function.  Those plugins should be placed in a
line 38: " subdirectory of the standard plugin directory named 'vcscommand'.  Several
line 39: " options include the name of the version control system in the option name.
line 40: " Such options use the placeholder text '{VCSType}', which would be replaced
line 41: " in actual usage with 'CVS' or 'SVN', for instance.
line 42: "
line 43: " Command documentation {{{2
line 44: "
line 45: " VCSAdd           Adds the current file to source control.
line 46: "
line 47: " VCSAnnotate      Displays the current file with each line annotated with the
line 48: "                  version in which it was most recently changed.  If an
line 49: "                  argument is given, the argument is used as a revision
line 50: "                  number to display.  If not given an argument, it uses the
line 51: "                  most recent version of the file on the current branch.
line 52: "                  Additionally, if the current buffer is a VCSAnnotate buffer
line 53: "                  already, the version number on the current line is used.
line 54: "
line 55: " VCSBlame         Alias for 'VCSAnnotate'.
line 56: "
line 57: " VCSCommit[!]     Commits changes to the current file to source control.
line 58: "
line 59: "                  If called with arguments, the arguments are the log message.
line 60: "
line 61: "                  If '!' is used, an empty log message is committed.
line 62: "
line 63: "                  If called with no arguments, this is a two-step command.
line 64: "                  The first step opens a buffer to accept a log message.
line 65: "                  When that buffer is written, it is automatically closed and
line 66: "                  the file is committed using the information from that log
line 67: "                  message.  The commit can be abandoned if the log message
line 68: "                  buffer is deleted or wiped before being written.
line 69: "
line 70: " VCSDelete        Deletes the current file and removes it from source control.
line 71: "
line 72: " VCSDiff          With no arguments, this displays the differences between
line 73: "                  the current file and its parent version under source
line 74: "                  control in a new scratch buffer.
line 75: "
line 76: "                  With one argument, the diff is performed on the
line 77: "                  current file against the specified revision.
line 78: "
line 79: "                  With two arguments, the diff is performed between the
line 80: "                  specified revisions of the current file.
line 81: "
line 82: "                  This command uses the 'VCSCommand{VCSType}DiffOpt' variable
line 83: "                  to specify diff options.  If that variable does not exist,
line 84: "                  a plugin-specific default is used.  If you wish to have no
line 85: "                  options, then set it to the empty string.
line 86: "
line 87: " VCSGotoOriginal  Jumps to the source buffer if the current buffer is a VCS
line 88: "                  scratch buffer.  If VCSGotoOriginal[!] is used, remove all
line 89: "                  VCS scratch buffers associated with the original file.
line 90: "
line 91: " VCSInfo          Displays extended information about the current file in a
line 92: "                  new scratch buffer. 
line 93: "
line 94: " VCSLock          Locks the current file in order to prevent other users from
line 95: "                  concurrently modifying it.  The exact semantics of this
line 96: "                  command depend on the underlying VCS.
line 97: "
line 98: " VCSLog           Displays the version history of the current file in a new
line 99: "                  scratch buffer.
line 100: "
line 101: " VCSRemove        Alias for 'VCSDelete'.
line 102: "
line 103: " VCSRevert        Replaces the modified version of the current file with the
line 104: "                  most recent version from the repository.
line 105: "
line 106: " VCSReview        Displays a particular version of the current file in a new
line 107: "                  scratch buffer.  If no argument is given, the most recent
line 108: "                  version of the file on the current branch is retrieved.
line 109: "
line 110: " VCSStatus        Displays versioning information about the current file in a
line 111: "                  new scratch buffer.
line 112: "
line 113: " VCSUnlock        Unlocks the current file in order to allow other users from
line 114: "                  concurrently modifying it.  The exact semantics of this
line 115: "                  command depend on the underlying VCS.
line 116: "
line 117: " VCSUpdate        Updates the current file with any relevant changes from the
line 118: "                  repository.
line 119: "
line 120: " VCSVimDiff       Uses vimdiff to display differences between versions of the
line 121: "                  current file.
line 122: "
line 123: "                  If no revision is specified, the most recent version of the
line 124: "                  file on the current branch is used.  With one argument,
line 125: "                  that argument is used as the revision as above.  With two
line 126: "                  arguments, the differences between the two revisions is
line 127: "                  displayed using vimdiff.
line 128: "
line 129: "                  With either zero or one argument, the original buffer is
line 130: "                  used to perform the vimdiff.  When the scratch buffer is
line 131: "                  closed, the original buffer will be returned to normal
line 132: "                  mode.
line 133: "
line 134: "                  Once vimdiff mode is started using the above methods,
line 135: "                  additional vimdiff buffers may be added by passing a single
line 136: "                  version argument to the command.  There may be up to 4
line 137: "                  vimdiff buffers total.
line 138: "
line 139: "                  Using the 2-argument form of the command resets the vimdiff
line 140: "                  to only those 2 versions.  Additionally, invoking the
line 141: "                  command on a different file will close the previous vimdiff
line 142: "                  buffers.
line 143: "
line 144: " Mapping documentation: {{{2
line 145: "
line 146: " By default, a mapping is defined for each command.  User-provided mappings
line 147: " can be used instead by mapping to <Plug>CommandName, for instance:
line 148: "
line 149: " nmap ,ca <Plug>VCSAdd
line 150: "
line 151: " The default mappings are as follow:
line 152: "
line 153: "   <Leader>ca VCSAdd
line 154: "   <Leader>cn VCSAnnotate
line 155: "   <Leader>cc VCSCommit
line 156: "   <Leader>cD VCSDelete
line 157: "   <Leader>cd VCSDiff
line 158: "   <Leader>cg VCSGotoOriginal
line 159: "   <Leader>cG VCSGotoOriginal!
line 160: "   <Leader>ci VCSInfo
line 161: "   <Leader>cl VCSLog
line 162: "   <Leader>cL VCSLock
line 163: "   <Leader>cr VCSReview
line 164: "   <Leader>cs VCSStatus
line 165: "   <Leader>cu VCSUpdate
line 166: "   <Leader>cU VCSUnlock
line 167: "   <Leader>cv VCSVimDiff
line 168: "
line 169: " Options documentation: {{{2
line 170: "
line 171: " Several variables are checked by the script to determine behavior as follow:
line 172: "
line 173: " VCSCommandCommitOnWrite
line 174: "   This variable, if set to a non-zero value, causes the pending commit to
line 175: "   take place immediately as soon as the log message buffer is written.  If
line 176: "   set to zero, only the VCSCommit mapping will cause the pending commit to
line 177: "   occur.  If not set, it defaults to 1.
line 178: "
line 179: " VCSCommandDeleteOnHide
line 180: "   This variable, if set to a non-zero value, causes the temporary VCS result
line 181: "   buffers to automatically delete themselves when hidden.
line 182: "
line 183: " VCSCommand{VCSType}DiffOpt
line 184: "   This variable, if set, determines the options passed to the diff command
line 185: "   of the underlying VCS.  Each VCS plugin defines a default value.
line 186: "
line 187: " VCSCommandDiffSplit
line 188: "   This variable overrides the VCSCommandSplit variable, but only for buffers
line 189: "   created with VCSVimDiff.
line 190: "
line 191: " VCSCommandDisableAll
line 192: "   This variable, if set, prevents the plugin or any extensions from loading
line 193: "   at all.  This is useful when a single runtime distribution is used on
line 194: "   multiple systems with varying versions.
line 195: "
line 196: " VCSCommandDisableMappings
line 197: "   This variable, if set to a non-zero value, prevents the default command
line 198: "   mappings from being set.
line 199: "
line 200: " VCSCommandDisableExtensionMappings
line 201: "   This variable, if set to a non-zero value, prevents the default command
line 202: "   mappings from being set for commands specific to an individual VCS.
line 203: "
line 204: " VCSCommandEdit
line 205: "   This variable controls whether to split the current window to display a
line 206: "   scratch buffer ('split'), or to display it in the current buffer ('edit').
line 207: "   If not set, it defaults to 'split'.
line 208: "
line 209: " VCSCommandEnableBufferSetup
line 210: "   This variable, if set to a non-zero value, activates VCS buffer management
line 211: "   mode.  This mode means that the buffer variable 'VCSRevision' is set if
line 212: "   the file is VCS-controlled.  This is useful for displaying version
line 213: "   information in the status bar.  Additional options may be set by
line 214: "   individual VCS plugins.
line 215: "
line 216: " VCSCommandMappings
line 217: "   This variable, if set, overrides the default mappings used for shortcuts.
line 218: "   It should be a List of 2-element Lists, each containing a shortcut and
line 219: "   function name pair.
line 220: "
line 221: " VCSCommandMapPrefix
line 222: "   This variable, if set, overrides the default mapping prefix ('<Leader>c').
line 223: "   This allows customization of the mapping space used by the vcscommand
line 224: "   shortcuts.
line 225: "
line 226: " VCSCommandResultBufferNameExtension
line 227: "   This variable, if set to a non-blank value, is appended to the name of the
line 228: "   VCS command output buffers.  For example, '.vcs'.  Using this option may
line 229: "   help avoid problems caused by autocommands dependent on file extension.
line 230: "
line 231: " VCSCommandResultBufferNameFunction
line 232: "   This variable, if set, specifies a custom function for naming VCS command
line 233: "   output buffers.  This function will be passed the following arguments:
line 234: "
line 235: "   command - name of the VCS command being executed (such as 'Log' or
line 236: "   'Diff').
line 237: "
line 238: "   originalBuffer - buffer number of the source file.
line 239: "
line 240: "   vcsType - type of VCS controlling this file (such as 'CVS' or 'SVN').
line 241: "
line 242: "   statusText - extra text associated with the VCS action (such as version
line 243: "   numbers).
line 244: "
line 245: " VCSCommandSplit
line 246: "   This variable controls the orientation of the various window splits that
line 247: "   may occur (such as with VCSVimDiff, when using a VCS command on a VCS
line 248: "   command buffer, or when the 'VCSCommandEdit' variable is set to 'split'.
line 249: "   If set to 'horizontal', the resulting windows will be on stacked on top of
line 250: "   one another.  If set to 'vertical', the resulting windows will be
line 251: "   side-by-side.  If not set, it defaults to 'horizontal' for all but
line 252: "   VCSVimDiff windows.
line 253: "
line 254: " VCSCommandVCSTypeOverride
line 255: "   This variable allows the VCS type detection to be overridden on a
line 256: "   path-by-path basis.  The value of this variable is expected to be a List
line 257: "   of Lists.  Each high-level List item is a List containing two elements.
line 258: "   The first element is a regular expression that will be matched against the
line 259: "   full file name of a given buffer.  If it matches, the second element will
line 260: "   be used as the VCS type.
line 261: "
line 262: " Event documentation {{{2
line 263: "   For additional customization, VCSCommand.vim uses User event autocommand
line 264: "   hooks.  Each event is in the VCSCommand group, and different patterns
line 265: "   match the various hooks.
line 266: "
line 267: "   For instance, the following could be added to the vimrc to provide a 'q'
line 268: "   mapping to quit a VCS scratch buffer:
line 269: "
line 270: "   augroup VCSCommand
line 271: "     au VCSCommand User VCSBufferCreated silent! nmap <unique> <buffer> q :bwipeout<cr> 
line 272: "   augroup END
line 273: "
line 274: "   The following hooks are available:
line 275: "
line 276: "   VCSBufferCreated           This event is fired just after a VCS command
line 277: "                              output buffer is created.  It is executed
line 278: "                              within the context of the new buffer.
line 279: "
line 280: "   VCSBufferSetup             This event is fired just after VCS buffer setup
line 281: "                              occurs, if enabled.
line 282: "
line 283: "   VCSPluginInit              This event is fired when the VCSCommand plugin
line 284: "                              first loads.
line 285: "
line 286: "   VCSPluginFinish            This event is fired just after the VCSCommand
line 287: "                              plugin loads.
line 288: "
line 289: "   VCSVimDiffFinish           This event is fired just after the VCSVimDiff
line 290: "                              command executes to allow customization of,
line 291: "                              for instance, window placement and focus.
line 292: "
line 293: " Section: Plugin header {{{1
line 294: 
line 295: " loaded_VCSCommand is set to 1 when the initialization begins, and 2 when it
line 296: " completes.  This allows various actions to only be taken by functions after
line 297: " system initialization.
line 298: 
line 299: if exists('VCSCommandDisableAll')
line 300: ^Ifinish
line 301: endif
line 302: 
line 303: if exists('loaded_VCSCommand')
line 304: ^Ifinish
finished sourcing /home/kguest/.vim/plugin/vcscommand.vim
continuing in /home/kguest/My-.vim-files/plugin/vcsgit.vim
line 53: 
line 54: if !executable(VCSCommandGetOption('VCSCommandGitExec', 'git'))
calling function VCSCommandGetOption('VCSCommandGitExec', 'git')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function VCSCommandGetOption returning 'git'

continuing in /home/kguest/My-.vim-files/plugin/vcsgit.vim

line 55: ^I" git is not installed
line 56: ^Ifinish
line 57: endif
line 58: 
line 59: let s:save_cpo=&cpo
line 60: set cpo&vim
line 61: 
line 62: " Section: Variable initialization {{{1
line 63: 
line 64: let s:gitFunctions = {}
line 65: 
line 66: " Section: Utility functions {{{1
line 67: 
line 68: " Function: s:DoCommand(cmd, cmdName, statusText, options) {{{2
line 69: " Wrapper to VCSCommandDoCommand to add the name of the git executable to the
line 70: " command argument.
line 71: function! s:DoCommand(cmd, cmdName, statusText, options)
line 79: 
line 80: " Section: VCS function implementations {{{1
line 81: 
line 82: " Function: s:gitFunctions.Identify(buffer) {{{2
line 83: " This function only returns an inexact match due to the detection method used
line 84: " by git, which simply traverses the directory structure upward.
line 85: function! s:gitFunctions.Identify(buffer)
line 98: 
line 99: " Function: s:gitFunctions.Add(argList) {{{2
line 100: function! s:gitFunctions.Add(argList)
line 103: 
line 104: " Function: s:gitFunctions.Annotate(argList) {{{2
line 105: function! s:gitFunctions.Annotate(argList)
line 126: 
line 127: " Function: s:gitFunctions.Commit(argList) {{{2
line 128: function! s:gitFunctions.Commit(argList)
line 135: 
line 136: " Function: s:gitFunctions.Delete() {{{2
line 137: " All options are passed through.
line 138: function! s:gitFunctions.Delete(argList)
line 143: 
line 144: " Function: s:gitFunctions.Diff(argList) {{{2
line 145: " Pass-through call to git-diff.  If no options (starting with '-') are found,
line 146: " then the options in the 'VCSCommandGitDiffOpt' variable are added.
line 147: function! s:gitFunctions.Diff(argList)
line 169: 
line 170: " Function: s:gitFunctions.GetBufferInfo() {{{2
line 171: " Provides version control details for the current file.  Current version
line 172: " number and current repository version number are required to be returned by
line 173: " the vcscommand plugin.  This CVS extension adds branch name to the return
line 174: " list as well.
line 175: " Returns: List of results:  [revision, repository, branch]
line 176: 
line 177: function! s:gitFunctions.GetBufferInfo()
line 205: 
line 206: " Function: s:gitFunctions.Log() {{{2
line 207: function! s:gitFunctions.Log(argList)
line 214: 
line 215: " Function: s:gitFunctions.Revert(argList) {{{2
line 216: function! s:gitFunctions.Revert(argList)
line 219: 
line 220: " Function: s:gitFunctions.Review(argList) {{{2
line 221: function! s:gitFunctions.Review(argList)
line 243: 
line 244: " Function: s:gitFunctions.Status(argList) {{{2
line 245: function! s:gitFunctions.Status(argList)
line 248: 
line 249: " Function: s:gitFunctions.Update(argList) {{{2
line 250: function! s:gitFunctions.Update(argList)
line 253: 
line 254: 
line 255: " Section: Plugin Registration {{{1
line 256: call VCSCommandRegisterModule('git', expand('<sfile>'), s:gitFunctions, [])
calling function VCSCommandRegisterModule('git', '/home/kguest/My-.vim-files/plugin/vcsgit.vim', {'Status': function('11'), 'Add': fun...function('8'), 'Update': function('12')}, [])

line 1: ^Ilet s:plugins[a:name] = [a:path, a:commandMap, a:mappingMap]
line 2: ^Iif !empty(a:mappingMap) && !VCSCommandGetOption('VCSCommandDisableMappings', 0) && !VCSCommandGetOption('VCSCommandDisableExtensionMappings', 0)
line 5: ^I^Ifor shortcut in keys(a:mappingMap)
line 6: ^I^I^Ilet expansion = ":call <SID>ExecuteExtensionMapping('" . shortcut . "')<CR>"
line 7: ^I^I^Icall s:CreateMapping(shortcut, expansion, a:name . " extension mapping " . shortcut)
line 8: ^I^Iendfor
line 9: ^Iendif
function VCSCommandRegisterModule returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcsgit.vim

line 257: 
line 258: let &cpo = s:save_cpo
finished sourcing /home/kguest/.vim/plugin/vcsgit.vim
chdir(/home/kguest/.vim/plugin)
fchdir() to previous dir
sourcing "/home/kguest/.vim/plugin/vcssvk.vim"
line 1: " vim600: set foldmethod=marker:
line 2: "
line 3: " SVK extension for VCSCommand.
line 4: "
line 5: " Version:       VCS development
line 6: " Maintainer:    Bob Hiestand <bob.hiestand@gmail.com>
line 7: " License:
line 8: " Copyright (c) 2007 Bob Hiestand
line 9: "
line 10: " Permission is hereby granted, free of charge, to any person obtaining a copy
line 11: " of this software and associated documentation files (the "Software"), to
line 12: " deal in the Software without restriction, including without limitation the
line 13: " rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
line 14: " sell copies of the Software, and to permit persons to whom the Software is
line 15: " furnished to do so, subject to the following conditions:
line 16: "
line 17: " The above copyright notice and this permission notice shall be included in
line 18: " all copies or substantial portions of the Software.
line 19: "
line 20: " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
line 21: " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
line 22: " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
line 23: " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
line 24: " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
line 25: " FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
line 26: " IN THE SOFTWARE.
line 27: "
line 28: " Section: Documentation {{{1
line 29: "
line 30: " Options documentation: {{{2
line 31: "
line 32: " VCSCommandSVKExec
line 33: "   This variable specifies the SVK executable.  If not set, it defaults to
line 34: "   'svk' executed from the user's executable path.
line 35: 
line 36: " Section: Plugin header {{{1
line 37: 
line 38: if exists('VCSCommandDisableAll')
line 39: ^Ifinish
line 40: endif
line 41: 
line 42: if v:version < 700
line 43: ^Iechohl WarningMsg|echomsg 'VCSCommand requires at least VIM 7.0'|echohl None
line 43: echomsg 'VCSCommand requires at least VIM 7.0'|echohl None
line 43: echohl None
line 44: ^Ifinish
line 45: endif
line 46: 
line 47: runtime plugin/vcscommand.vim
Searching for "plugin/vcscommand.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/plugin/vcscommand.vim"
Searching for "/home/kguest/.vim/plugin/vcscommand.vim"
chdir(/home/kguest/.vim/plugin)
fchdir() to previous dir
line 47: sourcing "/home/kguest/.vim/plugin/vcscommand.vim"
line 1: " vim600: set foldmethod=marker:
line 2: "
line 3: " Vim plugin to assist in working with files under control of various Version
line 4: " Control Systems, such as CVS, SVN, SVK, and git.
line 5: "
line 6: " Maintainer:    Bob Hiestand <bob.hiestand@gmail.com>
line 7: " Version:       Beta 29
line 8: " License:
line 9: " Copyright (c) 2008 Bob Hiestand
line 10: "
line 11: " Permission is hereby granted, free of charge, to any person obtaining a copy
line 12: " of this software and associated documentation files (the "Software"), to
line 13: " deal in the Software without restriction, including without limitation the
line 14: " rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
line 15: " sell copies of the Software, and to permit persons to whom the Software is
line 16: " furnished to do so, subject to the following conditions:
line 17: "
line 18: " The above copyright notice and this permission notice shall be included in
line 19: " all copies or substantial portions of the Software.
line 20: "
line 21: " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
line 22: " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
line 23: " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
line 24: " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
line 25: " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
line 26: " FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
line 27: " IN THE SOFTWARE.
line 28: "
line 29: " Section: Documentation {{{1
line 30: "
line 31: " Provides functions to invoke various source control commands on the current
line 32: " file (either the current buffer, or, in the case of an directory buffer, the
line 33: " directory and all subdirectories associated with the current buffer).  The
line 34: " output of the commands is captured in a new scratch window.
line 35: "
line 36: " This plugin needs additional extension plugins, each  specific to a source
line 37: " control system, to function.  Those plugins should be placed in a
line 38: " subdirectory of the standard plugin directory named 'vcscommand'.  Several
line 39: " options include the name of the version control system in the option name.
line 40: " Such options use the placeholder text '{VCSType}', which would be replaced
line 41: " in actual usage with 'CVS' or 'SVN', for instance.
line 42: "
line 43: " Command documentation {{{2
line 44: "
line 45: " VCSAdd           Adds the current file to source control.
line 46: "
line 47: " VCSAnnotate      Displays the current file with each line annotated with the
line 48: "                  version in which it was most recently changed.  If an
line 49: "                  argument is given, the argument is used as a revision
line 50: "                  number to display.  If not given an argument, it uses the
line 51: "                  most recent version of the file on the current branch.
line 52: "                  Additionally, if the current buffer is a VCSAnnotate buffer
line 53: "                  already, the version number on the current line is used.
line 54: "
line 55: " VCSBlame         Alias for 'VCSAnnotate'.
line 56: "
line 57: " VCSCommit[!]     Commits changes to the current file to source control.
line 58: "
line 59: "                  If called with arguments, the arguments are the log message.
line 60: "
line 61: "                  If '!' is used, an empty log message is committed.
line 62: "
line 63: "                  If called with no arguments, this is a two-step command.
line 64: "                  The first step opens a buffer to accept a log message.
line 65: "                  When that buffer is written, it is automatically closed and
line 66: "                  the file is committed using the information from that log
line 67: "                  message.  The commit can be abandoned if the log message
line 68: "                  buffer is deleted or wiped before being written.
line 69: "
line 70: " VCSDelete        Deletes the current file and removes it from source control.
line 71: "
line 72: " VCSDiff          With no arguments, this displays the differences between
line 73: "                  the current file and its parent version under source
line 74: "                  control in a new scratch buffer.
line 75: "
line 76: "                  With one argument, the diff is performed on the
line 77: "                  current file against the specified revision.
line 78: "
line 79: "                  With two arguments, the diff is performed between the
line 80: "                  specified revisions of the current file.
line 81: "
line 82: "                  This command uses the 'VCSCommand{VCSType}DiffOpt' variable
line 83: "                  to specify diff options.  If that variable does not exist,
line 84: "                  a plugin-specific default is used.  If you wish to have no
line 85: "                  options, then set it to the empty string.
line 86: "
line 87: " VCSGotoOriginal  Jumps to the source buffer if the current buffer is a VCS
line 88: "                  scratch buffer.  If VCSGotoOriginal[!] is used, remove all
line 89: "                  VCS scratch buffers associated with the original file.
line 90: "
line 91: " VCSInfo          Displays extended information about the current file in a
line 92: "                  new scratch buffer. 
line 93: "
line 94: " VCSLock          Locks the current file in order to prevent other users from
line 95: "                  concurrently modifying it.  The exact semantics of this
line 96: "                  command depend on the underlying VCS.
line 97: "
line 98: " VCSLog           Displays the version history of the current file in a new
line 99: "                  scratch buffer.
line 100: "
line 101: " VCSRemove        Alias for 'VCSDelete'.
line 102: "
line 103: " VCSRevert        Replaces the modified version of the current file with the
line 104: "                  most recent version from the repository.
line 105: "
line 106: " VCSReview        Displays a particular version of the current file in a new
line 107: "                  scratch buffer.  If no argument is given, the most recent
line 108: "                  version of the file on the current branch is retrieved.
line 109: "
line 110: " VCSStatus        Displays versioning information about the current file in a
line 111: "                  new scratch buffer.
line 112: "
line 113: " VCSUnlock        Unlocks the current file in order to allow other users from
line 114: "                  concurrently modifying it.  The exact semantics of this
line 115: "                  command depend on the underlying VCS.
line 116: "
line 117: " VCSUpdate        Updates the current file with any relevant changes from the
line 118: "                  repository.
line 119: "
line 120: " VCSVimDiff       Uses vimdiff to display differences between versions of the
line 121: "                  current file.
line 122: "
line 123: "                  If no revision is specified, the most recent version of the
line 124: "                  file on the current branch is used.  With one argument,
line 125: "                  that argument is used as the revision as above.  With two
line 126: "                  arguments, the differences between the two revisions is
line 127: "                  displayed using vimdiff.
line 128: "
line 129: "                  With either zero or one argument, the original buffer is
line 130: "                  used to perform the vimdiff.  When the scratch buffer is
line 131: "                  closed, the original buffer will be returned to normal
line 132: "                  mode.
line 133: "
line 134: "                  Once vimdiff mode is started using the above methods,
line 135: "                  additional vimdiff buffers may be added by passing a single
line 136: "                  version argument to the command.  There may be up to 4
line 137: "                  vimdiff buffers total.
line 138: "
line 139: "                  Using the 2-argument form of the command resets the vimdiff
line 140: "                  to only those 2 versions.  Additionally, invoking the
line 141: "                  command on a different file will close the previous vimdiff
line 142: "                  buffers.
line 143: "
line 144: " Mapping documentation: {{{2
line 145: "
line 146: " By default, a mapping is defined for each command.  User-provided mappings
line 147: " can be used instead by mapping to <Plug>CommandName, for instance:
line 148: "
line 149: " nmap ,ca <Plug>VCSAdd
line 150: "
line 151: " The default mappings are as follow:
line 152: "
line 153: "   <Leader>ca VCSAdd
line 154: "   <Leader>cn VCSAnnotate
line 155: "   <Leader>cc VCSCommit
line 156: "   <Leader>cD VCSDelete
line 157: "   <Leader>cd VCSDiff
line 158: "   <Leader>cg VCSGotoOriginal
line 159: "   <Leader>cG VCSGotoOriginal!
line 160: "   <Leader>ci VCSInfo
line 161: "   <Leader>cl VCSLog
line 162: "   <Leader>cL VCSLock
line 163: "   <Leader>cr VCSReview
line 164: "   <Leader>cs VCSStatus
line 165: "   <Leader>cu VCSUpdate
line 166: "   <Leader>cU VCSUnlock
line 167: "   <Leader>cv VCSVimDiff
line 168: "
line 169: " Options documentation: {{{2
line 170: "
line 171: " Several variables are checked by the script to determine behavior as follow:
line 172: "
line 173: " VCSCommandCommitOnWrite
line 174: "   This variable, if set to a non-zero value, causes the pending commit to
line 175: "   take place immediately as soon as the log message buffer is written.  If
line 176: "   set to zero, only the VCSCommit mapping will cause the pending commit to
line 177: "   occur.  If not set, it defaults to 1.
line 178: "
line 179: " VCSCommandDeleteOnHide
line 180: "   This variable, if set to a non-zero value, causes the temporary VCS result
line 181: "   buffers to automatically delete themselves when hidden.
line 182: "
line 183: " VCSCommand{VCSType}DiffOpt
line 184: "   This variable, if set, determines the options passed to the diff command
line 185: "   of the underlying VCS.  Each VCS plugin defines a default value.
line 186: "
line 187: " VCSCommandDiffSplit
line 188: "   This variable overrides the VCSCommandSplit variable, but only for buffers
line 189: "   created with VCSVimDiff.
line 190: "
line 191: " VCSCommandDisableAll
line 192: "   This variable, if set, prevents the plugin or any extensions from loading
line 193: "   at all.  This is useful when a single runtime distribution is used on
line 194: "   multiple systems with varying versions.
line 195: "
line 196: " VCSCommandDisableMappings
line 197: "   This variable, if set to a non-zero value, prevents the default command
line 198: "   mappings from being set.
line 199: "
line 200: " VCSCommandDisableExtensionMappings
line 201: "   This variable, if set to a non-zero value, prevents the default command
line 202: "   mappings from being set for commands specific to an individual VCS.
line 203: "
line 204: " VCSCommandEdit
line 205: "   This variable controls whether to split the current window to display a
line 206: "   scratch buffer ('split'), or to display it in the current buffer ('edit').
line 207: "   If not set, it defaults to 'split'.
line 208: "
line 209: " VCSCommandEnableBufferSetup
line 210: "   This variable, if set to a non-zero value, activates VCS buffer management
line 211: "   mode.  This mode means that the buffer variable 'VCSRevision' is set if
line 212: "   the file is VCS-controlled.  This is useful for displaying version
line 213: "   information in the status bar.  Additional options may be set by
line 214: "   individual VCS plugins.
line 215: "
line 216: " VCSCommandMappings
line 217: "   This variable, if set, overrides the default mappings used for shortcuts.
line 218: "   It should be a List of 2-element Lists, each containing a shortcut and
line 219: "   function name pair.
line 220: "
line 221: " VCSCommandMapPrefix
line 222: "   This variable, if set, overrides the default mapping prefix ('<Leader>c').
line 223: "   This allows customization of the mapping space used by the vcscommand
line 224: "   shortcuts.
line 225: "
line 226: " VCSCommandResultBufferNameExtension
line 227: "   This variable, if set to a non-blank value, is appended to the name of the
line 228: "   VCS command output buffers.  For example, '.vcs'.  Using this option may
line 229: "   help avoid problems caused by autocommands dependent on file extension.
line 230: "
line 231: " VCSCommandResultBufferNameFunction
line 232: "   This variable, if set, specifies a custom function for naming VCS command
line 233: "   output buffers.  This function will be passed the following arguments:
line 234: "
line 235: "   command - name of the VCS command being executed (such as 'Log' or
line 236: "   'Diff').
line 237: "
line 238: "   originalBuffer - buffer number of the source file.
line 239: "
line 240: "   vcsType - type of VCS controlling this file (such as 'CVS' or 'SVN').
line 241: "
line 242: "   statusText - extra text associated with the VCS action (such as version
line 243: "   numbers).
line 244: "
line 245: " VCSCommandSplit
line 246: "   This variable controls the orientation of the various window splits that
line 247: "   may occur (such as with VCSVimDiff, when using a VCS command on a VCS
line 248: "   command buffer, or when the 'VCSCommandEdit' variable is set to 'split'.
line 249: "   If set to 'horizontal', the resulting windows will be on stacked on top of
line 250: "   one another.  If set to 'vertical', the resulting windows will be
line 251: "   side-by-side.  If not set, it defaults to 'horizontal' for all but
line 252: "   VCSVimDiff windows.
line 253: "
line 254: " VCSCommandVCSTypeOverride
line 255: "   This variable allows the VCS type detection to be overridden on a
line 256: "   path-by-path basis.  The value of this variable is expected to be a List
line 257: "   of Lists.  Each high-level List item is a List containing two elements.
line 258: "   The first element is a regular expression that will be matched against the
line 259: "   full file name of a given buffer.  If it matches, the second element will
line 260: "   be used as the VCS type.
line 261: "
line 262: " Event documentation {{{2
line 263: "   For additional customization, VCSCommand.vim uses User event autocommand
line 264: "   hooks.  Each event is in the VCSCommand group, and different patterns
line 265: "   match the various hooks.
line 266: "
line 267: "   For instance, the following could be added to the vimrc to provide a 'q'
line 268: "   mapping to quit a VCS scratch buffer:
line 269: "
line 270: "   augroup VCSCommand
line 271: "     au VCSCommand User VCSBufferCreated silent! nmap <unique> <buffer> q :bwipeout<cr> 
line 272: "   augroup END
line 273: "
line 274: "   The following hooks are available:
line 275: "
line 276: "   VCSBufferCreated           This event is fired just after a VCS command
line 277: "                              output buffer is created.  It is executed
line 278: "                              within the context of the new buffer.
line 279: "
line 280: "   VCSBufferSetup             This event is fired just after VCS buffer setup
line 281: "                              occurs, if enabled.
line 282: "
line 283: "   VCSPluginInit              This event is fired when the VCSCommand plugin
line 284: "                              first loads.
line 285: "
line 286: "   VCSPluginFinish            This event is fired just after the VCSCommand
line 287: "                              plugin loads.
line 288: "
line 289: "   VCSVimDiffFinish           This event is fired just after the VCSVimDiff
line 290: "                              command executes to allow customization of,
line 291: "                              for instance, window placement and focus.
line 292: "
line 293: " Section: Plugin header {{{1
line 294: 
line 295: " loaded_VCSCommand is set to 1 when the initialization begins, and 2 when it
line 296: " completes.  This allows various actions to only be taken by functions after
line 297: " system initialization.
line 298: 
line 299: if exists('VCSCommandDisableAll')
line 300: ^Ifinish
line 301: endif
line 302: 
line 303: if exists('loaded_VCSCommand')
line 304: ^Ifinish
finished sourcing /home/kguest/.vim/plugin/vcscommand.vim
continuing in /home/kguest/My-.vim-files/plugin/vcssvk.vim
line 48: 
line 49: if !executable(VCSCommandGetOption('VCSCommandSVKExec', 'svk'))
calling function VCSCommandGetOption('VCSCommandSVKExec', 'svk')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function VCSCommandGetOption returning 'svk'

continuing in /home/kguest/My-.vim-files/plugin/vcssvk.vim

line 50: ^I" SVK is not installed
line 51: ^Ifinish
finished sourcing /home/kguest/.vim/plugin/vcssvk.vim
chdir(/home/kguest/.vim/plugin)
fchdir() to previous dir
sourcing "/home/kguest/.vim/plugin/vcssvn.vim"
line 1: " vim600: set foldmethod=marker:
line 2: "
line 3: " SVN extension for VCSCommand.
line 4: "
line 5: " Version:       VCS development
line 6: " Maintainer:    Bob Hiestand <bob.hiestand@gmail.com>
line 7: " License:
line 8: " Copyright (c) 2007 Bob Hiestand
line 9: "
line 10: " Permission is hereby granted, free of charge, to any person obtaining a copy
line 11: " of this software and associated documentation files (the "Software"), to
line 12: " deal in the Software without restriction, including without limitation the
line 13: " rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
line 14: " sell copies of the Software, and to permit persons to whom the Software is
line 15: " furnished to do so, subject to the following conditions:
line 16: "
line 17: " The above copyright notice and this permission notice shall be included in
line 18: " all copies or substantial portions of the Software.
line 19: "
line 20: " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
line 21: " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
line 22: " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
line 23: " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
line 24: " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
line 25: " FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
line 26: " IN THE SOFTWARE.
line 27: "
line 28: " Section: Documentation {{{1
line 29: "
line 30: " Options documentation: {{{2
line 31: "
line 32: " VCSCommandSVNExec
line 33: "   This variable specifies the SVN executable.  If not set, it defaults to
line 34: "   'svn' executed from the user's executable path.
line 35: "
line 36: " VCSCommandSVNDiffExt
line 37: "   This variable, if set, sets the external diff program used by Subversion.
line 38: "
line 39: " VCSCommandSVNDiffOpt
line 40: "   This variable, if set, determines the options passed to the svn diff
line 41: "   command (such as 'u', 'w', or 'b').
line 42: 
line 43: " Section: Plugin header {{{1
line 44: 
line 45: if exists('VCSCommandDisableAll')
line 46: ^Ifinish
line 47: endif
line 48: 
line 49: if v:version < 700
line 50: ^Iechohl WarningMsg|echomsg 'VCSCommand requires at least VIM 7.0'|echohl None
line 50: echomsg 'VCSCommand requires at least VIM 7.0'|echohl None
line 50: echohl None
line 51: ^Ifinish
line 52: endif
line 53: 
line 54: runtime plugin/vcscommand.vim
Searching for "plugin/vcscommand.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/plugin/vcscommand.vim"
Searching for "/home/kguest/.vim/plugin/vcscommand.vim"
chdir(/home/kguest/.vim/plugin)
fchdir() to previous dir
line 54: sourcing "/home/kguest/.vim/plugin/vcscommand.vim"
line 1: " vim600: set foldmethod=marker:
line 2: "
line 3: " Vim plugin to assist in working with files under control of various Version
line 4: " Control Systems, such as CVS, SVN, SVK, and git.
line 5: "
line 6: " Maintainer:    Bob Hiestand <bob.hiestand@gmail.com>
line 7: " Version:       Beta 29
line 8: " License:
line 9: " Copyright (c) 2008 Bob Hiestand
line 10: "
line 11: " Permission is hereby granted, free of charge, to any person obtaining a copy
line 12: " of this software and associated documentation files (the "Software"), to
line 13: " deal in the Software without restriction, including without limitation the
line 14: " rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
line 15: " sell copies of the Software, and to permit persons to whom the Software is
line 16: " furnished to do so, subject to the following conditions:
line 17: "
line 18: " The above copyright notice and this permission notice shall be included in
line 19: " all copies or substantial portions of the Software.
line 20: "
line 21: " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
line 22: " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
line 23: " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
line 24: " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
line 25: " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
line 26: " FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
line 27: " IN THE SOFTWARE.
line 28: "
line 29: " Section: Documentation {{{1
line 30: "
line 31: " Provides functions to invoke various source control commands on the current
line 32: " file (either the current buffer, or, in the case of an directory buffer, the
line 33: " directory and all subdirectories associated with the current buffer).  The
line 34: " output of the commands is captured in a new scratch window.
line 35: "
line 36: " This plugin needs additional extension plugins, each  specific to a source
line 37: " control system, to function.  Those plugins should be placed in a
line 38: " subdirectory of the standard plugin directory named 'vcscommand'.  Several
line 39: " options include the name of the version control system in the option name.
line 40: " Such options use the placeholder text '{VCSType}', which would be replaced
line 41: " in actual usage with 'CVS' or 'SVN', for instance.
line 42: "
line 43: " Command documentation {{{2
line 44: "
line 45: " VCSAdd           Adds the current file to source control.
line 46: "
line 47: " VCSAnnotate      Displays the current file with each line annotated with the
line 48: "                  version in which it was most recently changed.  If an
line 49: "                  argument is given, the argument is used as a revision
line 50: "                  number to display.  If not given an argument, it uses the
line 51: "                  most recent version of the file on the current branch.
line 52: "                  Additionally, if the current buffer is a VCSAnnotate buffer
line 53: "                  already, the version number on the current line is used.
line 54: "
line 55: " VCSBlame         Alias for 'VCSAnnotate'.
line 56: "
line 57: " VCSCommit[!]     Commits changes to the current file to source control.
line 58: "
line 59: "                  If called with arguments, the arguments are the log message.
line 60: "
line 61: "                  If '!' is used, an empty log message is committed.
line 62: "
line 63: "                  If called with no arguments, this is a two-step command.
line 64: "                  The first step opens a buffer to accept a log message.
line 65: "                  When that buffer is written, it is automatically closed and
line 66: "                  the file is committed using the information from that log
line 67: "                  message.  The commit can be abandoned if the log message
line 68: "                  buffer is deleted or wiped before being written.
line 69: "
line 70: " VCSDelete        Deletes the current file and removes it from source control.
line 71: "
line 72: " VCSDiff          With no arguments, this displays the differences between
line 73: "                  the current file and its parent version under source
line 74: "                  control in a new scratch buffer.
line 75: "
line 76: "                  With one argument, the diff is performed on the
line 77: "                  current file against the specified revision.
line 78: "
line 79: "                  With two arguments, the diff is performed between the
line 80: "                  specified revisions of the current file.
line 81: "
line 82: "                  This command uses the 'VCSCommand{VCSType}DiffOpt' variable
line 83: "                  to specify diff options.  If that variable does not exist,
line 84: "                  a plugin-specific default is used.  If you wish to have no
line 85: "                  options, then set it to the empty string.
line 86: "
line 87: " VCSGotoOriginal  Jumps to the source buffer if the current buffer is a VCS
line 88: "                  scratch buffer.  If VCSGotoOriginal[!] is used, remove all
line 89: "                  VCS scratch buffers associated with the original file.
line 90: "
line 91: " VCSInfo          Displays extended information about the current file in a
line 92: "                  new scratch buffer. 
line 93: "
line 94: " VCSLock          Locks the current file in order to prevent other users from
line 95: "                  concurrently modifying it.  The exact semantics of this
line 96: "                  command depend on the underlying VCS.
line 97: "
line 98: " VCSLog           Displays the version history of the current file in a new
line 99: "                  scratch buffer.
line 100: "
line 101: " VCSRemove        Alias for 'VCSDelete'.
line 102: "
line 103: " VCSRevert        Replaces the modified version of the current file with the
line 104: "                  most recent version from the repository.
line 105: "
line 106: " VCSReview        Displays a particular version of the current file in a new
line 107: "                  scratch buffer.  If no argument is given, the most recent
line 108: "                  version of the file on the current branch is retrieved.
line 109: "
line 110: " VCSStatus        Displays versioning information about the current file in a
line 111: "                  new scratch buffer.
line 112: "
line 113: " VCSUnlock        Unlocks the current file in order to allow other users from
line 114: "                  concurrently modifying it.  The exact semantics of this
line 115: "                  command depend on the underlying VCS.
line 116: "
line 117: " VCSUpdate        Updates the current file with any relevant changes from the
line 118: "                  repository.
line 119: "
line 120: " VCSVimDiff       Uses vimdiff to display differences between versions of the
line 121: "                  current file.
line 122: "
line 123: "                  If no revision is specified, the most recent version of the
line 124: "                  file on the current branch is used.  With one argument,
line 125: "                  that argument is used as the revision as above.  With two
line 126: "                  arguments, the differences between the two revisions is
line 127: "                  displayed using vimdiff.
line 128: "
line 129: "                  With either zero or one argument, the original buffer is
line 130: "                  used to perform the vimdiff.  When the scratch buffer is
line 131: "                  closed, the original buffer will be returned to normal
line 132: "                  mode.
line 133: "
line 134: "                  Once vimdiff mode is started using the above methods,
line 135: "                  additional vimdiff buffers may be added by passing a single
line 136: "                  version argument to the command.  There may be up to 4
line 137: "                  vimdiff buffers total.
line 138: "
line 139: "                  Using the 2-argument form of the command resets the vimdiff
line 140: "                  to only those 2 versions.  Additionally, invoking the
line 141: "                  command on a different file will close the previous vimdiff
line 142: "                  buffers.
line 143: "
line 144: " Mapping documentation: {{{2
line 145: "
line 146: " By default, a mapping is defined for each command.  User-provided mappings
line 147: " can be used instead by mapping to <Plug>CommandName, for instance:
line 148: "
line 149: " nmap ,ca <Plug>VCSAdd
line 150: "
line 151: " The default mappings are as follow:
line 152: "
line 153: "   <Leader>ca VCSAdd
line 154: "   <Leader>cn VCSAnnotate
line 155: "   <Leader>cc VCSCommit
line 156: "   <Leader>cD VCSDelete
line 157: "   <Leader>cd VCSDiff
line 158: "   <Leader>cg VCSGotoOriginal
line 159: "   <Leader>cG VCSGotoOriginal!
line 160: "   <Leader>ci VCSInfo
line 161: "   <Leader>cl VCSLog
line 162: "   <Leader>cL VCSLock
line 163: "   <Leader>cr VCSReview
line 164: "   <Leader>cs VCSStatus
line 165: "   <Leader>cu VCSUpdate
line 166: "   <Leader>cU VCSUnlock
line 167: "   <Leader>cv VCSVimDiff
line 168: "
line 169: " Options documentation: {{{2
line 170: "
line 171: " Several variables are checked by the script to determine behavior as follow:
line 172: "
line 173: " VCSCommandCommitOnWrite
line 174: "   This variable, if set to a non-zero value, causes the pending commit to
line 175: "   take place immediately as soon as the log message buffer is written.  If
line 176: "   set to zero, only the VCSCommit mapping will cause the pending commit to
line 177: "   occur.  If not set, it defaults to 1.
line 178: "
line 179: " VCSCommandDeleteOnHide
line 180: "   This variable, if set to a non-zero value, causes the temporary VCS result
line 181: "   buffers to automatically delete themselves when hidden.
line 182: "
line 183: " VCSCommand{VCSType}DiffOpt
line 184: "   This variable, if set, determines the options passed to the diff command
line 185: "   of the underlying VCS.  Each VCS plugin defines a default value.
line 186: "
line 187: " VCSCommandDiffSplit
line 188: "   This variable overrides the VCSCommandSplit variable, but only for buffers
line 189: "   created with VCSVimDiff.
line 190: "
line 191: " VCSCommandDisableAll
line 192: "   This variable, if set, prevents the plugin or any extensions from loading
line 193: "   at all.  This is useful when a single runtime distribution is used on
line 194: "   multiple systems with varying versions.
line 195: "
line 196: " VCSCommandDisableMappings
line 197: "   This variable, if set to a non-zero value, prevents the default command
line 198: "   mappings from being set.
line 199: "
line 200: " VCSCommandDisableExtensionMappings
line 201: "   This variable, if set to a non-zero value, prevents the default command
line 202: "   mappings from being set for commands specific to an individual VCS.
line 203: "
line 204: " VCSCommandEdit
line 205: "   This variable controls whether to split the current window to display a
line 206: "   scratch buffer ('split'), or to display it in the current buffer ('edit').
line 207: "   If not set, it defaults to 'split'.
line 208: "
line 209: " VCSCommandEnableBufferSetup
line 210: "   This variable, if set to a non-zero value, activates VCS buffer management
line 211: "   mode.  This mode means that the buffer variable 'VCSRevision' is set if
line 212: "   the file is VCS-controlled.  This is useful for displaying version
line 213: "   information in the status bar.  Additional options may be set by
line 214: "   individual VCS plugins.
line 215: "
line 216: " VCSCommandMappings
line 217: "   This variable, if set, overrides the default mappings used for shortcuts.
line 218: "   It should be a List of 2-element Lists, each containing a shortcut and
line 219: "   function name pair.
line 220: "
line 221: " VCSCommandMapPrefix
line 222: "   This variable, if set, overrides the default mapping prefix ('<Leader>c').
line 223: "   This allows customization of the mapping space used by the vcscommand
line 224: "   shortcuts.
line 225: "
line 226: " VCSCommandResultBufferNameExtension
line 227: "   This variable, if set to a non-blank value, is appended to the name of the
line 228: "   VCS command output buffers.  For example, '.vcs'.  Using this option may
line 229: "   help avoid problems caused by autocommands dependent on file extension.
line 230: "
line 231: " VCSCommandResultBufferNameFunction
line 232: "   This variable, if set, specifies a custom function for naming VCS command
line 233: "   output buffers.  This function will be passed the following arguments:
line 234: "
line 235: "   command - name of the VCS command being executed (such as 'Log' or
line 236: "   'Diff').
line 237: "
line 238: "   originalBuffer - buffer number of the source file.
line 239: "
line 240: "   vcsType - type of VCS controlling this file (such as 'CVS' or 'SVN').
line 241: "
line 242: "   statusText - extra text associated with the VCS action (such as version
line 243: "   numbers).
line 244: "
line 245: " VCSCommandSplit
line 246: "   This variable controls the orientation of the various window splits that
line 247: "   may occur (such as with VCSVimDiff, when using a VCS command on a VCS
line 248: "   command buffer, or when the 'VCSCommandEdit' variable is set to 'split'.
line 249: "   If set to 'horizontal', the resulting windows will be on stacked on top of
line 250: "   one another.  If set to 'vertical', the resulting windows will be
line 251: "   side-by-side.  If not set, it defaults to 'horizontal' for all but
line 252: "   VCSVimDiff windows.
line 253: "
line 254: " VCSCommandVCSTypeOverride
line 255: "   This variable allows the VCS type detection to be overridden on a
line 256: "   path-by-path basis.  The value of this variable is expected to be a List
line 257: "   of Lists.  Each high-level List item is a List containing two elements.
line 258: "   The first element is a regular expression that will be matched against the
line 259: "   full file name of a given buffer.  If it matches, the second element will
line 260: "   be used as the VCS type.
line 261: "
line 262: " Event documentation {{{2
line 263: "   For additional customization, VCSCommand.vim uses User event autocommand
line 264: "   hooks.  Each event is in the VCSCommand group, and different patterns
line 265: "   match the various hooks.
line 266: "
line 267: "   For instance, the following could be added to the vimrc to provide a 'q'
line 268: "   mapping to quit a VCS scratch buffer:
line 269: "
line 270: "   augroup VCSCommand
line 271: "     au VCSCommand User VCSBufferCreated silent! nmap <unique> <buffer> q :bwipeout<cr> 
line 272: "   augroup END
line 273: "
line 274: "   The following hooks are available:
line 275: "
line 276: "   VCSBufferCreated           This event is fired just after a VCS command
line 277: "                              output buffer is created.  It is executed
line 278: "                              within the context of the new buffer.
line 279: "
line 280: "   VCSBufferSetup             This event is fired just after VCS buffer setup
line 281: "                              occurs, if enabled.
line 282: "
line 283: "   VCSPluginInit              This event is fired when the VCSCommand plugin
line 284: "                              first loads.
line 285: "
line 286: "   VCSPluginFinish            This event is fired just after the VCSCommand
line 287: "                              plugin loads.
line 288: "
line 289: "   VCSVimDiffFinish           This event is fired just after the VCSVimDiff
line 290: "                              command executes to allow customization of,
line 291: "                              for instance, window placement and focus.
line 292: "
line 293: " Section: Plugin header {{{1
line 294: 
line 295: " loaded_VCSCommand is set to 1 when the initialization begins, and 2 when it
line 296: " completes.  This allows various actions to only be taken by functions after
line 297: " system initialization.
line 298: 
line 299: if exists('VCSCommandDisableAll')
line 300: ^Ifinish
line 301: endif
line 302: 
line 303: if exists('loaded_VCSCommand')
line 304: ^Ifinish
finished sourcing /home/kguest/.vim/plugin/vcscommand.vim
continuing in /home/kguest/My-.vim-files/plugin/vcssvn.vim
line 55: 
line 56: if !executable(VCSCommandGetOption('VCSCommandSVNExec', 'svn'))
calling function VCSCommandGetOption('VCSCommandSVNExec', 'svn')

line 1: ^Iif has_key(s:optionOverrides, a:name) && len(s:optionOverrides[a:name]) > 0
line 2: ^I^Ireturn s:optionOverrides[a:name][-1]
line 3: ^Ielseif exists('w:' . a:name)
line 4: ^I^Ireturn w:{a:name}
line 5: ^Ielseif exists('b:' . a:name)
line 6: ^I^Ireturn b:{a:name}
line 7: ^Ielseif exists('g:' . a:name)
line 8: ^I^Ireturn g:{a:name}
line 9: ^Ielse
line 10: ^I^Ireturn a:default
function VCSCommandGetOption returning 'svn'

continuing in /home/kguest/My-.vim-files/plugin/vcssvn.vim

line 57: ^I" SVN is not installed
line 58: ^Ifinish
line 59: endif
line 60: 
line 61: let s:save_cpo=&cpo
line 62: set cpo&vim
line 63: 
line 64: " Section: Variable initialization {{{1
line 65: 
line 66: let s:svnFunctions = {}
line 67: 
line 68: " Section: Utility functions {{{1
line 69: 
line 70: " Function: s:DoCommand(cmd, cmdName, statusText, options) {{{2
line 71: " Wrapper to VCSCommandDoCommand to add the name of the SVN executable to the
line 72: " command argument.
line 73: function! s:DoCommand(cmd, cmdName, statusText, options)
line 81: 
line 82: " Section: VCS function implementations {{{1
line 83: 
line 84: " Function: s:svnFunctions.Identify(buffer) {{{2
line 85: function! s:svnFunctions.Identify(buffer)
line 103: 
line 104: " Function: s:svnFunctions.Add() {{{2
line 105: function! s:svnFunctions.Add(argList)
line 108: 
line 109: " Function: s:svnFunctions.Annotate(argList) {{{2
line 110: function! s:svnFunctions.Annotate(argList)
line 134: 
line 135: " Function: s:svnFunctions.Commit(argList) {{{2
line 136: function! s:svnFunctions.Commit(argList)
line 142: 
line 143: " Function: s:svnFunctions.Delete() {{{2
line 144: function! s:svnFunctions.Delete(argList)
line 147: 
line 148: " Function: s:svnFunctions.Diff(argList) {{{2
line 149: function! s:svnFunctions.Diff(argList)
line 186: 
line 187: " Function: s:svnFunctions.GetBufferInfo() {{{2
line 188: " Provides version control details for the current file.  Current version
line 189: " number and current repository version number are required to be returned by
line 190: " the vcscommand plugin.
line 191: " Returns: List of results:  [revision, repository, branch]
line 192: 
line 193: function! s:svnFunctions.GetBufferInfo()
line 216: 
line 217: " Function: s:svnFunctions.Info(argList) {{{2
line 218: function! s:svnFunctions.Info(argList)
line 221: 
line 222: " Function: s:svnFunctions.Lock(argList) {{{2
line 223: function! s:svnFunctions.Lock(argList)
line 226: 
line 227: " Function: s:svnFunctions.Log(argList) {{{2
line 228: function! s:svnFunctions.Log(argList)
line 244: 
line 245: " Function: s:svnFunctions.Revert(argList) {{{2
line 246: function! s:svnFunctions.Revert(argList)
line 249: 
line 250: " Function: s:svnFunctions.Review(argList) {{{2
line 251: function! s:svnFunctions.Review(argList)
line 266: 
line 267: " Function: s:svnFunctions.Status(argList) {{{2
line 268: function! s:svnFunctions.Status(argList)
line 275: 
line 276: " Function: s:svnFunctions.Unlock(argList) {{{2
line 277: function! s:svnFunctions.Unlock(argList)
line 280: " Function: s:svnFunctions.Update(argList) {{{2
line 281: function! s:svnFunctions.Update(argList)
line 284: 
line 285: " Section: Plugin Registration {{{1
line 286: call VCSCommandRegisterModule('SVN', expand('<sfile>'), s:svnFunctions, [])
calling function VCSCommandRegisterModule('SVN', '/home/kguest/My-.vim-files/plugin/vcssvn.vim', {'GetBufferInfo': function('19'), 'Un...unction('23'), 'Review': function('24')}, [])

line 1: ^Ilet s:plugins[a:name] = [a:path, a:commandMap, a:mappingMap]
line 2: ^Iif !empty(a:mappingMap) && !VCSCommandGetOption('VCSCommandDisableMappings', 0) && !VCSCommandGetOption('VCSCommandDisableExtensionMappings', 0)
line 5: ^I^Ifor shortcut in keys(a:mappingMap)
line 6: ^I^I^Ilet expansion = ":call <SID>ExecuteExtensionMapping('" . shortcut . "')<CR>"
line 7: ^I^I^Icall s:CreateMapping(shortcut, expansion, a:name . " extension mapping " . shortcut)
line 8: ^I^Iendfor
line 9: ^Iendif
function VCSCommandRegisterModule returning #0

continuing in /home/kguest/My-.vim-files/plugin/vcssvn.vim

line 287: 
line 288: let &cpo = s:save_cpo
finished sourcing /home/kguest/.vim/plugin/vcssvn.vim
Searching for "/var/lib/vim/addons/plugin/**/*.vim"
Searching for "/usr/share/vim/vimfiles/plugin/**/*.vim"
Searching for "/usr/share/vim/vim74/plugin/**/*.vim"
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/getscriptPlugin.vim"
line 1: " ---------------------------------------------------------------------
line 2: " getscriptPlugin.vim
line 3: "  Author:^ICharles E. Campbell
line 4: "  Date:^IJan 07, 2008
line 5: "  Installing:^I:help glvs-install
line 6: "  Usage:^I:help glvs
line 7: "
line 8: " GetLatestVimScripts: 642 1 :AutoInstall: getscript.vim
line 9: "
line 10: " (Rom 15:11 WEB) Again, "Praise the Lord, all you Gentiles!  Let
line 11: " all the peoples praise Him."
line 12: " ---------------------------------------------------------------------
line 13: " Initialization:^I{{{1
line 14: " if you're sourcing this file, surely you can't be
line 15: " expecting vim to be in its vi-compatible mode
line 16: if &cp || exists("g:loaded_getscriptPlugin")
line 17:  if &verbose
line 18:   echo "GetLatestVimScripts is not vi-compatible; not loaded (you need to set nocp)"
line 19:  endif
line 20:  finish
line 21: endif
line 22: let g:loaded_getscriptPlugin = "v35"
line 23: let s:keepcpo                = &cpo
line 24: set cpo&vim
line 25: 
line 26: " ---------------------------------------------------------------------
line 27: "  Public Interface: {{{1
line 28: com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()
line 29: com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()
line 30: silent! com -nargs=0 GLVS                call getscript#GetLatestVimScripts()
line 31: 
line 32: " ---------------------------------------------------------------------
line 33: " Restore Options: {{{1
line 34: let &cpo= s:keepcpo
line 35: unlet s:keepcpo
line 36: 
line 37: " ---------------------------------------------------------------------
line 38: " vim: ts=8 sts=2 fdm=marker nowrap
finished sourcing /usr/share/vim/vim74/plugin/getscriptPlugin.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/gzip.vim"
line 1: " Vim plugin for editing compressed files.
line 2: " Maintainer: Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2010 Mar 10
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded
line 7: " - when 'compatible' is set
line 8: " - some autocommands are already taking care of compressed files
line 9: if exists("loaded_gzip") || &cp || exists("#BufReadPre#*.gz")
line 10:   finish
line 11: endif
line 12: let loaded_gzip = 1
line 13: 
line 14: augroup gzip
line 15:   " Remove all gzip autocommands
line 16:   au!
line 17: 
line 18:   " Enable editing of gzipped files.
line 19:   " The functions are defined in autoload/gzip.vim.
line 20:   "
line 21:   " Set binary mode before reading the file.
line 22:   " Use "gzip -d", gunzip isn't always available.
line 23:   autocmd BufReadPre,FileReadPre^I*.gz,*.bz2,*.Z,*.lzma,*.xz setlocal bin
line 24:   autocmd BufReadPost,FileReadPost^I*.gz  call gzip#read("gzip -dn")
line 25:   autocmd BufReadPost,FileReadPost^I*.bz2 call gzip#read("bzip2 -d")
line 26:   autocmd BufReadPost,FileReadPost^I*.Z   call gzip#read("uncompress")
line 27:   autocmd BufReadPost,FileReadPost^I*.lzma call gzip#read("lzma -d")
line 28:   autocmd BufReadPost,FileReadPost^I*.xz  call gzip#read("xz -d")
line 29:   autocmd BufWritePost,FileWritePost^I*.gz  call gzip#write("gzip")
line 30:   autocmd BufWritePost,FileWritePost^I*.bz2 call gzip#write("bzip2")
line 31:   autocmd BufWritePost,FileWritePost^I*.Z   call gzip#write("compress -f")
line 32:   autocmd BufWritePost,FileWritePost^I*.lzma call gzip#write("lzma -z")
line 33:   autocmd BufWritePost,FileWritePost^I*.xz  call gzip#write("xz -z")
line 34:   autocmd FileAppendPre^I^I^I*.gz  call gzip#appre("gzip -dn")
line 35:   autocmd FileAppendPre^I^I^I*.bz2 call gzip#appre("bzip2 -d")
line 36:   autocmd FileAppendPre^I^I^I*.Z   call gzip#appre("uncompress")
line 37:   autocmd FileAppendPre^I^I^I*.lzma call gzip#appre("lzma -d")
line 38:   autocmd FileAppendPre^I^I^I*.xz   call gzip#appre("xz -d")
line 39:   autocmd FileAppendPost^I^I*.gz  call gzip#write("gzip")
line 40:   autocmd FileAppendPost^I^I*.bz2 call gzip#write("bzip2")
line 41:   autocmd FileAppendPost^I^I*.Z   call gzip#write("compress -f")
line 42:   autocmd FileAppendPost^I^I*.lzma call gzip#write("lzma -z")
line 43:   autocmd FileAppendPost^I^I*.xz call gzip#write("xz -z")
line 44: augroup END
finished sourcing /usr/share/vim/vim74/plugin/gzip.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/matchparen.vim"
line 1: " Vim plugin for showing matching parens
line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2013 May 08
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded (or disabled)
line 7: " - when 'compatible' is set
line 8: " - the "CursorMoved" autocmd event is not available.
line 9: if exists("g:loaded_matchparen") || &cp || !exists("##CursorMoved")
line 10:   finish
line 11: endif
line 12: let g:loaded_matchparen = 1
line 13: 
line 14: if !exists("g:matchparen_timeout")
line 15:   let g:matchparen_timeout = 300
line 16: endif
line 17: if !exists("g:matchparen_insert_timeout")
line 18:   let g:matchparen_insert_timeout = 60
line 19: endif
line 20: 
line 21: augroup matchparen
line 22:   " Replace all matchparen autocommands
line 23:   autocmd! CursorMoved,CursorMovedI,WinEnter * call s:Highlight_Matching_Pair()
line 24:   if exists('##TextChanged')
line 25:     autocmd! TextChanged,TextChangedI * call s:Highlight_Matching_Pair()
line 26:   endif
line 27: augroup END
line 28: 
line 29: " Skip the rest if it was already done.
line 30: if exists("*s:Highlight_Matching_Pair")
line 31:   finish
line 32: endif
line 33: 
line 34: let s:cpo_save = &cpo
line 35: set cpo-=C
line 36: 
line 37: " The function that is invoked (very often) to define a ":match" highlighting
line 38: " for any matching paren.
line 39: function! s:Highlight_Matching_Pair()
line 160: 
line 161: " Define commands that will disable and enable the plugin.
line 163: command! NoMatchParen windo 3match none | unlet! g:loaded_matchparen | au! matchparen
line 164: command! DoMatchParen runtime plugin/matchparen.vim | windo doau CursorMoved
line 165: 
line 166: let &cpo = s:cpo_save
line 167: unlet s:cpo_save
finished sourcing /usr/share/vim/vim74/plugin/matchparen.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/netrwPlugin.vim"
line 1: " netrwPlugin.vim: Handles file transfer and remote directory listing across a network
line 2: "            PLUGIN SECTION
line 3: " Date:^I^IApr 30, 2013
line 4: " Maintainer:^ICharles E Campbell <NdrOchip@ScampbellPfamily.AbizM-NOSPAM>
line 5: " GetLatestVimScripts: 1075 1 :AutoInstall: netrw.vim
line 6: " Copyright:    Copyright (C) 1999-2012 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like anything else that's free,
line 10: "               netrw.vim, netrwPlugin.vim, and netrwSettings.vim are provided
line 11: "               *as is* and comes with no warranty of any kind, either
line 12: "               expressed or implied. By using this plugin, you agree that
line 13: "               in no event will the copyright holder be liable for any damages
line 14: "               resulting from the use of this software.
line 15: "
line 16: "  But be doers of the Word, and not only hearers, deluding your own selves {{{1
line 17: "  (James 1:22 RSV)
line 18: " =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
line 19: " Load Once: {{{1
line 20: if &cp || exists("g:loaded_netrwPlugin")
line 21:  finish
line 22: endif
line 23: "DechoTabOn
line 24: let g:loaded_netrwPlugin = "v149"
line 25: if v:version < 702
line 26:  echohl WarningMsg | echo "***netrw*** you need vim version 7.2 for this version of netrw" | echohl None
line 26:  echo "***netrw*** you need vim version 7.2 for this version of netrw" | echohl None
line 26:  echohl None
line 27:  finish
line 28: endif
line 29: let s:keepcpo = &cpo
line 30: set cpo&vim
line 31: "DechoTabOn
line 32: 
line 33: " ---------------------------------------------------------------------
line 34: " Public Interface: {{{1
line 35: 
line 36: " Local Browsing: {{{2
line 37: augroup FileExplorer
line 38:  au!
line 39:  " SEE Benzinger problem...
line 40:  au BufEnter *^Isil! call s:LocalBrowse(expand("<amatch>"))
line 41:  au VimEnter *^Isil! call s:VimEnter(expand("<amatch>"))
line 42:  if has("win32") || has("win95") || has("win64") || has("win16")
line 43:   au BufEnter .* sil! call s:LocalBrowse(expand("<amatch>"))
line 44:  endif
line 45: augroup END
line 46: 
line 47: " Network Browsing Reading Writing: {{{2
line 48: augroup Network
line 49:  au!
line 50:  au BufReadCmd   file://*^I^I^I^I^I^I^I^I^Icall netrw#FileUrlRead(expand("<amatch>"))
line 51:  au BufReadCmd   ftp://*,rcp://*,scp://*,http://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau BufReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(2,expand("<amatch>"))|exe "sil doau BufReadPost ".fnameescape(expand("<amatch>"))
line 52:  au FileReadCmd  ftp://*,rcp://*,scp://*,http://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau FileReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(1,expand("<amatch>"))|exe "sil doau FileReadPost ".fnameescape(expand("<amatch>"))
line 53:  au BufWriteCmd  ftp://*,rcp://*,scp://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau BufWritePre ".fnameescape(expand("<amatch>"))|exe 'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau BufWritePost ".fnameescape(expand("<amatch>"))
line 54:  au FileWriteCmd ftp://*,rcp://*,scp://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau FileWritePre ".fnameescape(expand("<amatch>"))|exe "'[,']".'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau FileWritePost ".fnameescape(expand("<amatch>"))
line 55:  try
line 56:   au SourceCmd   ftp://*,rcp://*,scp://*,http://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))
line 57:  catch /^Vim\%((\a\+)\)\=:E216/
line 58:   au SourcePre   ftp://*,rcp://*,scp://*,http://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))
line 59:  endtry
line 60: augroup END
line 61: 
line 62: " Commands: :Nread, :Nwrite, :NetUserPass {{{2
line 63: com! -count=1 -nargs=*^INread^I^Icall netrw#NetrwSavePosn()<bar>call netrw#NetRead(<count>,<f-args>)<bar>call netrw#NetrwRestorePosn()
line 64: com! -range=% -nargs=*^INwrite^I^Icall netrw#NetrwSavePosn()<bar><line1>,<line2>call netrw#NetWrite(<f-args>)<bar>call netrw#NetrwRestorePosn()
line 65: com! -nargs=*^I^INetUserPass^Icall NetUserPass(<f-args>)
line 66: com! -nargs=*^I        Nsource^I^Icall netrw#NetrwSavePosn()<bar>call netrw#NetSource(<f-args>)<bar>call netrw#NetrwRestorePosn()
line 67: 
line 68: " Commands: :Explore, :Sexplore, Hexplore, Vexplore {{{2
line 69: com! -nargs=* -bar -bang -count=0 -complete=dir^IExplore^I^Icall netrw#Explore(<count>,0,0+<bang>0,<q-args>)
line 70: com! -nargs=* -bar -bang -count=0 -complete=dir^ISexplore^Icall netrw#Explore(<count>,1,0+<bang>0,<q-args>)
line 71: com! -nargs=* -bar -bang -count=0 -complete=dir^IHexplore^Icall netrw#Explore(<count>,1,2+<bang>0,<q-args>)
line 72: com! -nargs=* -bar -bang -count=0 -complete=dir^IVexplore^Icall netrw#Explore(<count>,1,4+<bang>0,<q-args>)
line 73: com! -nargs=* -bar       -count=0 -complete=dir^ITexplore^Icall netrw#Explore(<count>,0,6        ,<q-args>)
line 74: com! -nargs=* -bar -bang^I^I^INexplore^Icall netrw#Explore(-1,0,0,<q-args>)
line 75: com! -nargs=* -bar -bang^I^I^IPexplore^Icall netrw#Explore(-2,0,0,<q-args>)
line 76: 
line 77: " Commands: NetrwSettings {{{2
line 78: com! -nargs=0^INetrwSettings^Icall netrwSettings#NetrwSettings()
line 79: com! -bang^INetrwClean^Icall netrw#NetrwClean(<bang>0)
line 80: 
line 81: " Maps:
line 82: if !exists("g:netrw_nogx") && maparg('gx','n') == ""
line 83:  if !hasmapto('<Plug>NetrwBrowseX')
line 84:   nmap <unique> gx <Plug>NetrwBrowseX
line 85:  endif
line 86:  nno <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)<cr>
line 87: endif
line 88: 
line 89: " ---------------------------------------------------------------------
line 90: " LocalBrowse: {{{2
line 91: fun! s:LocalBrowse(dirname)
line 116: 
line 117: " ---------------------------------------------------------------------
line 118: " s:VimEnter: {{{2
line 119: fun! s:VimEnter(dirname)
line 127: 
line 128: " ---------------------------------------------------------------------
line 129: " NetrwStatusLine: {{{1
line 130: fun! NetrwStatusLine()
line 141: 
line 142: " ------------------------------------------------------------------------
line 143: " NetUserPass: set username and password for subsequent ftp transfer {{{1
line 144: "   Usage:  :call NetUserPass()^I^I^I-- will prompt for userid and password
line 145: "^I    :call NetUserPass("uid")^I^I-- will prompt for password
line 146: "^I    :call NetUserPass("uid","password") -- sets global userid and password
line 147: fun! NetUserPass(...)
line 171: 
line 172: " ------------------------------------------------------------------------
line 173: " Modelines And Restoration: {{{1
line 174: let &cpo= s:keepcpo
line 175: unlet s:keepcpo
line 176: " vim:ts=8 fdm=marker
finished sourcing /usr/share/vim/vim74/plugin/netrwPlugin.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/rrhelper.vim"
line 1: " Vim plugin with helper function(s) for --remote-wait
line 2: " Maintainer: Flemming Madsen <fma@cci.dk>
line 3: " Last Change: 2008 May 29
line 4: 
line 5: " Has this already been loaded?
line 6: if exists("loaded_rrhelper") || !has("clientserver")
line 7:   finish
finished sourcing /usr/share/vim/vim74/plugin/rrhelper.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/spellfile.vim"
line 1: " Vim plugin for downloading spell files
line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2006 Feb 01
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded
line 7: " - when 'compatible' is set
line 8: " - some autocommands are already taking care of spell files
line 9: if exists("loaded_spellfile_plugin") || &cp || exists("#SpellFileMissing")
line 10:   finish
line 11: endif
line 12: let loaded_spellfile_plugin = 1
line 13: 
line 14: " The function is in the autoload directory.
line 15: autocmd SpellFileMissing * call spellfile#LoadFile(expand('<amatch>'))
finished sourcing /usr/share/vim/vim74/plugin/spellfile.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/tarPlugin.vim"
line 1: " tarPlugin.vim -- a Vim plugin for browsing tarfiles
line 2: " Original was copyright (c) 2002, Michael C. Toren <mct@toren.net>
line 3: " Modified by Charles E. Campbell
line 4: " Distributed under the GNU General Public License.
line 5: "
line 6: " Updates are available from <http://michael.toren.net/code/>.  If you
line 7: " find this script useful, or have suggestions for improvements, please
line 8: " let me know.
line 9: " Also look there for further comments and documentation.
line 10: "
line 11: " This part only sets the autocommands.  The functions are in autoload/tar.vim.
line 12: " ---------------------------------------------------------------------
line 13: "  Load Once: {{{1
line 14: if &cp || exists("g:loaded_tarPlugin")
line 15:  finish
line 16: endif
line 17: let g:loaded_tarPlugin = "v29"
line 18: let s:keepcpo          = &cpo
line 19: set cpo&vim
line 20: 
line 21: " ---------------------------------------------------------------------
line 22: "  Public Interface: {{{1
line 23: augroup tar
line 24:   au!
line 25:   au BufReadCmd   tarfile::*^Icall tar#Read(expand("<amatch>"), 1)
line 26:   au FileReadCmd  tarfile::*^Icall tar#Read(expand("<amatch>"), 0)
line 27:   au BufWriteCmd  tarfile::*^Icall tar#Write(expand("<amatch>"))
line 28:   au FileWriteCmd tarfile::*^Icall tar#Write(expand("<amatch>"))
line 29: 
line 30:   if has("unix")
line 31:    au BufReadCmd   tarfile::*/*^Icall tar#Read(expand("<amatch>"), 1)
line 32:    au FileReadCmd  tarfile::*/*^Icall tar#Read(expand("<amatch>"), 0)
line 33:    au BufWriteCmd  tarfile::*/*^Icall tar#Write(expand("<amatch>"))
line 34:    au FileWriteCmd tarfile::*/*^Icall tar#Write(expand("<amatch>"))
line 35:   endif
line 36: 
line 37:   au BufReadCmd   *.tar.gz^I^Icall tar#Browse(expand("<amatch>"))
line 38:   au BufReadCmd   *.tar^I^I^Icall tar#Browse(expand("<amatch>"))
line 39:   au BufReadCmd   *.lrp^I^I^Icall tar#Browse(expand("<amatch>"))
line 40:   au BufReadCmd   *.tar.bz2^I^Icall tar#Browse(expand("<amatch>"))
line 41:   au BufReadCmd   *.tar.Z^I^Icall tar#Browse(expand("<amatch>"))
line 42:   au BufReadCmd   *.tgz^I^I^Icall tar#Browse(expand("<amatch>"))
line 43:   au BufReadCmd   *.tar.lzma^Icall tar#Browse(expand("<amatch>"))
line 44:   au BufReadCmd   *.tar.xz^I^Icall tar#Browse(expand("<amatch>"))
line 45:   au BufReadCmd   *.txz^I^I^Icall tar#Browse(expand("<amatch>"))
line 46: augroup END
line 47: com! -nargs=? -complete=file Vimuntar call tar#Vimuntar(<q-args>)
line 48: 
line 49: " ---------------------------------------------------------------------
line 50: " Restoration And Modelines: {{{1
line 51: " vim: fdm=marker
line 52: let &cpo= s:keepcpo
line 53: unlet s:keepcpo
finished sourcing /usr/share/vim/vim74/plugin/tarPlugin.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/tohtml.vim"
line 1: " Vim plugin for converting a syntax highlighted file to HTML.
line 2: " Maintainer: Ben Fritz <fritzophrenic@gmail.com>
line 3: " Last Change: 2013 Jul 08
line 4: "
line 5: " The core of the code is in $VIMRUNTIME/autoload/tohtml.vim and
line 6: " $VIMRUNTIME/syntax/2html.vim
line 7: "
line 8: " TODO: {{{
line 9: "   * Options for generating the CSS in external style sheets. New :TOcss
line 10: "     command to convert the current color scheme into a (mostly) generic CSS
line 11: "     stylesheet which can be re-used. Alternate stylesheet support? Good start
line 12: "     by Erik Falor
line 13: "     ( https://groups.google.com/d/topic/vim_use/7XTmC4D22dU/discussion ).
line 14: "   * Add optional argument to :TOhtml command to specify mode (gui, cterm,
line 15: "     term) to use for the styling. Suggestion by "nacitar".
line 16: "   * Add way to override or specify which RGB colors map to the color numbers
line 17: "     in cterm. Get better defaults than just guessing? Suggestion by "nacitar".
line 18: "   * Disable filetype detection until after all processing is done.
line 19: "   * Add option for not generating the hyperlink on stuff that looks like a
line 20: "     URL? Or just color the link to fit with the colorscheme (and only special
line 21: "     when hovering)?
line 22: "   * Bug: Opera does not allow printing more than one page if uncopyable
line 23: "     regions is turned on. Possible solution: Add normal text line numbers with
line 24: "     display:none, set to display:inline for print style sheets, and hide
line 25: "     <input> elements for print, to allow Opera printing multiple pages (and
line 26: "     other uncopyable areas?). May need to make the new text invisible to IE
line 27: "     with conditional comments to prevent copying it, IE for some reason likes
line 28: "     to copy hidden text. Other browsers too?
line 29: "   * Bug: still a 1px gap throughout the fold column when html_prevent_copy is
line 30: "     "fn" in some browsers. Specifically, in Chromium on Ubuntu (but not Chrome
line 31: "     on Windows). Perhaps it is font related?
line 32: "   * Bug: still some gaps in the fold column when html_prevent_copy contains
line 33: "     'd' and showing the whole diff (observed in multiple browsers). Only gaps
line 34: "     on diff lines though.
line 35: "   * Undercurl support via CSS3, with fallback to dotted or something:
line 36: "^Ihttps://groups.google.com/d/topic/vim_use/BzXA6He1pHg/discussion
line 37: "   * Redo updates for modified default foldtext (v11) when/if the patch is
line 38: "     accepted to modify it.
line 39: "   * Test case +diff_one_file-dynamic_folds+expand_tabs-hover_unfold
line 40: "^I^I+ignore_conceal-ignore_folding+no_foldcolumn+no_pre+no_progress
line 41: "^I^I+number_lines-pre_wrap-use_css+use_xhtml+whole_filler.xhtml
line 42: "     does not show the whole diff filler as it is supposed to?
line 43: "   * Bug: when 'isprint' is wrong for the current encoding, will generate
line 44: "     invalid content. Can/should anything be done about this? Maybe a separate
line 45: "     plugin to correct 'isprint' based on encoding?
line 46: "   * Check to see if the windows-125\d encodings actually work in Unix without
line 47: "     the 8bit- prefix. Add prefix to autoload dictionaries for Unix if not.
line 48: "   * Font auto-detection similar to
line 49: "     http://www.vim.org/scripts/script.php?script_id=2384 but for a variety of
line 50: "     platforms.
line 51: "   * Error thrown when sourcing 2html.vim directly when plugins are not loaded.
line 52: "   * Pull in code from http://www.vim.org/scripts/script.php?script_id=3113 :
line 53: "^I- listchars support
line 54: "^I- full-line background highlight
line 55: "^I- other?
line 56: "   * Make it so deleted lines in a diff don't create side-scrolling (get it
line 57: "     free with full-line background highlight above).
line 58: "   * Restore open/closed folds and cursor position after processing each file
line 59: "     with option not to restore for speed increase.
line 60: "   * Add extra meta info (generation time, etc.)?
line 61: "   * Tidy up so we can use strict doctype in even more situations
line 62: "   * Implementation detail: add threshold for writing the lines to the html
line 63: "     buffer before we're done (5000 or so lines should do it)
line 64: "   * TODO comments for code cleanup scattered throughout
line 65: "}}}
line 66: 
line 67: if exists('g:loaded_2html_plugin')
line 68:   finish
line 69: endif
line 70: let g:loaded_2html_plugin = 'vim7.4_v1'
line 71: 
line 72: "
line 73: " Changelog: {{{
line 74: "   7.4_v1  (this version): Fix modeline mangling for new "Vim:" format, and
line 75: "^I^I^I    also for version-specific modelines like "vim>703:".
line 76: "
line 77: "   7.3 updates: {{{
line 78: "   7.3_v14 (ad6996a23e3e): Allow suppressing line number anchors using
line 79: "^I^I^I    g:html_line_ids=0. Allow customizing
line 80: "^I^I^I    important IDs (like line IDs and fold IDs) using
line 81: "^I^I^I    g:html_id_expr evalutated when the buffer conversion
line 82: "^I^I^I    is started.
line 83: "   7.3_v13 (2eb30f341e8d): Keep foldmethod at manual in the generated file and
line 84: "^I^I^I    insert modeline to set it to manual.
line 85: "^I^I^I    Fix bug: diff mode with 2 unsaved buffers creates a
line 86: "^I^I^I    duplicate of one buffer instead of including both.
line 87: "^I^I^I    Add anchors to each line so you can put '#L123'
line 88: "^I^I^I    or '#123' at the end of the URL to jump to line 123
line 89: "^I^I^I    (idea by Andy Spencer). Add javascript to open folds
line 90: "^I^I^I    to show the anchor being jumped to if it is hidden.
line 91: "^I^I^I    Fix XML validation error: &nsbp; not part of XML.
line 92: "^I^I^I    Allow TOhtml to chain together with other commands
line 93: "^I^I^I    using |.
line 94: "   7.3_v12 (9910cbff5f16): Fix modeline mangling to also work for when multiple
line 95: "^I^I^I    highlight groups make up the start-of-modeline text.
line 96: "^I^I^I    Improve render time of page with uncopyable regions
line 97: "^I^I^I    by not using one-input-per-char. Change name of
line 98: "^I^I^I    uncopyable option from html_unselectable to
line 99: "^I^I^I    html_prevent_copy. Added html_no_invalid option and
line 100: "^I^I^I    default to inserting invalid markup for uncopyable
line 101: "^I^I^I    regions to prevent MS Word from pasting undeletable
line 102: "^I^I^I    <input> elements. Fix 'cpo' handling (Thilo Six).
line 103: "^I^I 7.3_v12b1: Add html_unselectable option. Rework logic to
line 104: "^I^I^I    eliminate post-processing substitute commands in
line 105: "^I^I^I    favor of doing the work up front. Remove unnecessary
line 106: "^I^I^I    special treatment of 'LineNr' highlight group. Minor
line 107: "^I^I^I    speed improvements. Fix modeline mangling in
line 108: "^I^I^I    generated output so it works for text in the first
line 109: "^I^I^I    column. Fix missing line number and fold column in
line 110: "^I^I^I    diff filler lines. Fix that some fonts have a 1px
line 111: "^I^I^I    gap (using a dirty hack, improvements welcome). Add
line 112: "^I^I^I    "colorscheme" meta tag. Does NOT include support for
line 113: "^I^I^I    the new default foldtext added in v11, as the patch
line 114: "^I^I^I    adding it has not yet been included in Vim.
line 115: "   7.3_v11 ( unreleased ): Support new default foldtext from patch by Christian
line 116: "^I^I^I    Brabandt in
line 117: "^I^I^I    http://groups.google.com/d/topic/vim_dev/B6FSGfq9VoI/discussion.
line 118: "^I^I^I    This patch has not yet been included in Vim, thus
line 119: "^I^I^I    these changes are removed in the next version.
line 120: "   7.3_v10 (fd09a9c8468e): Fix error E684 when converting a range wholly inside
line 121: "^I^I^I    multiple nested folds with dynamic folding on.
line 122: "^I^I^I    Also fix problem with foldtext in this situation.
line 123: "   7.3_v9  (0877b8d6370e): Add html_pre_wrap option active with html_use_css
line 124: "^I^I^I    and without html_no_pre, default value same as
line 125: "^I^I^I    'wrap' option, (Andy Spencer). Don't use
line 126: "^I^I^I    'fileencoding' for converted document encoding if
line 127: "^I^I^I    'buftype' indicates a special buffer which isn't
line 128: "^I^I^I    written.
line 129: "   7.3_v8  (85c5a72551e2): Add html_expand_tabs option to allow leaving tab
line 130: "^I^I^I    characters in generated output (Andy Spencer).
line 131: "^I^I^I    Escape text that looks like a modeline so Vim
line 132: "^I^I^I    doesn't use anything in the converted HTML as a
line 133: "^I^I^I    modeline. Bugfixes: Fix folding when a fold starts
line 134: "^I^I^I    before the conversion range. Remove fold column when
line 135: "^I^I^I    there are no folds.
line 136: "   7.3_v7  (840c3cadb842): see betas released on vim_dev below:
line 137: "^I^I  7.3_v7b3: Fixed bug, convert Unicode to UTF-8 all the way.
line 138: "^I^I  7.3_v7b2: Remove automatic detection of encodings that are not
line 139: "^I^I^I    supported by all major browsers according to
line 140: "^I^I^I    http://wiki.whatwg.org/wiki/Web_Encodings and
line 141: "^I^I^I    convert to UTF-8 for all Unicode encodings. Make
line 142: "^I^I^I    HTML encoding to Vim encoding detection be
line 143: "^I^I^I    case-insensitive for built-in pairs.
line 144: "^I^I  7.3_v7b1: Remove use of setwinvar() function which cannot be
line 145: "^I^I^I    called in restricted mode (Andy Spencer). Use
line 146: "^I^I^I    'fencoding' instead of 'encoding' to determine by
line 147: "^I^I^I    charset, and make sure the 'fenc' of the generated
line 148: "^I^I^I    file matches its indicated charset. Add charsets for
line 149: "^I^I^I    all of Vim's natively supported encodings.
line 150: "   7.3_v6  (0d3f0e3d289b): Really fix bug with 'nowrapscan', 'magic' and other
line 151: "^I^I^I    user settings interfering with diff mode generation,
line 152: "^I^I^I    trailing whitespace (e.g. line number column) when
line 153: "^I^I^I    using html_no_pre, and bugs when using
line 154: "^I^I^I    html_hover_unfold.
line 155: "   7.3_v5  ( unreleased ): Fix bug with 'nowrapscan' and also with out-of-sync
line 156: "^I^I^I    folds in diff mode when first line was folded.
line 157: "   7.3_v4  (7e008c174cc3): Bugfixes, especially for xhtml markup, and diff mode
line 158: "   7.3_v3  (a29075150aee): Refactor option handling and make html_use_css
line 159: "^I^I^I    default to true when not set to anything. Use strict
line 160: "^I^I^I    doctypes where possible. Rename use_xhtml option to
line 161: "^I^I^I    html_use_xhtml for consistency. Use .xhtml extension
line 162: "^I^I^I    when using this option. Add meta tag for settings.
line 163: "   7.3_v2  (80229a724a11): Fix syntax highlighting in diff mode to use both the
line 164: "^I^I^I    diff colors and the normal syntax colors
line 165: "   7.3_v1  (e7751177126b): Add conceal support and meta tags in output
line 166: "   Pre-v1 baseline: Mercurial changeset 3c9324c0800e
line 167: "}}}
line 168: "}}}
line 169: 
line 170: " Define the :TOhtml command when:
line 171: " - 'compatible' is not set
line 172: " - this plugin was not already loaded
line 173: " - user commands are available. {{{
line 174: if !&cp && !exists(":TOhtml") && has("user_commands")
line 175:   command -range=% -bar TOhtml :call tohtml#Convert2HTML(<line1>, <line2>)
line 176: endif "}}}
line 177: 
line 178: " Make sure any patches will probably use consistent indent
line 179: "   vim: ts=8 sw=2 sts=2 noet fdm=marker
finished sourcing /usr/share/vim/vim74/plugin/tohtml.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/vimballPlugin.vim"
line 1: " vimballPlugin : construct a file containing both paths and files
line 2: " Author: Charles E. Campbell, Jr.
line 3: " Copyright: (c) 2004-2010 by Charles E. Campbell, Jr.
line 4: "            The VIM LICENSE applies to Vimball.vim, and Vimball.txt
line 5: "            (see |copyright|) except use "Vimball" instead of "Vim".
line 6: "            No warranty, express or implied.
line 7: "  *** ***   Use At-Your-Own-Risk!   *** ***
line 8: "
line 9: " (Rom 2:1 WEB) Therefore you are without excuse, O man, whoever you are who
line 10: "      judge. For in that which you judge another, you condemn yourself. For
line 11: "      you who judge practice the same things.
line 12: " GetLatestVimScripts: 1502 1 :AutoInstall: vimball.vim
line 13: 
line 14: " ---------------------------------------------------------------------
line 15: "  Load Once: {{{1
line 16: if &cp || exists("g:loaded_vimballPlugin")
line 17:  finish
line 18: endif
line 19: let g:loaded_vimballPlugin = "v35"
line 20: let s:keepcpo              = &cpo
line 21: set cpo&vim
line 22: 
line 23: " ------------------------------------------------------------------------------
line 24: " Public Interface: {{{1
line 25: com! -ra   -complete=file -na=+ -bang MkVimball^I^I^I^Icall vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)
line 26: com! -na=? -complete=dir  UseVimball^I^I^I^I^I^Icall vimball#Vimball(1,<f-args>)
line 27: com! -na=0                VimballList^I^I^I^I^I^Icall vimball#Vimball(0)
line 28: com! -na=* -complete=dir  RmVimball^I^I^I^I^I^I^Icall vimball#SaveSettings()|call vimball#RmVimball(<f-args>)|call vimball#RestoreSettings()
line 29: au BufEnter  *.vba,*.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^Isetlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")
line 30: au SourceCmd *.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if expand("%")!=expand("<afile>")|close|endif
line 31: au SourceCmd *.vba^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif
line 32: au BufEnter  *.vmb,*.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^Isetlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")
line 33: au SourceCmd *.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if expand("%")!=expand("<afile>")|close|endif
line 34: au SourceCmd *.vmb^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif
line 35: 
line 36: " =====================================================================
line 37: " Restoration And Modelines: {{{1
line 38: " vim: fdm=marker
line 39: let &cpo= s:keepcpo
line 40: unlet s:keepcpo
finished sourcing /usr/share/vim/vim74/plugin/vimballPlugin.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/zipPlugin.vim"
line 1: " zipPlugin.vim: Handles browsing zipfiles
line 2: "            PLUGIN PORTION
line 3: " Date:^I^I^IJun 07, 2013
line 4: " Maintainer:^ICharles E Campbell <NdrOchip@ScampbellPfamily.AbizM-NOSPAM>
line 5: " License:^I^IVim License  (see vim's :help license)
line 6: " Copyright:    Copyright (C) 2005-2013 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like anything else that's free,
line 10: "               zipPlugin.vim is provided *as is* and comes with no warranty
line 11: "               of any kind, either expressed or implied. By using this
line 12: "               plugin, you agree that in no event will the copyright
line 13: "               holder be liable for any damages resulting from the use
line 14: "               of this software.
line 15: "
line 16: " (James 4:8 WEB) Draw near to God, and he will draw near to you.
line 17: " Cleanse your hands, you sinners; and purify your hearts, you double-minded.
line 18: " ---------------------------------------------------------------------
line 19: " Load Once: {{{1
line 20: if &cp || exists("g:loaded_zipPlugin")
line 21:  finish
line 22: endif
line 23: let g:loaded_zipPlugin = "v27"
line 24: let s:keepcpo          = &cpo
line 25: set cpo&vim
line 26: 
line 27: " ---------------------------------------------------------------------
line 28: " Options: {{{1
line 29: if !exists("g:zipPlugin_ext")
line 30:  let g:zipPlugin_ext= '*.zip,*.jar,*.xpi,*.ja,*.war,*.ear,*.celzip,*.oxt,*.kmz,*.wsz,*.xap,*.docx,*.docm,*.dotx,*.dotm,*.potx,*.potm,*.ppsx,*.ppsm,*.pptx,*.pptm,*.ppam,*.sldx,*.thmx,*.xlam,*.xlsx,*.xlsm,*.xlsb,*.xltx,*.xltm,*.xlam,*.crtx,*.vdw,*.glox,*.gcsx,*.gqsx'
line 31: endif
line 32: 
line 33: " ---------------------------------------------------------------------
line 34: " Public Interface: {{{1
line 35: augroup zip
line 36:  au!
line 37:  au BufReadCmd   zipfile:*^Icall zip#Read(expand("<amatch>"), 1)
line 38:  au FileReadCmd  zipfile:*^Icall zip#Read(expand("<amatch>"), 0)
line 39:  au BufWriteCmd  zipfile:*^Icall zip#Write(expand("<amatch>"))
line 40:  au FileWriteCmd zipfile:*^Icall zip#Write(expand("<amatch>"))
line 41: 
line 42:  if has("unix")
line 43:   au BufReadCmd   zipfile:*/*^Icall zip#Read(expand("<amatch>"), 1)
line 44:   au FileReadCmd  zipfile:*/*^Icall zip#Read(expand("<amatch>"), 0)
line 45:   au BufWriteCmd  zipfile:*/*^Icall zip#Write(expand("<amatch>"))
line 46:   au FileWriteCmd zipfile:*/*^Icall zip#Write(expand("<amatch>"))
line 47:  endif
line 48: 
line 49:  exe "au BufReadCmd ".g:zipPlugin_ext.' call zip#Browse(expand("<amatch>"))'
line 49: au BufReadCmd *.zip,*.jar,*.xpi,*.ja,*.war,*.ear,*.celzip,*.oxt,*.kmz,*.wsz,*.xap,*.docx,*.docm,*.dotx,*.dotm,*.potx,*.potm,*.ppsx,*.ppsm,*.pptx,*.pptm,*.ppam,*.sldx,*.thmx,*.xlam,*.xlsx,*.xlsm,*.xlsb,*.xltx,*.xltm,*.xlam,*.crtx,*.vdw,*.glox,*.gcsx,*.gqsx call zip#Browse(expand("<amatch>"))
line 50: augroup END
line 51: 
line 52: " ---------------------------------------------------------------------
line 53: "  Restoration And Modelines: {{{1
line 54: "  vim: fdm=marker
line 55: let &cpo= s:keepcpo
line 56: unlet s:keepcpo
finished sourcing /usr/share/vim/vim74/plugin/zipPlugin.vim
Searching for "/usr/share/vim/vimfiles/after/plugin/**/*.vim"
Searching for "/var/lib/vim/addons/after/plugin/**/*.vim"
Searching for "/home/kguest/.vim/after/plugin/**/*.vim"
chdir(/home/kguest/.vim/after/plugin)
fchdir() to previous dir
sourcing "/home/kguest/.vim/after/plugin/general.vim"
line 1: "let Tlist_Ctags_Cmd = "/usr/local/bin/ctags-ex"
line 2: let Tlist_Ctags_Cmd = "/usr/bin/etags"
line 3: let Tlist_Inc_Winwidth = 1
line 4: let Tlist_Exit_OnlyWindow = 1
line 5: let Tlist_File_Fold_Auto_Close = 1
line 6: let Tlist_Process_File_Always = 1
line 7: let Tlist_Enable_Fold_Column = 1
line 8: let Tlist_php_settings = 'php;c:class;d:constant;f:function'
line 9: if exists('loaded_taglist')
line 10:         nmap <silent> <F8> :TlistToggle<CR>
line 11: endif
finished sourcing /home/kguest/.vim/after/plugin/general.vim
Reading viminfo file "/home/kguest/.viminfo" info oldfiles
E303: Unable to open swap file for "Basic.php", recovery impossible
"Basic.php" 
"Basic.php" 7L, 68C
Reading viminfo file "/home/kguest/.viminfo" marks
Executing BufRead Auto commands for "*.php"
autocommand setf php

line 0: setf php
Executing FileType Auto commands for "*"
autocommand call s:LoadFTPlugin()

line 0: call s:LoadFTPlugin()
calling function <SNR>12_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17: ^Iexe 'runtime! ftplugin/' . name . '.vim ftplugin/' . name . '_*.vim ftplugin/' . name . '/*.vim'
line 17: runtime! ftplugin/php.vim ftplugin/php_*.vim ftplugin/php/*.vim
Searching for "ftplugin/php.vim ftplugin/php_*.vim ftplugin/php/*.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/ftplugin/php.vim"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/ftplugin/php_*.vim"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/ftplugin/php/*.vim"
Searching for "/home/kguest/.vim/ftplugin/php.vim"
chdir(/home/kguest/.vim/ftplugin)
fchdir() to previous dir
line 17: sourcing "/home/kguest/.vim/ftplugin/php.vim"
line 1: " .vim/ftplugin/php.vim by Tobias Schlitt <toby@php.net>.
line 2: " No copyright, feel free to use this, as you like.
line 3: 
line 4: " Including PDV
line 5: source ~/.vim/php-doc.vim
chdir(/home/kguest/.vim)
fchdir() to previous dir
line 5: sourcing "/home/kguest/.vim/php-doc.vim"
line 1: " PDV (phpDocumentor for Vim)
line 2: " ===========================
line 3: "
line 4: " Version: 1.0.0
line 5: " 
line 6: " Copyright 2005 by Tobias Schlitt <toby@php.net>
line 7: " Inspired by phpDoc script for Vim by Vidyut Luther (http://www.phpcult.com/).
line 8: "
line 9: " Provided under the GPL (http://www.gnu.org/copyleft/gpl.html).
line 10: "
line 11: " This script provides functions to generate phpDocumentor conform
line 12: " documentation blocks for your PHP code. The script currently
line 13: " documents:
line 14: " 
line 15: " - Classes
line 16: " - Methods/Functions
line 17: " - Attributes
line 18: "
line 19: " All of those supporting all PHP 4 and 5 syntax elements. 
line 20: "
line 21: " Beside that it allows you to define default values for phpDocumentor tags 
line 22: " like @version (I use $id$ here), @author, @license and so on. 
line 23: "
line 24: " For function/method parameters and attributes, the script tries to guess the 
line 25: " type as good as possible from PHP5 type hints or default values (array, bool, 
line 26: " int, string...).
line 27: "
line 28: " You can use this script by mapping the function PhpDoc() to any
line 29: " key combination. Hit this on the line where the element to document
line 30: " resides and the doc block will be created directly above that line.
line 31: " 
line 32: " Installation
line 33: " ============
line 34: " 
line 35: " For example include into your .vimrc:
line 36: " 
line 37: " source ~/.vim/php-doc.vim
line 38: " imap <C-o> ^[:set paste<CR>:call PhpDoc()<CR>:set nopaste<CR>i
line 39: "
line 40: " This includes the script and maps the combination <ctrl>+o (only in
line 41: " insert mode) to the doc function. 
line 42: "
line 43: " Changelog
line 44: " =========
line 45: "
line 46: " Version 1.0.0
line 47: " -------------
line 48: "
line 49: "  * Created the initial version of this script while playing around with VIM
line 50: "  scripting the first time and trying to fix Vidyut's solution, which
line 51: "  resulted in a complete rewrite.
line 52: "
line 53: " Version 1.1.0
line 54: " -------------
line 55: "  * Fixed bug with call-by-reference parameters. 
line 56: " 
line 57: 
line 58: if has ("user_commands")
line 59: 
line 60: " {{{ Globals
line 61: 
line 62: " After phpDoc standard
line 63: let g:pdv_cfg_CommentHead = "/**"
line 64: let g:pdv_cfg_Comment1 = " * "
line 65: let g:pdv_cfg_Commentn = " *"
line 66: let g:pdv_cfg_CommentTail = " */"
line 67: let g:pdv_cfg_CommentSingle = "//"
line 68: 
line 69: " Default values
line 70: let g:pdv_cfg_Type = "mixed"
line 71: " let g:pdv_cfg_Package = "Framework"
line 72: " let g:pdv_cfg_Package = "Webdav"
line 73: let g:pdv_cfg_Package = "qaVoice"
line 74: let g:pdv_cfg_Version = ""
line 75: let g:pdv_cfg_Author = "Tobias Schlitt <toby@qafoo.com>"
line 76: let g:pdv_cfg_Copyright = "Copyright (C) 2010 Qafoo GmbH. All rights reserved."
line 77: let g:pdv_cfg_License = ""
line 78: 
line 79: " TOB: let g:pdv_cfg_Type = "mixed"
line 80: " TOB: let g:pdv_cfg_Package = ""
line 81: " TOB: let g:pdv_cfg_Version = "$id$"
line 82: " TOB: let g:pdv_cfg_Author = "Tobias Schlitt <toby@php.net>"
line 83: " TOB: let g:pdv_cfg_Copyright = "1997-2005 The PHP Group"
line 84: " TOB: let g:pdv_cfg_License = "PHP Version 3.0 {@link http://www.php.net/license/3_0.txt}"
line 85: 
line 86: let g:pdv_cfg_ReturnVal = "void"
line 87: 
line 88: " Wether to create @uses tags for implementation of interfaces and inheritance
line 89: let g:pdv_cfg_Uses = 0
line 90: " TOB: let g:pdv_cfg_Uses = 1
line 91: 
line 92: " Options
line 93: " :set paste before documenting (1|0)? Recommended.
line 94: let g:pdv_cfg_paste = 1
line 95: 
line 96: " Wether for PHP5 code PHP4 tags should be set, like @access,... (1|0)?
line 97: let g:pdv_cfg_php4always = 0
line 98: " TOB: let g:pdv_cfg_php4always = 1
line 99:  
line 100: " Wether to guess scopes after PEAR coding standards:
line 101: " $_foo/_bar() == <private|protected> (1|0)?
line 102: let g:pdv_cfg_php4guess = 1
line 103: 
line 104: " If you selected 1 for the last value, this scope identifier will be used for
line 105: " the identifiers having an _ in the first place.
line 106: let g:pdv_cfg_php4guessval = "protected"
line 107: 
line 108: "
line 109: " Regular expressions 
line 110: " 
line 111: 
line 112: let g:pdv_re_comment = ' *\*/ *'
line 113: 
line 114: " (private|protected|public)
line 115: let g:pdv_re_scope = '\(private\|protected\|public\)'
line 116: " (static)
line 117: let g:pdv_re_static = '\(static\)'
line 118: " (abstract)
line 119: let g:pdv_re_abstract = '\(abstract\)'
line 120: " (final)
line 121: let g:pdv_re_final = '\(final\)'
line 122: 
line 123: " [:space:]*(private|protected|public|static|abstract)*[:space:]+[:identifier:]+\([:params:]\)
line 124: let g:pdv_re_func = '^\s*\([a-zA-Z ]*\)function\s\+\([^ (]\+\)\s*(\s*\(.*\)\s*)\s*[{;]\?$'
line 125: " [:typehint:]*[:space:]*$[:identifier]\([:space:]*=[:space:]*[:value:]\)?
line 126: let g:pdv_re_param = ' *\([^ &]*\) *&\?\$\([A-Za-z_][A-Za-z0-9_]*\) *=\? *\(.*\)\?$'
line 127: 
line 128: " [:space:]*(private|protected|public\)[:space:]*$[:identifier:]+\([:space:]*=[:space:]*[:value:]+\)*;
line 129: let g:pdv_re_attribute = '^\s*\(\(private\|public\|protected\|var\|static\)\+\)\s*\$\([^ ;=]\+\)[ =]*\(.*\);\?$'
line 130: 
line 131: " [:spacce:]*(abstract|final|)[:space:]*(class|interface)+[:space:]+\(extends ([:identifier:])\)?[:space:]*\(implements ([:identifier:][, ]*)+\)?
line 132: let g:pdv_re_class = '^\s*\([a-zA-Z]*\)\s*\(interface\|class\)\s*\([^ ]\+\)\s*\(extends\)\?\s*\([a-zA-Z0-9]*\)\?\s*\(implements*\)\? *\([a-zA-Z0-9_ ,]*\)\?.*$'
line 133: 
line 134: let g:pdv_re_array  = "^array *(.*"
line 135: " FIXME (retest regex!)
line 136: let g:pdv_re_float  = '^[0-9]*\.[0-9]\+'
line 137: let g:pdv_re_int    = '^[0-9]\+'
line 138: let g:pdv_re_string = "['\"].*"
line 139: let g:pdv_re_bool = "\(true\|false\)"
line 140: 
line 141: let g:pdv_re_indent = '^\s*'
line 142: 
line 143: " Shortcuts for editing the text:
line 144: let g:pdv_cfg_BOL = "norm! o"
line 145: let g:pdv_cfg_EOL = "^["
line 146: 
line 147: " }}}  
line 148: 
line 149:  " {{{ PhpDocSingle()
line 150:  " Document a single line of code ( does not check if doc block already exists )
line 151: 
line 152: func! PhpDocSingle()
line 157: 
line 158: " }}}
line 159:  " {{{ PhpDocRange()
line 160:  " Documents a whole range of code lines ( does not add defualt doc block to
line 161:  " unknown types of lines ). Skips elements where a docblock is already
line 162:  " present.
line 163: func! PhpDocRange() range
line 182: 
line 183:  " }}}
line 184: " {{{ PhpDocFold()
line 185: 
line 186: " func! PhpDocFold(name)
line 187: " ^Ilet l:startline = line(".")
line 188: " ^Ilet l:currentLine = l:startLine
line 189: " ^Ilet l:commentHead = escape(g:pdv_cfg_CommentHead, "*.");
line 190: "     let l:txtBOL = g:pdv_cfg_BOL . matchstr(l:name, '^\s*')
line 191: " ^I" Search above for comment start
line 192: " ^Iwhile (l:currentLine > 1)
line 193: " ^I^Iif (matchstr(l:commentHead, getline(l:currentLine)))
line 194: " ^I^I^Ibreak;
line 195: " ^I^Iendif
line 196: " ^I^Ilet l:currentLine = l:currentLine + 1
line 197: " ^Iendwhile
line 198: " ^I" Goto 1 line above and open a newline
line 199: "     exe "norm! " . (l:currentLine - 1) . "Go\<ESC>"
line 200: " ^I" Write the fold comment
line 201: "     exe l:txtBOL . g:pdv_cfg_CommentSingle . " {"."{{ " . a:name . g:pdv_cfg_EOL
line 202: " ^I" Add another newline below that
line 203: " ^Iexe "norm! o\<ESC>"
line 204: " ^I" Search for our comment line
line 205: " ^Ilet l:currentLine = line(".")
line 206: " ^Iwhile (l:currentLine <= line("$"))
line 207: " ^I^I" HERE!!!!
line 208: " ^Iendwhile
line 209: " ^I
line 210: " 
line 211: " endfunc
line 212: 
line 213: 
line 214: " }}}
line 215: 
line 216: " {{{ PhpDoc()
line 217: 
line 218: func! PhpDoc()
line 248: 
line 249: " }}}
line 250: " {{{  PhpDocFunc()  
line 251: 
line 252: func! PhpDocFunc()
line 326: 
line 327: " }}}  
line 328:  " {{{  PhpDocVar() 
line 329: 
line 330: func! PhpDocVar()
line 371: 
line 372: " }}}
line 373: "  {{{  PhpDocClass()
line 374: 
line 375: func! PhpDocClass()
line 428: 
line 429: " }}} 
line 430: " {{{ PhpDocScope() 
line 431: 
line 432: func! PhpDocScope(modifiers, identifier)
line 451: 
line 452: " }}}
line 453: " {{{ PhpDocType()
line 454: 
line 455: func! PhpDocType(typeString)
line 477:     
line 478: "  }}} 
line 479: " {{{  PhpDocDefault()
line 480: 
line 481: func! PhpDocDefault()
line 498: 
line 499: " }}}
line 500: 
line 501: endif " user_commands
finished sourcing /home/kguest/.vim/php-doc.vim
continuing in /home/kguest/My-.vim-files/ftplugin/php.vim
line 6: 
line 7: let PHP_autoformatcomment = 1
line 8: 
line 9: " {{{ Settings
line 10: 
line 11: " Set new grep command, which ignores SVN!
line 12: " TODO: Add this to SVN
line 13: set grepprg=/usr/bin/vimgrep\ $*\ /dev/null
line 14: 
line 15: " Auto expand tabs to spaces, but only if env variable 'ET' isn't set to 'no'
line 16: if $ET=='no'
line 17:   setlocal noexpandtab
line 18: else
line 19:   setlocal expandtab
line 20: endif
line 21: 
line 22: " Auto indent after a {
line 23: setlocal autoindent
line 24: setlocal smartindent
line 25: 
line 26: " Linewidth to 79, because of the formatoptions this is only valid for
line 27: " comments
line 28: setlocal textwidth=79
line 29: " setlocal formatoptions=qrocb
line 30: 
line 31: " Do not wrap lines automatically
line 32: setlocal nowrap
line 33: 
line 34: " Correct indentation after opening a phpdocblock and automatic * on every
line 35: " line
line 36: ""setlocal formatoptions=qroct
line 37: setlocal formatoptions=croq
line 38: 
line 39: " Use php syntax check when doing :make
line 40: setlocal makeprg=php\ -l\ %
line 41: 
line 42: " Use errorformat for parsing PHP error output
line 43: setlocal errorformat=%m\ in\ %f\ on\ line\ %l
line 44: 
line 45: " Switch syntax highlighting on, if it was not
line 46: if !exists("g:syntax_on")
line 47:     syntax
line 48: endif
line 49: 
line 50: " Use pman for manual pages
line 51: setlocal keywordprg=pman
line 52: 
line 53: " Highlight trailing whitespaces
line 54: highlight ExtraWhitespace ctermbg=red guibg=red
line 55: match ExtraWhitespace /\s\+$/
line 56: autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
line 57: autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
line 58: autocmd InsertLeave * match ExtraWhitespace /\s\+$/
line 59: autocmd BufWinLeave * call clearmatches()
line 60: 
line 61: " MovingThroughCamelCaseWords
line 62: nnoremap <silent><C-Left>  :<C-u>cal search('\<\<Bar>\U\@<=\u\<Bar>\u\ze\%(\U\&\>\@!\)\<Bar>\%^','bW')<CR>
line 63: nnoremap <silent><C-Right> :<C-u>cal search('\<\<Bar>\U\@<=\u\<Bar>\u\ze\%(\U\&\>\@!\)\<Bar>\%$','W')<CR>
line 64: inoremap <silent><C-Left>  <C-o>:cal search('\<\<Bar>\U\@<=\u\<Bar>\u\ze\%(\U\&\>\@!\)\<Bar>\%^','bW')<CR>
line 65: inoremap <silent><C-Right> <C-o>:cal search('\<\<Bar>\U\@<=\u\<Bar>\u\ze\%(\U\&\>\@!\)\<Bar>\%$','W')<CR> 
line 66: 
line 67: " }}} Settings
line 68: 
line 69: " {{{ Command mappings
line 70: 
line 71: " Map ; to run PHP parser check
line 72: " noremap ; :!php5 -l %<CR>
line 73: 
line 74: " Map ; to add ; to the end of the line, when missing"
line 75: noremap <buffer> ; :s/\([^;]\)$/\1;/<cr>
line 76: " Map , to add , to the end of the line, when missing"
line 77: noremap <buffer> , :s/\([^,]\)$/\1,/<cr>
line 78: 
line 79: " DEPRECATED in favor of PDV documentation (see below!)
line 80: " Map <CTRL>-P to run actual file with PHP CLI
line 81: " noremap <C-P> :w!<CR>:!php5 %<CR>
line 82: 
line 83: " Map <ctrl>+p to single line mode documentation (in insert and command mode)
line 84: inoremap <buffer> <C-P> ^[:call PhpDocSingle()<CR>i
line 85: nnoremap <buffer> <C-P> :call PhpDocSingle()<CR>
line 86: " Map <ctrl>+p to multi line mode documentation (in visual mode)
line 87: vnoremap <buffer> <C-P> :call PhpDocRange()<CR>
line 88: 
line 89: " Map <CTRL>-H to search phpm for the function name currently under the cursor (insert mode only)
line 90: inoremap <buffer> <C-H> <ESC>:!phpm <C-R>=expand("<cword>")<CR><CR>
line 91: 
line 92: " Map <CTRL>-a to alignment function
line 93: vnoremap <buffer> <C-a> :call PhpAlign()<CR>
line 94: 
line 95: " Map <CTRL>-a to (un-)comment function
line 96: vnoremap <buffer> <C-c> :call PhpUnComment()<CR>
line 97: 
line 98: " }}}
line 99: 
line 100: " {{{ Automatic close char mapping
line 101: 
line 102: " More common in PEAR coding standard
line 103: " inoremap <buffer>  { {<CR>}<C-O>O
line 104: " Maybe this way in other coding standards
line 105: inoremap <buffer>  { {<CR>}<C-O>O
line 106: 
line 107: inoremap <buffer> [ []<LEFT>
line 108: 
line 109: " Standard mapping after PEAR coding standard
line 110: " inoremap <buffer> ( (  )<LEFT><LEFT>
line 111: inoremap <buffer> ( ()<LEFT>
line 112: 
line 113: " Maybe this way in other coding standards
line 114: " inoremap ( ( )<LEFT><LEFT> 
line 115: 
line 116: inoremap <buffer> " ""<LEFT>
line 117: inoremap <buffer> ' ''<LEFT>
line 118: 
line 119: " }}} Automatic close char mapping
line 120: 
line 121: " {{{ Wrap visual selections with chars
line 122: 
line 123: :vnoremap <buffer> ( "zdi^V^V(<C-R>z)<ESC>
line 124: :vnoremap <buffer> { "zdi^V^V{<C-R>z}<ESC>
line 125: :vnoremap <buffer> [ "zdi^V^V[<C-R>z]<ESC>
line 126: :vnoremap <buffer> ' "zdi^V^V'<C-R>z^V'<ESC>
line 127: " Removed in favor of register addressing
line 128: " :vnoremap " "zdi^V^V"<C-R>z^V"<ESC>
line 129: 
line 130: " }}} Wrap visual selections with chars
line 131: 
line 132: " {{{ Dictionary completion
line 133: 
line 134: " The completion dictionary is provided by Rasmus:
line 135: " http://lerdorf.com/funclist.txt
line 136: "setlocal dictionary-=/home/dotxp/funclist.txt dictionary+=/home/dotxp/funclist.txt
line 137: " Use the dictionary completion
line 138: setlocal complete-=k complete+=k
line 139: 
line 140: " }}} Dictionary completion
line 141: 
line 142: " {{{ Autocompletion using the TAB key
line 143: 
line 144: " This function determines, wether we are on the start of the line text (then tab indents) or
line 145: " if we want to try autocompletion
line 146: func! InsertTabWrapper()
line 154: 
line 155: " Remap the tab key to select action with InsertTabWrapper
line 156: inoremap <buffer> <tab> <c-r>=InsertTabWrapper()<cr>
line 157: 
line 158: " }}} Autocompletion using the TAB key
line 159: 
line 160: " {{{ Alignment
line 161: 
line 162: func! PhpAlign() range
line 201: 
line 202: " }}}   
line 203: 
line 204: " {{{ (Un-)comment
line 205: 
line 206: func! PhpUnComment() range
line 225: 
line 226: " }}}
line 227: 
line 228: " ensure syntax is set to php
line 229: if has("syntax")
line 230:     set syntax=php
Executing Syntax Auto commands for "*"
autocommand call s:SynSet()

line 0: call s:SynSet()
calling function <SNR>4_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.
line 23:     for name in split(s, '\.')
line 24:       exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 24: runtime! syntax/php.vim syntax/php/*.vim
Searching for "syntax/php.vim syntax/php/*.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/syntax/php.vim"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/syntax/php/*.vim"
Searching for "/home/kguest/.vim/syntax/php.vim"
chdir(/home/kguest/.vim/syntax)
fchdir() to previous dir
line 24: sourcing "/home/kguest/.vim/syntax/php.vim"
line 1: " Vim syntax file
line 2: " Language: PHP 5.3 & up
line 3: " Maintainer: Paul Garvin <paul@paulgarvin.net>
line 4: " Last Change:  April 2, 2010
line 5: " URL: 
line 6: "
line 7: " Former Maintainer:  Peter Hodge <toomuchphp-vim@yahoo.com>
line 8: " Former URL: http://www.vim.org/scripts/script.php?script_id=1571
line 9: "
line 10: " Note: All of the switches for VIM 5.X and 6.X compatability were removed.
line 11: "       DO NOT USE THIS FILE WITH A VERSION OF VIM < 7.0.
line 12: "
line 13: " Note: If you are using a colour terminal with dark background, you will probably find
line 14: "       the 'elflord' colorscheme is much better for PHP's syntax than the default
line 15: "       colourscheme, because elflord's colours will better highlight the break-points
line 16: "       (Statements) in your code.
line 17: "
line 18: " Options:  php_sql_query = 1  for SQL syntax highlighting inside strings
line 19: "           php_html_in_strings = 1  for HTML syntax highlighting inside strings
line 20: "           php_parent_error_close = 1  for highlighting parent error ] or )
line 21: "           php_parent_error_open = 1  for skipping an php end tag,
line 22: "                                      if there exists an open ( or [ without a closing one
line 23: "           php_no_shorttags = 1  don't sync <? ?> as php
line 24: "           php_folding = 1  for folding classes and functions
line 25: "           php_sync_method = x
line 26: "                             x=-1 to sync by search ( default )
line 27: "                             x>0 to sync at least x lines backwards
line 28: "                             x=0 to sync from start
line 29: "
line 30: " Note:
line 31: " Setting php_folding=1 will match a closing } by comparing the indent
line 32: " before the class or function keyword with the indent of a matching }.
line 33: " Setting php_folding=2 will match all of pairs of {,} ( see known
line 34: " bugs ii )
line 35: "
line 36: " Known Bugs:
line 37: "  - setting  php_parent_error_close  on  and  php_parent_error_open  off
line 38: "    has these two leaks:
line 39: "     i) A closing ) or ] inside a string match to the last open ( or [
line 40: "        before the string, when the the closing ) or ] is on the same line
line 41: "        where the string started. In this case a following ) or ] after
line 42: "        the string would be highlighted as an error, what is incorrect.
line 43: "    ii) Same problem if you are setting php_folding = 2 with a closing
line 44: "        } inside an string on the first line of this string.
line 45: "
line 46: "  - A double-quoted string like this:
line 47: "      "$foo->someVar->someOtherVar->bar"
line 48: "    will highight '->someOtherVar->bar' as though they will be parsed
line 49: "    as object member variables, but PHP only recognizes the first
line 50: "    object member variable ($foo->someVar).
line 51: "
line 52: "
line 53: "
line 54: if exists("b:current_syntax")
line 55:   finish
line 56: endif
line 57: 
line 58: if !exists("main_syntax")
line 59:   let main_syntax = 'php'
line 60: endif
line 61: 
line 62: runtime syntax/html.vim
Searching for "syntax/html.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/syntax/html.vim"
Searching for "/home/kguest/.vim/syntax/html.vim"
Searching for "/var/lib/vim/addons/syntax/html.vim"
Searching for "/usr/share/vim/vimfiles/syntax/html.vim"
Searching for "/usr/share/vim/vim74/syntax/html.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 62: sourcing "/usr/share/vim/vim74/syntax/html.vim"
line 1: " Vim syntax file
line 2: " Language:^IHTML
line 3: " Maintainer:^IClaudio Fleiner <claudio@fleiner.com>
line 4: " URL:^I^Ihttp://www.fleiner.com/vim/syntax/html.vim
line 5: " Last Change:^I2012 Oct 05
line 6: 
line 7: " Please check :help html.vim for some comments and a description of the options
line 8: 
line 9: " For version 5.x: Clear all syntax items
line 10: " For version 6.x: Quit when a syntax file was already loaded
line 11: if !exists("main_syntax")
line 12:   if version < 600
line 13:     syntax clear
line 14:   elseif exists("b:current_syntax")
line 15:     finish
line 16:   endif
line 17:   let main_syntax = 'html'
line 18: endif
line 19: 
line 20: let s:cpo_save = &cpo
line 21: set cpo&vim
line 22: 
line 23: " don't use standard HiLink, it will not work with included syntax files
line 24: if version < 508
line 25:   command! -nargs=+ HtmlHiLink hi link <args>
line 26: else
line 27:   command! -nargs=+ HtmlHiLink hi def link <args>
line 28: endif
line 29: 
line 30: syntax spell toplevel
line 31: 
line 32: syn case ignore
line 33: 
line 34: " mark illegal characters
line 35: syn match htmlError "[<>&]"
line 36: 
line 37: 
line 38: " tags
line 39: syn region  htmlString   contained start=+"+ end=+"+ contains=htmlSpecialChar,javaScriptExpression,@htmlPreproc
line 40: syn region  htmlString   contained start=+'+ end=+'+ contains=htmlSpecialChar,javaScriptExpression,@htmlPreproc
line 41: syn match   htmlValue    contained "=[\t ]*[^'" \t>][^ \t>]*"hs=s+1   contains=javaScriptExpression,@htmlPreproc
line 42: syn region  htmlEndTag             start=+</+      end=+>+ contains=htmlTagN,htmlTagError
line 43: syn region  htmlTag                start=+<[^/]+   end=+>+ fold contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent,htmlCssDefinition,@htmlPreproc,@htmlArgCluster
line 44: syn match   htmlTagN     contained +<\s*[-a-zA-Z0-9]\++hs=s+1 contains=htmlTagName,htmlSpecialTagName,@htmlTagNameCluster
line 45: syn match   htmlTagN     contained +</\s*[-a-zA-Z0-9]\++hs=s+2 contains=htmlTagName,htmlSpecialTagName,@htmlTagNameCluster
line 46: syn match   htmlTagError contained "[^>]<"ms=s+1
line 47: 
line 48: 
line 49: " tag names
line 50: syn keyword htmlTagName contained address applet area a base basefont
line 51: syn keyword htmlTagName contained big blockquote br caption center
line 52: syn keyword htmlTagName contained cite code dd dfn dir div dl dt font
line 53: syn keyword htmlTagName contained form hr html img
line 54: syn keyword htmlTagName contained input isindex kbd li link map menu
line 55: syn keyword htmlTagName contained meta ol option param pre p samp span
line 56: syn keyword htmlTagName contained select small strike sub sup
line 57: syn keyword htmlTagName contained table td textarea th tr tt ul var xmp
line 58: syn match htmlTagName contained "\<\(b\|i\|u\|h[1-6]\|em\|strong\|head\|body\|title\)\>"
line 59: 
line 60: " new html 4.0 tags
line 61: syn keyword htmlTagName contained abbr acronym bdo button col label
line 62: syn keyword htmlTagName contained colgroup del fieldset iframe ins legend
line 63: syn keyword htmlTagName contained object optgroup q s tbody tfoot thead
line 64: 
line 65: " legal arg names
line 66: syn keyword htmlArg contained action
line 67: syn keyword htmlArg contained align alink alt archive background bgcolor
line 68: syn keyword htmlArg contained border bordercolor cellpadding
line 69: syn keyword htmlArg contained cellspacing checked class clear code codebase color
line 70: syn keyword htmlArg contained cols colspan content coords enctype face
line 71: syn keyword htmlArg contained gutter height hspace id
line 72: syn keyword htmlArg contained link lowsrc marginheight
line 73: syn keyword htmlArg contained marginwidth maxlength method name prompt
line 74: syn keyword htmlArg contained rel rev rows rowspan scrolling selected shape
line 75: syn keyword htmlArg contained size src start target text type url
line 76: syn keyword htmlArg contained usemap ismap valign value vlink vspace width wrap
line 77: syn match   htmlArg contained "\<\(http-equiv\|href\|title\)="me=e-1
line 78: 
line 79: " Netscape extensions
line 80: syn keyword htmlTagName contained frame noframes frameset nobr blink
line 81: syn keyword htmlTagName contained layer ilayer nolayer spacer
line 82: syn keyword htmlArg     contained frameborder noresize pagex pagey above below
line 83: syn keyword htmlArg     contained left top visibility clip id noshade
line 84: syn match   htmlArg     contained "\<z-index\>"
line 85: 
line 86: " Microsoft extensions
line 87: syn keyword htmlTagName contained marquee
line 88: 
line 89: " html 4.0 arg names
line 90: syn match   htmlArg contained "\<\(accept-charset\|label\)\>"
line 91: syn keyword htmlArg contained abbr accept accesskey axis char charoff charset
line 92: syn keyword htmlArg contained cite classid codetype compact data datetime
line 93: syn keyword htmlArg contained declare defer dir disabled for frame
line 94: syn keyword htmlArg contained headers hreflang lang language longdesc
line 95: syn keyword htmlArg contained multiple nohref nowrap object profile readonly
line 96: syn keyword htmlArg contained rules scheme scope span standby style
line 97: syn keyword htmlArg contained summary tabindex valuetype version
line 98: 
line 99: " special characters
line 100: syn match htmlSpecialChar "&#\=[0-9A-Za-z]\{1,8};"
line 101: 
line 102: " Comments (the real ones or the old netscape ones)
line 103: if exists("html_wrong_comments")
line 104:   syn region htmlComment                start=+<!--+    end=+--\s*>+ contains=@Spell
line 105: else
line 106:   syn region htmlComment                start=+<!+      end=+>+   contains=htmlCommentPart,htmlCommentError,@Spell
line 107:   syn match  htmlCommentError contained "[^><!]"
line 108:   syn region htmlCommentPart  contained start=+--+      end=+--\s*+  contains=@htmlPreProc,@Spell
line 109: endif
line 110: syn region htmlComment                  start=+<!DOCTYPE+ keepend end=+>+
line 111: 
line 112: " server-parsed commands
line 113: syn region htmlPreProc start=+<!--#+ end=+-->+ contains=htmlPreStmt,htmlPreError,htmlPreAttr
line 114: syn match htmlPreStmt contained "<!--#\(config\|echo\|exec\|fsize\|flastmod\|include\|printenv\|set\|if\|elif\|else\|endif\|geoguide\)\>"
line 115: syn match htmlPreError contained "<!--#\S*"ms=s+4
line 116: syn match htmlPreAttr contained "\w\+=[^"]\S\+" contains=htmlPreProcAttrError,htmlPreProcAttrName
line 117: syn region htmlPreAttr contained start=+\w\+="+ skip=+\\\\\|\\"+ end=+"+ contains=htmlPreProcAttrName keepend
line 118: syn match htmlPreProcAttrError contained "\w\+="he=e-1
line 119: syn match htmlPreProcAttrName contained "\(expr\|errmsg\|sizefmt\|timefmt\|var\|cgi\|cmd\|file\|virtual\|value\)="he=e-1
line 120: 
line 121: if !exists("html_no_rendering")
line 122:   " rendering
line 123:   syn cluster htmlTop contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLink,javaScript,@htmlPreproc
line 124: 
line 125:   syn region htmlBold start="<b\>" end="</b>"me=e-4 contains=@htmlTop,htmlBoldUnderline,htmlBoldItalic
line 126:   syn region htmlBold start="<strong\>" end="</strong>"me=e-9 contains=@htmlTop,htmlBoldUnderline,htmlBoldItalic
line 127:   syn region htmlBoldUnderline contained start="<u\>" end="</u>"me=e-4 contains=@htmlTop,htmlBoldUnderlineItalic
line 128:   syn region htmlBoldItalic contained start="<i\>" end="</i>"me=e-4 contains=@htmlTop,htmlBoldItalicUnderline
line 129:   syn region htmlBoldItalic contained start="<em\>" end="</em>"me=e-5 contains=@htmlTop,htmlBoldItalicUnderline
line 130:   syn region htmlBoldUnderlineItalic contained start="<i\>" end="</i>"me=e-4 contains=@htmlTop
line 131:   syn region htmlBoldUnderlineItalic contained start="<em\>" end="</em>"me=e-5 contains=@htmlTop
line 132:   syn region htmlBoldItalicUnderline contained start="<u\>" end="</u>"me=e-4 contains=@htmlTop,htmlBoldUnderlineItalic
line 133: 
line 134:   syn region htmlUnderline start="<u\>" end="</u>"me=e-4 contains=@htmlTop,htmlUnderlineBold,htmlUnderlineItalic
line 135:   syn region htmlUnderlineBold contained start="<b\>" end="</b>"me=e-4 contains=@htmlTop,htmlUnderlineBoldItalic
line 136:   syn region htmlUnderlineBold contained start="<strong\>" end="</strong>"me=e-9 contains=@htmlTop,htmlUnderlineBoldItalic
line 137:   syn region htmlUnderlineItalic contained start="<i\>" end="</i>"me=e-4 contains=@htmlTop,htmlUnderlineItalicBold
line 138:   syn region htmlUnderlineItalic contained start="<em\>" end="</em>"me=e-5 contains=@htmlTop,htmlUnderlineItalicBold
line 139:   syn region htmlUnderlineItalicBold contained start="<b\>" end="</b>"me=e-4 contains=@htmlTop
line 140:   syn region htmlUnderlineItalicBold contained start="<strong\>" end="</strong>"me=e-9 contains=@htmlTop
line 141:   syn region htmlUnderlineBoldItalic contained start="<i\>" end="</i>"me=e-4 contains=@htmlTop
line 142:   syn region htmlUnderlineBoldItalic contained start="<em\>" end="</em>"me=e-5 contains=@htmlTop
line 143: 
line 144:   syn region htmlItalic start="<i\>" end="</i>"me=e-4 contains=@htmlTop,htmlItalicBold,htmlItalicUnderline
line 145:   syn region htmlItalic start="<em\>" end="</em>"me=e-5 contains=@htmlTop
line 146:   syn region htmlItalicBold contained start="<b\>" end="</b>"me=e-4 contains=@htmlTop,htmlItalicBoldUnderline
line 147:   syn region htmlItalicBold contained start="<strong\>" end="</strong>"me=e-9 contains=@htmlTop,htmlItalicBoldUnderline
line 148:   syn region htmlItalicBoldUnderline contained start="<u\>" end="</u>"me=e-4 contains=@htmlTop
line 149:   syn region htmlItalicUnderline contained start="<u\>" end="</u>"me=e-4 contains=@htmlTop,htmlItalicUnderlineBold
line 150:   syn region htmlItalicUnderlineBold contained start="<b\>" end="</b>"me=e-4 contains=@htmlTop
line 151:   syn region htmlItalicUnderlineBold contained start="<strong\>" end="</strong>"me=e-9 contains=@htmlTop
line 152: 
line 153:   syn match htmlLeadingSpace "^\s\+" contained
line 154:   syn region htmlLink start="<a\>\_[^>]*\<href\>" end="</a>"me=e-4 contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLeadingSpace,javaScript,@htmlPreproc
line 155:   syn region htmlH1 start="<h1\>" end="</h1>"me=e-5 contains=@htmlTop
line 156:   syn region htmlH2 start="<h2\>" end="</h2>"me=e-5 contains=@htmlTop
line 157:   syn region htmlH3 start="<h3\>" end="</h3>"me=e-5 contains=@htmlTop
line 158:   syn region htmlH4 start="<h4\>" end="</h4>"me=e-5 contains=@htmlTop
line 159:   syn region htmlH5 start="<h5\>" end="</h5>"me=e-5 contains=@htmlTop
line 160:   syn region htmlH6 start="<h6\>" end="</h6>"me=e-5 contains=@htmlTop
line 161:   syn region htmlHead start="<head\>" end="</head>"me=e-7 end="<body\>"me=e-5 end="<h[1-6]\>"me=e-3 contains=htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLink,htmlTitle,javaScript,cssStyle,@htmlPreproc
line 162:   syn region htmlTitle start="<title\>" end="</title>"me=e-8 contains=htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,javaScript,@htmlPreproc
line 163: endif
line 164: 
line 165: syn keyword htmlTagName         contained noscript
line 166: syn keyword htmlSpecialTagName  contained script style
line 167: if main_syntax != 'java' || exists("java_javascript")
line 168:   " JAVA SCRIPT
line 169:   syn include @htmlJavaScript syntax/javascript.vim
Searching for "syntax/javascript.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/syntax/javascript.vim"
Searching for "/home/kguest/.vim/syntax/javascript.vim"
chdir(/home/kguest/.vim/syntax)
fchdir() to previous dir
line 169: sourcing "/home/kguest/.vim/syntax/javascript.vim"
line 1: " Vim syntax file
line 2: " Language:     JavaScript
line 3: " Maintainer:   Yi Zhao (ZHAOYI) <zzlinux AT hotmail DOT com>
line 4: " Last Change:  2007 Jan. 30th
line 5: " Version:      0.7.3
line 6: " Changes:      Add the keywords for JavaScript 1.7: let, yield,
line 7: " 
line 8: " TODO:
line 9: "  - Add the HTML syntax inside the JSDoc
line 10: 
line 11: if !exists("main_syntax")
line 12:   if version < 600
line 13:     syntax clear
line 14:   elseif exists("b:current_syntax")
line 15:     finish
line 16:   endif
line 17:   let main_syntax = 'javascript'
line 18: endif
line 19: 
line 20: "" Drop fold if it set but VIM doesn't support it.
line 21: if version < 600 && exists("javaScript_fold")
line 22:   unlet javaScript_fold
line 23: else
line 24:   let javaScript_fold = 'false'
line 25: endif
line 26: 
line 27: "" dollar sign is permitted anywhere in an identifier
line 28: setlocal iskeyword+=$
line 29: 
line 30: syntax sync fromstart
line 31: syntax sync maxlines=200
line 32: 
line 33: "" JavaScript comments
line 34: syntax keyword javaScriptCommentTodo    TODO FIXME XXX TBD contained
line 35: syntax region  javaScriptLineComment    start=+\/\/+ end=+$+ keepend contains=javaScriptCommentTodo,@Spell 
line 36: syntax region  javaScriptLineComment    start=+^\s*\/\/+ skip=+\n\s*\/\/+ end=+$+ keepend contains=javaScriptCommentTodo,@Spell 
line 37: syntax region  javaScriptCvsTag         start="\$\cid:" end="\$" oneline contained
line 38: syntax region  javaScriptComment        start="/\*"  end="\*/" contains=javaScriptCommentTodo,javaScriptCvsTag,@Spell fold
line 39: 
line 40: "" JSDoc support start
line 41: if !exists("javascript_ignore_javaScriptdoc")
line 42:   syntax case ignore
line 43: 
line 44:   "" syntax coloring for javadoc comments (HTML)
line 45:   "syntax include @javaHtml <sfile>:p:h/html.vim
line 46:   "unlet b:current_syntax  
line 47:   
line 48:   syntax region javaScriptDocComment    matchgroup=javaScriptComment start="/\*\*\s*$"  end="\*/" contains=javaScriptDocTags,javaScriptCommentTodo,javaScriptCvsTag,@javaScriptHtml,@Spell fold
line 49:   syntax match  javaScriptDocTags       contained "@\(param\|argument\|requires\|exception\|throws\|type\|class\|extends\|see\|link\|member\|base\|file\)\>" nextgroup=javaScriptDocParam,javaScriptDocSeeTag skipwhite
line 50:   syntax match  javaScriptDocTags       contained "@\(deprecated\|fileoverview\|author\|license\|version\|returns\=\|constructor\|private\|final\|ignore\|addon\|exec\)\>"
line 51:   syntax match  javaScriptDocParam      contained "\%(#\|\w\|\.\|:\|\/\)\+"
line 52:   syntax region javaScriptDocSeeTag     contained matchgroup=javaScriptDocSeeTag start="{" end="}" contains=javaScriptDocTags
line 53: 
line 54:   syntax case match
line 55: endif   "" JSDoc end
line 56: 
line 57: syntax case match
line 58: 
line 59: "" Syntax in the JavaScript code
line 60: syntax match   javaScriptSpecial        "\\\d\d\d\|\\x\x\{2\}\|\\u\x\{4\}\|\\."
line 61: syntax region  javaScriptStringD        start=+"+  skip=+\\\\\|\\$"+  end=+"+  contains=javaScriptSpecial,@htmlPreproc
line 62: syntax region  javaScriptStringS        start=+'+  skip=+\\\\\|\\$'+  end=+'+  contains=javaScriptSpecial,@htmlPreproc
line 63: syntax region  javaScriptRegexpString   start=+/\(\*\|/\)\@!+ skip=+\\\\\|\\/+ end=+/[gim]\{-,3}\(\s*[),.;$]\)\@=+ contains=javaScriptSpecial,@htmlPreproc oneline
line 64: syntax match   javaScriptNumber         /\<-\=\d\+L\=\>\|\<0[xX]\x\+\>/
line 65: syntax match   javaScriptFloat          /\<-\=\%(\d\+\.\d\+\|\d\+\.\|\.\d\+\)\%([eE][+-]\=\d\+\)\=\>/
line 66: syntax match   javaScriptLabel          /\(?\s*\)\@<!\<\w\+\(\s*:\)\@=/
line 67: 
line 68: "" JavaScript Prototype 
line 69: syntax keyword javaScriptPrototype      prototype 
line 70: 
line 71: "" Programme Keywords
line 72: syntax keyword javaScriptSource         import export
line 73: syntax keyword javaScriptType           const this var void yield
line 74: syntax keyword javaScriptOperator       delete new in instanceof let typeof 
line 75: syntax keyword javaScriptBoolean        true false
line 76: syntax keyword javaScriptNull           null
line 77: 
line 78: "" Statement Keywords
line 79: syntax keyword javaScriptConditional    if else
line 80: syntax keyword javaScriptRepeat         do while for
line 81: syntax keyword javaScriptBranch         break continue switch case default return 
line 82: syntax keyword javaScriptStatement      try catch throw with finally 
line 83: 
line 84: syntax keyword javaScriptGlobalObjects  Array Boolean Date Function Infinity JavaArray JavaClass JavaObject JavaPackage Math Number NaN Object Packages RegExp String Undefined java netscape sun
line 85: 
line 86: syntax keyword javaScriptExceptions     Error EvalError RangeError ReferenceError SyntaxError TypeError URIError
line 87: 
line 88: syntax keyword javaScriptFutureKeys     abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public 
line 89: 
line 90: "" DOM/HTML/CSS specified things
line 91: 
line 92:   " DOM2 Objects
line 93:   syntax keyword javaScriptGlobalObjects  DOMImplementation DocumentFragment Document Node NodeList NamedNodeMap CharacterData Attr Element Text Comment CDATASection DocumentType Notation Entity EntityReference ProcessingInstruction
line 94:   syntax keyword javaScriptExceptions     DOMException
line 95:   
line 96:   " DOM2 CONSTANT
line 97:   syntax keyword javaScriptDomErrNo       INDEX_SIZE_ERR DOMSTRING_SIZE_ERR HIERARCHY_REQUEST_ERR WRONG_DOCUMENT_ERR INVALID_CHARACTER_ERR NO_DATA_ALLOWED_ERR NO_MODIFICATION_ALLOWED_ERR NOT_FOUND_ERR NOT_SUPPORTED_ERR INUSE_ATTRIBUTE_ERR INVALID_STATE_ERR SYNTAX_ERR INVALID_MODIFICATION_ERR NAMESPACE_ERR INVALID_ACCESS_ERR
line 98:   syntax keyword javaScriptDomNodeConsts  ELEMENT_NODE ATTRIBUTE_NODE TEXT_NODE CDATA_SECTION_NODE ENTITY_REFERENCE_NODE ENTITY_NODE PROCESSING_INSTRUCTION_NODE COMMENT_NODE DOCUMENT_NODE DOCUMENT_TYPE_NODE DOCUMENT_FRAGMENT_NODE NOTATION_NODE 
line 99:   
line 100:   " HTML events and internal variables
line 101:   syntax case ignore
line 102:   syntax keyword javaScriptHtmlEvents     onblur onclick oncontextmenu ondblclick onfocus onkeydown onkeypress onkeyup onmousedown onmousemove onmouseout onmouseover onmouseup onresize
line 103:   syntax case match
line 104: 
line 105: " Follow stuff should be highligh within a special context
line 106: " While it can't be handled with context depended with Regex based highlight
line 107: " So, turn it off by default
line 108: if exists("javascript_enable_domhtmlcss")
line 109: 
line 110:     " DOM2 things
line 111:     syntax match javaScriptDomElemAttrs     contained /\%(nodeName\|nodeValue\|nodeType\|parentNode\|childNodes\|firstChild\|lastChild\|previousSibling\|nextSibling\|attributes\|ownerDocument\|namespaceURI\|prefix\|localName\|tagName\)\>/
line 112:     syntax match javaScriptDomElemFuncs     contained /\%(insertBefore\|replaceChild\|removeChild\|appendChild\|hasChildNodes\|cloneNode\|normalize\|isSupported\|hasAttributes\|getAttribute\|setAttribute\|removeAttribute\|getAttributeNode\|setAttributeNode\|removeAttributeNode\|getElementsByTagName\|getAttributeNS\|setAttributeNS\|removeAttributeNS\|getAttributeNodeNS\|setAttributeNodeNS\|getElementsByTagNameNS\|hasAttribute\|hasAttributeNS\)\>/ nextgroup=javaScriptParen skipwhite
line 113:     " HTML things
line 114:     syntax match javaScriptHtmlElemAttrs    contained /\%(className\|clientHeight\|clientLeft\|clientTop\|clientWidth\|dir\|id\|innerHTML\|lang\|length\|offsetHeight\|offsetLeft\|offsetParent\|offsetTop\|offsetWidth\|scrollHeight\|scrollLeft\|scrollTop\|scrollWidth\|style\|tabIndex\|title\)\>/
line 115:     syntax match javaScriptHtmlElemFuncs    contained /\%(blur\|click\|focus\|scrollIntoView\|addEventListener\|dispatchEvent\|removeEventListener\|item\)\>/ nextgroup=javaScriptParen skipwhite
line 116: 
line 117:     " CSS Styles in JavaScript
line 118:     syntax keyword javaScriptCssStyles      contained color font fontFamily fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontWeight letterSpacing lineBreak lineHeight quotes rubyAlign rubyOverhang rubyPosition 
line 119:     syntax keyword javaScriptCssStyles      contained textAlign textAlignLast textAutospace textDecoration textIndent textJustify textJustifyTrim textKashidaSpace textOverflowW6 textShadow textTransform textUnderlinePosition 
line 120:     syntax keyword javaScriptCssStyles      contained unicodeBidi whiteSpace wordBreak wordSpacing wordWrap writingMode
line 121:     syntax keyword javaScriptCssStyles      contained bottom height left position right top width zIndex 
line 122:     syntax keyword javaScriptCssStyles      contained border borderBottom borderLeft borderRight borderTop borderBottomColor borderLeftColor borderTopColor borderBottomStyle borderLeftStyle borderRightStyle borderTopStyle borderBottomWidth borderLeftWidth borderRightWidth borderTopWidth borderColor borderStyle borderWidth borderCollapse borderSpacing captionSide emptyCells tableLayout
line 123:     syntax keyword javaScriptCssStyles      contained margin marginBottom marginLeft marginRight marginTop outline outlineColor outlineStyle outlineWidth padding paddingBottom paddingLeft paddingRight paddingTop 
line 124:     syntax keyword javaScriptCssStyles      contained listStyle listStyleImage listStylePosition listStyleType 
line 125:     syntax keyword javaScriptCssStyles      contained background backgroundAttachment backgroundColor backgroundImage gackgroundPosition backgroundPositionX backgroundPositionY backgroundRepeat
line 126:     syntax keyword javaScriptCssStyles      contained clear clip clipBottom clipLeft clipRight clipTop content counterIncrement counterReset cssFloat cursor direction display filter layoutGrid layoutGridChar layoutGridLine layoutGridMode layoutGridType 
line 127:     syntax keyword javaScriptCssStyles      contained marks maxHeight maxWidth minHeight minWidth opacity MozOpacity overflow overflowX overflowY verticalAlign visibility zoom cssText 
line 128:     syntax keyword javaScriptCssStyles      contained scrollbar3dLightColor scrollbarArrowColor scrollbarBaseColor scrollbarDarkShadowColor scrollbarFaceColor scrollbarHighlightColor scrollbarShadowColor scrollbarTrackColor
line 129: 
line 130:     " Highlight ways
line 131:     syntax match javaScriptDotNotation      "\." nextgroup=javaScriptPrototype,javaScriptDomElemAttrs,javaScriptDomElemFuncs,javaScriptHtmlElemAttrs,javaScriptHtmlElemFuncs
line 132:     syntax match javaScriptDotNotation      "\.style\." nextgroup=javaScriptCssStyles
line 133:     
line 134: endif "DOM/HTML/CSS
line 135: 
line 136: "" end DOM/HTML/CSS specified things
line 137: 
line 138: 
line 139: "" Code blocks
line 140: syntax cluster javaScriptAll       contains=javaScriptComment,javaScriptLineComment,javaScriptDocComment,javaScriptStringD,javaScriptStringS,javaScriptRegexpString,javaScriptNumber,javaScriptFloat,javaScriptLabel,javaScriptSource,javaScriptType,javaScriptOperator,javaScriptBoolean,javaScriptNull,javaScriptFunction,javaScriptConditional,javaScriptRepeat,javaScriptBranch,javaScriptStatement,javaScriptGlobalObjects,javaScriptExceptions,javaScriptFutureKeys,javaScriptDomErrNo,javaScriptDomNodeConsts,javaScriptHtmlEvents,javaScriptDotNotation
line 141: syntax region  javaScriptBracket   matchgroup=javaScriptBracket transparent start="\[" end="\]" contains=@javaScriptAll,javaScriptParensErrB,javaScriptParensErrC,javaScriptBracket,javaScriptParen,javaScriptBlock,@htmlPreproc
line 142: syntax region  javaScriptParen     matchgroup=javaScriptParen   transparent start="("  end=")"  contains=@javaScriptAll,javaScriptParensErrA,javaScriptParensErrC,javaScriptParen,javaScriptBracket,javaScriptBlock,@htmlPreproc
line 143: syntax region  javaScriptBlock     matchgroup=javaScriptBlock   transparent start="{"  end="}"  contains=@javaScriptAll,javaScriptParensErrA,javaScriptParensErrB,javaScriptParen,javaScriptBracket,javaScriptBlock,@htmlPreproc
line 144: 
line 145: "" catch errors caused by wrong parenthesis
line 146: syntax match   javaScriptParensError    ")\|}\|\]"
line 147: syntax match   javaScriptParensErrA     contained "\]"
line 148: syntax match   javaScriptParensErrB     contained ")"
line 149: syntax match   javaScriptParensErrC     contained "}"
line 150: 
line 151: if main_syntax == "javascript"
line 152:   syntax sync ccomment javaScriptComment
line 153: endif
line 154: 
line 155: "" Fold control
line 156: if exists("javaScript_fold")
line 157:     syntax match   javaScriptFunction       /\<function\>/ nextgroup=javaScriptFuncName skipwhite 
line 158:     syntax region  javaScriptFuncName       contained matchgroup=javaScriptFuncName start=/\%(\$\|\w\)*\s*(/ end=/)/ contains=javaScriptLineComment,javaScriptComment nextgroup=javaScriptFuncBlock skipwhite skipempty
line 159:     syntax region  javaScriptFuncBlock      contained matchgroup=javaScriptFuncBlock start="{" end="}" contains=@javaScriptAll,javaScriptParensErrA,javaScriptParensErrB,javaScriptParen,javaScriptBracket,javaScriptBlock fold
line 160: 
line 161:     "" Fold setting
line 162:     setlocal foldlevel=0
line 163:     setlocal foldmethod=syntax
line 164: 
line 165:     setlocal foldtext=FT_JavaScriptDoc()
line 166: 
line 167:     "" Default fold text for JavaScript JSDoc and Function
line 168:     function! FT_JavaScriptDoc()
line 181: 
line 182: else
line 183:     syntax keyword javaScriptFunction       function
line 184: endif
line 185: 
line 186: " Define the default highlighting.
line 187: " For version 5.7 and earlier: only when not done already
line 188: " For version 5.8 and later: only when an item doesn't have highlighting yet
line 189: if version >= 508 || !exists("did_javascript_syn_inits")
line 190:   if version < 508
line 191:     let did_javascript_syn_inits = 1
line 192:     command -nargs=+ HiLink hi link <args>
line 193:   else
line 194:     command -nargs=+ HiLink hi def link <args>
line 195:   endif
line 196:   HiLink javaScriptComment              Comment
line 196: hi def link javaScriptComment              Comment
line 197:   HiLink javaScriptLineComment          Comment
line 197: hi def link javaScriptLineComment          Comment
line 198:   HiLink javaScriptDocComment           Comment
line 198: hi def link javaScriptDocComment           Comment
line 199:   HiLink javaScriptCommentTodo          Todo
line 199: hi def link javaScriptCommentTodo          Todo
line 200:   HiLink javaScriptCvsTag               Function
line 200: hi def link javaScriptCvsTag               Function
line 201:   HiLink javaScriptDocTags              Special
line 201: hi def link javaScriptDocTags              Special
line 202:   HiLink javaScriptDocSeeTag            Function
line 202: hi def link javaScriptDocSeeTag            Function
line 203:   HiLink javaScriptDocParam             Function
line 203: hi def link javaScriptDocParam             Function
line 204:   HiLink javaScriptStringS              String
line 204: hi def link javaScriptStringS              String
line 205:   HiLink javaScriptStringD              String
line 205: hi def link javaScriptStringD              String
line 206:   HiLink javaScriptRegexpString         String
line 206: hi def link javaScriptRegexpString         String
line 207:   HiLink javaScriptCharacter            Character
line 207: hi def link javaScriptCharacter            Character
line 208:   HiLink javaScriptPrototype            Type
line 208: hi def link javaScriptPrototype            Type
line 209:   HiLink javaScriptConditional          Conditional
line 209: hi def link javaScriptConditional          Conditional
line 210:   HiLink javaScriptBranch               Conditional
line 210: hi def link javaScriptBranch               Conditional
line 211:   HiLink javaScriptRepeat               Repeat
line 211: hi def link javaScriptRepeat               Repeat
line 212:   HiLink javaScriptStatement            Statement
line 212: hi def link javaScriptStatement            Statement
line 213:   HiLink javaScriptFunction             Function
line 213: hi def link javaScriptFunction             Function
line 214:   HiLink javaScriptError                Error
line 214: hi def link javaScriptError                Error
line 215:   HiLink javaScriptParensError          Error
line 215: hi def link javaScriptParensError          Error
line 216:   HiLink javaScriptParensErrA           Error
line 216: hi def link javaScriptParensErrA           Error
line 217:   HiLink javaScriptParensErrB           Error
line 217: hi def link javaScriptParensErrB           Error
line 218:   HiLink javaScriptParensErrC           Error
line 218: hi def link javaScriptParensErrC           Error
line 219:   HiLink javaScriptOperator             Operator
line 219: hi def link javaScriptOperator             Operator
line 220:   HiLink javaScriptType                 Type
line 220: hi def link javaScriptType                 Type
line 221:   HiLink javaScriptNull                 Type
line 221: hi def link javaScriptNull                 Type
line 222:   HiLink javaScriptNumber               Number
line 222: hi def link javaScriptNumber               Number
line 223:   HiLink javaScriptFloat                Number
line 223: hi def link javaScriptFloat                Number
line 224:   HiLink javaScriptBoolean              Boolean
line 224: hi def link javaScriptBoolean              Boolean
line 225:   HiLink javaScriptLabel                Label
line 225: hi def link javaScriptLabel                Label
line 226:   HiLink javaScriptSpecial              Special
line 226: hi def link javaScriptSpecial              Special
line 227:   HiLink javaScriptSource               Special
line 227: hi def link javaScriptSource               Special
line 228:   HiLink javaScriptGlobalObjects        Special
line 228: hi def link javaScriptGlobalObjects        Special
line 229:   HiLink javaScriptExceptions           Special
line 229: hi def link javaScriptExceptions           Special
line 230: 
line 231:   HiLink javaScriptDomErrNo             Constant
line 231: hi def link javaScriptDomErrNo             Constant
line 232:   HiLink javaScriptDomNodeConsts        Constant
line 232: hi def link javaScriptDomNodeConsts        Constant
line 233:   HiLink javaScriptDomElemAttrs         Label
line 233: hi def link javaScriptDomElemAttrs         Label
line 234:   HiLink javaScriptDomElemFuncs         PreProc
line 234: hi def link javaScriptDomElemFuncs         PreProc
line 235: 
line 236:   HiLink javaScriptHtmlEvents           Special
line 236: hi def link javaScriptHtmlEvents           Special
line 237:   HiLink javaScriptHtmlElemAttrs        Label
line 237: hi def link javaScriptHtmlElemAttrs        Label
line 238:   HiLink javaScriptHtmlElemFuncs        PreProc
line 238: hi def link javaScriptHtmlElemFuncs        PreProc
line 239: 
line 240:   HiLink javaScriptCssStyles            Label
line 240: hi def link javaScriptCssStyles            Label
line 241: 
line 242:   delcommand HiLink
line 243: endif
line 244: 
line 245: " Define the htmlJavaScript for HTML syntax html.vim
line 246: "syntax clear htmlJavaScript
line 247: "syntax clear javaScriptExpression
line 248: syntax cluster  htmlJavaScript contains=@javaScriptAll,javaScriptBracket,javaScriptParen,javaScriptBlock,javaScriptParenError
line 249: syntax cluster  javaScriptExpression contains=@javaScriptAll,javaScriptBracket,javaScriptParen,javaScriptBlock,javaScriptParenError,@htmlPreproc
line 250: 
line 251: let b:current_syntax = "javascript"
line 252: if main_syntax == 'javascript'
line 253:   unlet main_syntax
line 254: endif
line 255: 
line 256: " vim: ts=4
finished sourcing /home/kguest/.vim/syntax/javascript.vim
continuing in /usr/share/vim/vim74/syntax/html.vim
Searching for "/var/lib/vim/addons/syntax/javascript.vim"
Searching for "/usr/share/vim/vimfiles/syntax/javascript.vim"
Searching for "/usr/share/vim/vim74/syntax/javascript.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 169: sourcing "/usr/share/vim/vim74/syntax/javascript.vim"
line 1: " Vim syntax file
line 2: " Language:^IJavaScript
line 3: " Maintainer:^IClaudio Fleiner <claudio@fleiner.com>
line 4: " Updaters:^IScott Shattuck (ss) <ss@technicalpursuit.com>
line 5: " URL:^I^Ihttp://www.fleiner.com/vim/syntax/javascript.vim
line 6: " Changes:^I(ss) added keywords, reserved words, and other identifiers
line 7: "^I^I(ss) repaired several quoting and grouping glitches
line 8: "^I^I(ss) fixed regex parsing issue with multiple qualifiers [gi]
line 9: "^I^I(ss) additional factoring of keywords, globals, and members
line 10: " Last Change:^I2012 Oct 05
line 11: " ^I^I2013 Jun 12: adjusted javaScriptRegexpString (Kevin Locke)
line 12: 
line 13: " For version 5.x: Clear all syntax items
line 14: " For version 6.x: Quit when a syntax file was already loaded
line 15: " tuning parameters:
line 16: " unlet javaScript_fold
line 17: 
line 18: if !exists("main_syntax")
line 19:   if version < 600
line 20:     syntax clear
line 21:   elseif exists("b:current_syntax")
line 22:     finish
line 23:   endif
line 24:   let main_syntax = 'javascript'
line 25: elseif exists("b:current_syntax") && b:current_syntax == "javascript"
line 26:   finish
finished sourcing /usr/share/vim/vim74/syntax/javascript.vim
continuing in /usr/share/vim/vim74/syntax/html.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/javascript.vim"
Searching for "/var/lib/vim/addons/after/syntax/javascript.vim"
Searching for "/home/kguest/.vim/after/syntax/javascript.vim"
line 170:   unlet b:current_syntax
line 171:   syn region  javaScript start=+<script\_[^>]*>+ keepend end=+</script>+me=s-1 contains=@htmlJavaScript,htmlCssStyleComment,htmlScriptTag,@htmlPreproc
line 172:   syn region  htmlScriptTag     contained start=+<script+ end=+>+ fold contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent
line 173:   HtmlHiLink htmlScriptTag htmlTag
line 173: hi def link htmlScriptTag htmlTag
line 174: 
line 175:   " html events (i.e. arguments that include javascript commands)
line 176:   if exists("html_extended_events")
line 177:     syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*'+ end=+'+ contains=htmlEventSQ
line 178:     syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*"+ end=+"+ contains=htmlEventDQ
line 179:   else
line 180:     syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*'+ end=+'+ keepend contains=htmlEventSQ
line 181:     syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*"+ end=+"+ keepend contains=htmlEventDQ
line 182:   endif
line 183:   syn region htmlEventSQ        contained start=+'+ms=s+1 end=+'+me=s-1 contains=@htmlJavaScript
line 184:   syn region htmlEventDQ        contained start=+"+ms=s+1 end=+"+me=s-1 contains=@htmlJavaScript
line 185:   HtmlHiLink htmlEventSQ htmlEvent
line 185: hi def link htmlEventSQ htmlEvent
line 186:   HtmlHiLink htmlEventDQ htmlEvent
line 186: hi def link htmlEventDQ htmlEvent
line 187: 
line 188:   " a javascript expression is used as an arg value
line 189:   syn region  javaScriptExpression contained start=+&{+ keepend end=+};+ contains=@htmlJavaScript,@htmlPreproc
line 190: endif
line 191: 
line 192: if main_syntax != 'java' || exists("java_vb")
line 193:   " VB SCRIPT
line 194:   syn include @htmlVbScript syntax/vb.vim
Searching for "syntax/vb.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/syntax/vb.vim"
Searching for "/home/kguest/.vim/syntax/vb.vim"
Searching for "/var/lib/vim/addons/syntax/vb.vim"
Searching for "/usr/share/vim/vimfiles/syntax/vb.vim"
Searching for "/usr/share/vim/vim74/syntax/vb.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 194: sourcing "/usr/share/vim/vim74/syntax/vb.vim"
line 1: " Vim syntax file
line 2: " Language:^IVisual Basic
line 3: " Maintainer:^ITim Chase <vb.vim@tim.thechases.com>
line 4: " Former Maintainer:^IRobert M. Cortopassi <cortopar@mindspring.com>
line 5: "^I(tried multiple times to contact, but email bounced)
line 6: " Last Change:
line 7: "   2005 May 25  Synched with work by Thomas Barthel
line 8: "   2004 May 30  Added a few keywords
line 9: 
line 10: " This was thrown together after seeing numerous requests on the
line 11: " VIM and VIM-DEV mailing lists.  It is by no means complete.
line 12: " Send comments, suggestions and requests to the maintainer.
line 13: 
line 14: " For version 5.x: Clear all syntax items
line 15: " For version 6.x: Quit when a syntax file was already loaded
line 16: if version < 600
line 17: ^Isyntax clear
line 18: elseif exists("b:current_syntax")
line 19: ^Ifinish
line 20: endif
line 21: 
line 22: " VB is case insensitive
line 23: syn case ignore
line 24: 
line 25: syn keyword vbConditional If Then ElseIf Else Select Case
line 26: 
line 27: syn keyword vbOperator AddressOf And ByRef ByVal Eqv Imp In
line 28: syn keyword vbOperator Is Like Mod Not Or To Xor
line 29: 
line 30: syn match vbOperator "[()+.,\-/*=&]"
line 31: syn match vbOperator "[<>]=\="
line 32: syn match vbOperator "<>"
line 33: syn match vbOperator "\s\+_$"
line 34: 
line 35: syn keyword vbBoolean  True False
line 36: syn keyword vbConst Null Nothing
line 37: 
line 38: syn keyword vbRepeat Do For ForEach Loop Next
line 39: syn keyword vbRepeat Step To Until Wend While
line 40: 
line 41: syn keyword vbEvents AccessKeyPress Activate ActiveRowChanged
line 42: syn keyword vbEvents AfterAddFile AfterChangeFileName AfterCloseFile
line 43: syn keyword vbEvents AfterColEdit AfterColUpdate AfterDelete
line 44: syn keyword vbEvents AfterInsert AfterLabelEdit AfterRemoveFile
line 45: syn keyword vbEvents AfterUpdate AfterWriteFile AmbientChanged
line 46: syn keyword vbEvents ApplyChanges Associate AsyncProgress
line 47: syn keyword vbEvents AsyncReadComplete AsyncReadProgress AxisActivated
line 48: syn keyword vbEvents AxisLabelActivated AxisLabelSelected
line 49: syn keyword vbEvents AxisLabelUpdated AxisSelected AxisTitleActivated
line 50: syn keyword vbEvents AxisTitleSelected AxisTitleUpdated AxisUpdated
line 51: syn keyword vbEvents BeforeClick BeforeColEdit BeforeColUpdate
line 52: syn keyword vbEvents BeforeConnect BeforeDelete BeforeInsert
line 53: syn keyword vbEvents BeforeLabelEdit BeforeLoadFile BeforeUpdate
line 54: syn keyword vbEvents BeginRequest BeginTrans ButtonClick
line 55: syn keyword vbEvents ButtonCompleted ButtonDropDown ButtonGotFocus
line 56: syn keyword vbEvents ButtonLostFocus CallbackKeyDown Change Changed
line 57: syn keyword vbEvents ChartActivated ChartSelected ChartUpdated Click
line 58: syn keyword vbEvents Close CloseQuery CloseUp ColEdit ColResize
line 59: syn keyword vbEvents Collapse ColumnClick CommitTrans Compare
line 60: syn keyword vbEvents ConfigChageCancelled ConfigChanged
line 61: syn keyword vbEvents ConfigChangedCancelled Connect ConnectionRequest
line 62: syn keyword vbEvents CurrentRecordChanged DECommandAdded
line 63: syn keyword vbEvents DECommandPropertyChanged DECommandRemoved
line 64: syn keyword vbEvents DEConnectionAdded DEConnectionPropertyChanged
line 65: syn keyword vbEvents DEConnectionRemoved DataArrival DataChanged
line 66: syn keyword vbEvents DataUpdated DateClicked DblClick Deactivate
line 67: syn keyword vbEvents DevModeChange DeviceArrival DeviceOtherEvent
line 68: syn keyword vbEvents DeviceQueryRemove DeviceQueryRemoveFailed
line 69: syn keyword vbEvents DeviceRemoveComplete DeviceRemovePending
line 70: syn keyword vbEvents Disconnect DisplayChanged Dissociate
line 71: syn keyword vbEvents DoGetNewFileName Done DonePainting DownClick
line 72: syn keyword vbEvents DragDrop DragOver DropDown EditProperty EditQuery
line 73: syn keyword vbEvents EndRequest EnterCell EnterFocus ExitFocus Expand
line 74: syn keyword vbEvents FontChanged FootnoteActivated FootnoteSelected
line 75: syn keyword vbEvents FootnoteUpdated Format FormatSize GotFocus
line 76: syn keyword vbEvents HeadClick HeightChanged Hide InfoMessage
line 77: syn keyword vbEvents IniProperties InitProperties Initialize
line 78: syn keyword vbEvents ItemActivated ItemAdded ItemCheck ItemClick
line 79: syn keyword vbEvents ItemReloaded ItemRemoved ItemRenamed
line 80: syn keyword vbEvents ItemSeletected KeyDown KeyPress KeyUp LeaveCell
line 81: syn keyword vbEvents LegendActivated LegendSelected LegendUpdated
line 82: syn keyword vbEvents LinkClose LinkError LinkExecute LinkNotify
line 83: syn keyword vbEvents LinkOpen Load LostFocus MouseDown MouseMove
line 84: syn keyword vbEvents MouseUp NodeCheck NodeClick OLECompleteDrag
line 85: syn keyword vbEvents OLEDragDrop OLEDragOver OLEGiveFeedback OLESetData
line 86: syn keyword vbEvents OLEStartDrag ObjectEvent ObjectMove OnAddNew
line 87: syn keyword vbEvents OnComm Paint PanelClick PanelDblClick PathChange
line 88: syn keyword vbEvents PatternChange PlotActivated PlotSelected
line 89: syn keyword vbEvents PlotUpdated PointActivated PointLabelActivated
line 90: syn keyword vbEvents PointLabelSelected PointLabelUpdated PointSelected
line 91: syn keyword vbEvents PointUpdated PowerQuerySuspend PowerResume
line 92: syn keyword vbEvents PowerStatusChanged PowerSuspend ProcessTag
line 93: syn keyword vbEvents ProcessingTimeout QueryChangeConfig QueryClose
line 94: syn keyword vbEvents QueryComplete QueryCompleted QueryTimeout
line 95: syn keyword vbEvents QueryUnload ReadProperties RepeatedControlLoaded
line 96: syn keyword vbEvents RepeatedControlUnloaded Reposition
line 97: syn keyword vbEvents RequestChangeFileName RequestWriteFile Resize
line 98: syn keyword vbEvents ResultsChanged RetainedProject RollbackTrans
line 99: syn keyword vbEvents RowColChange RowCurrencyChange RowResize
line 100: syn keyword vbEvents RowStatusChanged Scroll SelChange SelectionChanged
line 101: syn keyword vbEvents SendComplete SendProgress SeriesActivated
line 102: syn keyword vbEvents SeriesSelected SeriesUpdated SettingChanged Show
line 103: syn keyword vbEvents SplitChange Start StateChanged StatusUpdate
line 104: syn keyword vbEvents SysColorsChanged Terminate TimeChanged Timer
line 105: syn keyword vbEvents TitleActivated TitleSelected TitleUpdated
line 106: syn keyword vbEvents UnboundAddData UnboundDeleteRow
line 107: syn keyword vbEvents UnboundGetRelativeBookmark UnboundReadData
line 108: syn keyword vbEvents UnboundWriteData Unformat Unload UpClick Updated
line 109: syn keyword vbEvents UserEvent Validate ValidationError
line 110: syn keyword vbEvents VisibleRecordChanged WillAssociate WillChangeData
line 111: syn keyword vbEvents WillDissociate WillExecute WillUpdateRows
line 112: syn keyword vbEvents WriteProperties
line 113: 
line 114: 
line 115: syn keyword vbFunction Abs Array Asc AscB AscW Atn Avg BOF CBool CByte
line 116: syn keyword vbFunction CCur CDate CDbl CInt CLng CSng CStr CVDate CVErr
line 117: syn keyword vbFunction CVar CallByName Cdec Choose Chr ChrB ChrW Command
line 118: syn keyword vbFunction Cos Count CreateObject CurDir DDB Date DateAdd
line 119: syn keyword vbFunction DateDiff DatePart DateSerial DateValue Day Dir
line 120: syn keyword vbFunction DoEvents EOF Environ Error Exp FV FileAttr
line 121: syn keyword vbFunction FileDateTime FileLen FilterFix Fix Format
line 122: syn keyword vbFunction FormatCurrency FormatDateTime FormatNumber
line 123: syn keyword vbFunction FormatPercent FreeFile GetAllStrings GetAttr
line 124: syn keyword vbFunction GetAutoServerSettings GetObject GetSetting Hex
line 125: syn keyword vbFunction Hour IIf IMEStatus IPmt InStr Input InputB
line 126: syn keyword vbFunction InputBox InstrB Int IsArray IsDate IsEmpty IsError
line 127: syn keyword vbFunction IsMissing IsNull IsNumeric IsObject Join LBound
line 128: syn keyword vbFunction LCase LOF LTrim Left LeftB Len LenB LoadPicture
line 129: syn keyword vbFunction LoadResData LoadResPicture LoadResString Loc Log
line 130: syn keyword vbFunction MIRR Max Mid MidB Min Minute Month MonthName
line 131: syn keyword vbFunction MsgBox NPV NPer Now Oct PPmt PV Partition Pmt
line 132: syn keyword vbFunction QBColor RGB RTrim Rate Replace Right RightB Rnd
line 133: syn keyword vbFunction Round SLN SYD Second Seek Sgn Shell Sin Space Spc
line 134: syn keyword vbFunction Split Sqr StDev StDevP Str StrComp StrConv
line 135: syn keyword vbFunction StrReverse String Sum Switch Tab Tan Time
line 136: syn keyword vbFunction TimeSerial TimeValue Timer Trim TypeName UBound
line 137: syn keyword vbFunction UCase Val Var VarP VarType Weekday WeekdayName
line 138: syn keyword vbFunction Year
line 139: 
line 140: syn keyword vbMethods AboutBox Accept Activate Add AddCustom AddFile
line 141: syn keyword vbMethods AddFromFile AddFromGuid AddFromString
line 142: syn keyword vbMethods AddFromTemplate AddItem AddNew AddToAddInToolbar
line 143: syn keyword vbMethods AddToolboxProgID Append AppendAppendChunk
line 144: syn keyword vbMethods AppendChunk Arrange Assert AsyncRead BatchUpdate
line 145: syn keyword vbMethods BeginQueryEdit BeginTrans Bind BuildPath
line 146: syn keyword vbMethods CanPropertyChange Cancel CancelAsyncRead
line 147: syn keyword vbMethods CancelBatch CancelUpdate CaptureImage CellText
line 148: syn keyword vbMethods CellValue Circle Clear ClearFields ClearSel
line 149: syn keyword vbMethods ClearSelCols ClearStructure Clone Close Cls
line 150: syn keyword vbMethods ColContaining CollapseAll ColumnSize CommitTrans
line 151: syn keyword vbMethods CompactDatabase Compose Connect Copy CopyFile
line 152: syn keyword vbMethods CopyFolder CopyQueryDef Count CreateDatabase
line 153: syn keyword vbMethods CreateDragImage CreateEmbed CreateField
line 154: syn keyword vbMethods CreateFolder CreateGroup CreateIndex CreateLink
line 155: syn keyword vbMethods CreatePreparedStatement CreatePropery CreateQuery
line 156: syn keyword vbMethods CreateQueryDef CreateRelation CreateTableDef
line 157: syn keyword vbMethods CreateTextFile CreateToolWindow CreateUser
line 158: syn keyword vbMethods CreateWorkspace Customize Cut Delete
line 159: syn keyword vbMethods DeleteColumnLabels DeleteColumns DeleteFile
line 160: syn keyword vbMethods DeleteFolder DeleteLines DeleteRowLabels
line 161: syn keyword vbMethods DeleteRows DeselectAll DesignerWindow DoVerb Drag
line 162: syn keyword vbMethods Draw DriveExists Edit EditCopy EditPaste EndDoc
line 163: syn keyword vbMethods EnsureVisible EstablishConnection Execute Exists
line 164: syn keyword vbMethods Expand Export ExportReport ExtractIcon Fetch
line 165: syn keyword vbMethods FetchVerbs FileExists Files FillCache Find
line 166: syn keyword vbMethods FindFirst FindItem FindLast FindNext FindPrevious
line 167: syn keyword vbMethods FolderExists Forward GetAbsolutePathName
line 168: syn keyword vbMethods GetBaseName GetBookmark GetChunk GetClipString
line 169: syn keyword vbMethods GetData GetDrive GetDriveName GetFile GetFileName
line 170: syn keyword vbMethods GetFirstVisible GetFolder GetFormat GetHeader
line 171: syn keyword vbMethods GetLineFromChar GetNumTicks GetParentFolderName
line 172: syn keyword vbMethods GetRows GetSelectedPart GetSelection
line 173: syn keyword vbMethods GetSpecialFolder GetTempName GetText
line 174: syn keyword vbMethods GetVisibleCount GoBack GoForward Hide HitTest
line 175: syn keyword vbMethods HoldFields Idle Import InitializeLabels Insert
line 176: syn keyword vbMethods InsertColumnLabels InsertColumns InsertFile
line 177: syn keyword vbMethods InsertLines InsertObjDlg InsertRowLabels
line 178: syn keyword vbMethods InsertRows Item Keys KillDoc Layout Line Lines
line 179: syn keyword vbMethods LinkExecute LinkPoke LinkRequest LinkSend Listen
line 180: syn keyword vbMethods LoadFile LoadResData LoadResPicture LoadResString
line 181: syn keyword vbMethods LogEvent MakeCompileFile MakeCompiledFile
line 182: syn keyword vbMethods MakeReplica MoreResults Move MoveData MoveFile
line 183: syn keyword vbMethods MoveFirst MoveFolder MoveLast MoveNext
line 184: syn keyword vbMethods MovePrevious NavigateTo NewPage NewPassword
line 185: syn keyword vbMethods NextRecordset OLEDrag OnAddinsUpdate OnConnection
line 186: syn keyword vbMethods OnDisconnection OnStartupComplete Open
line 187: syn keyword vbMethods OpenAsTextStream OpenConnection OpenDatabase
line 188: syn keyword vbMethods OpenQueryDef OpenRecordset OpenResultset OpenURL
line 189: syn keyword vbMethods Overlay PSet PaintPicture PastSpecialDlg Paste
line 190: syn keyword vbMethods PeekData Play Point PopulatePartial PopupMenu
line 191: syn keyword vbMethods Print PrintForm PrintReport PropertyChanged Quit
line 192: syn keyword vbMethods Raise RandomDataFill RandomFillColumns
line 193: syn keyword vbMethods RandomFillRows ReFill Read ReadAll ReadFromFile
line 194: syn keyword vbMethods ReadLine ReadProperty Rebind Refresh RefreshLink
line 195: syn keyword vbMethods RegisterDatabase ReleaseInstance Reload Remove
line 196: syn keyword vbMethods RemoveAddInFromToolbar RemoveAll RemoveItem Render
line 197: syn keyword vbMethods RepairDatabase ReplaceLine Reply ReplyAll Requery
line 198: syn keyword vbMethods ResetCustom ResetCustomLabel ResolveName
line 199: syn keyword vbMethods RestoreToolbar Resync Rollback RollbackTrans
line 200: syn keyword vbMethods RowBookmark RowContaining RowTop Save SaveAs
line 201: syn keyword vbMethods SaveFile SaveToFile SaveToOle1File SaveToolbar
line 202: syn keyword vbMethods Scale ScaleX ScaleY Scroll SelPrint SelectAll
line 203: syn keyword vbMethods SelectPart Send SendData Set SetAutoServerSettings
line 204: syn keyword vbMethods SetData SetFocus SetOption SetSelection SetSize
line 205: syn keyword vbMethods SetText SetViewport Show ShowColor ShowFont
line 206: syn keyword vbMethods ShowHelp ShowOpen ShowPrinter ShowSave
line 207: syn keyword vbMethods ShowWhatsThis SignOff SignOn Size Skip SkipLine
line 208: syn keyword vbMethods Span Split SplitContaining StartLabelEdit
line 209: syn keyword vbMethods StartLogging Stop Synchronize Tag TextHeight
line 210: syn keyword vbMethods TextWidth ToDefaults Trace TwipsToChartPart
line 211: syn keyword vbMethods TypeByChartType URLFor Update UpdateControls
line 212: syn keyword vbMethods UpdateRecord UpdateRow Upto ValidateControls Value
line 213: syn keyword vbMethods WhatsThisMode Write WriteBlankLines WriteLine
line 214: syn keyword vbMethods WriteProperty WriteTemplate ZOrder
line 215: syn keyword vbMethods rdoCreateEnvironment rdoRegisterDataSource
line 216: 
line 217: syn keyword vbStatement Alias AppActivate As Base Beep Begin Call ChDir
line 218: syn keyword vbStatement ChDrive Close Const Date Declare DefBool DefByte
line 219: syn keyword vbStatement DefCur DefDate DefDbl DefDec DefInt DefLng DefObj
line 220: syn keyword vbStatement DefSng DefStr DefVar Deftype DeleteSetting Dim Do
line 221: syn keyword vbStatement Each ElseIf End Enum Erase Error Event Exit
line 222: syn keyword vbStatement Explicit FileCopy For ForEach Function Get GoSub
line 223: syn keyword vbStatement GoTo Gosub Implements Kill LSet Let Lib LineInput
line 224: syn keyword vbStatement Load Lock Loop Mid MkDir Name Next On OnError Open
line 225: syn keyword vbStatement Option Preserve Private Property Public Put RSet
line 226: syn keyword vbStatement RaiseEvent Randomize ReDim Redim Rem Reset Resume
line 227: syn keyword vbStatement Return RmDir SavePicture SaveSetting Seek SendKeys
line 228: syn keyword vbStatement Sendkeys Set SetAttr Static Step Stop Sub Time
line 229: syn keyword vbStatement Type Unload Unlock Until Wend While Width With
line 230: syn keyword vbStatement Write
line 231: 
line 232: syn keyword vbKeyword As Binary ByRef ByVal Date Empty Error Friend Get
line 233: syn keyword vbKeyword Input Is Len Lock Me Mid New Nothing Null On
line 234: syn keyword vbKeyword Option Optional ParamArray Print Private Property
line 235: syn keyword vbKeyword Public PublicNotCreateable OnNewProcessSingleUse
line 236: syn keyword vbKeyword InSameProcessMultiUse GlobalMultiUse Resume Seek
line 237: syn keyword vbKeyword Set Static Step String Time WithEvents
line 238: 
line 239: syn keyword vbTodo contained^ITODO
line 240: 
line 241: "Datatypes
line 242: syn keyword vbTypes Boolean Byte Currency Date Decimal Double Empty
line 243: syn keyword vbTypes Integer Long Object Single String Variant
line 244: 
line 245: "VB defined values
line 246: syn keyword vbDefine dbBigInt dbBinary dbBoolean dbByte dbChar
line 247: syn keyword vbDefine dbCurrency dbDate dbDecimal dbDouble dbFloat
line 248: syn keyword vbDefine dbGUID dbInteger dbLong dbLongBinary dbMemo
line 249: syn keyword vbDefine dbNumeric dbSingle dbText dbTime dbTimeStamp
line 250: syn keyword vbDefine dbVarBinary
line 251: 
line 252: "VB defined values
line 253: syn keyword vbDefine vb3DDKShadow vb3DFace vb3DHighlight vb3DLight
line 254: syn keyword vbDefine vb3DShadow vbAbort vbAbortRetryIgnore
line 255: syn keyword vbDefine vbActiveBorder vbActiveTitleBar vbAlias
line 256: syn keyword vbDefine vbApplicationModal vbApplicationWorkspace
line 257: syn keyword vbDefine vbAppTaskManager vbAppWindows vbArchive vbArray
line 258: syn keyword vbDefine vbBack vbBinaryCompare vbBlack vbBlue vbBoolean
line 259: syn keyword vbDefine vbButtonFace vbButtonShadow vbButtonText vbByte
line 260: syn keyword vbDefine vbCalGreg vbCalHijri vbCancel vbCr vbCritical
line 261: syn keyword vbDefine vbCrLf vbCurrency vbCyan vbDatabaseCompare
line 262: syn keyword vbDefine vbDataObject vbDate vbDecimal vbDefaultButton1
line 263: syn keyword vbDefine vbDefaultButton2 vbDefaultButton3 vbDefaultButton4
line 264: syn keyword vbDefine vbDesktop vbDirectory vbDouble vbEmpty vbError
line 265: syn keyword vbDefine vbExclamation vbFirstFourDays vbFirstFullWeek
line 266: syn keyword vbDefine vbFirstJan1 vbFormCode vbFormControlMenu
line 267: syn keyword vbDefine vbFormFeed vbFormMDIForm vbFriday vbFromUnicode
line 268: syn keyword vbDefine vbGrayText vbGreen vbHidden vbHide vbHighlight
line 269: syn keyword vbDefine vbHighlightText vbHiragana vbIgnore vbIMEAlphaDbl
line 270: syn keyword vbDefine vbIMEAlphaSng vbIMEDisable vbIMEHiragana
line 271: syn keyword vbDefine vbIMEKatakanaDbl vbIMEKatakanaSng vbIMEModeAlpha
line 272: syn keyword vbDefine vbIMEModeAlphaFull vbIMEModeDisable
line 273: syn keyword vbDefine vbIMEModeHangul vbIMEModeHangulFull
line 274: syn keyword vbDefine vbIMEModeHiragana vbIMEModeKatakana
line 275: syn keyword vbDefine vbIMEModeKatakanaHalf vbIMEModeNoControl
line 276: syn keyword vbDefine vbIMEModeOff vbIMEModeOn vbIMENoOp vbIMEOff
line 277: syn keyword vbDefine vbIMEOn vbInactiveBorder vbInactiveCaptionText
line 278: syn keyword vbDefine vbInactiveTitleBar vbInfoBackground vbInformation
line 279: syn keyword vbDefine vbInfoText vbInteger vbKatakana vbKey0 vbKey1
line 280: syn keyword vbDefine vbKey2 vbKey3 vbKey4 vbKey5 vbKey6 vbKey7 vbKey8
line 281: syn keyword vbDefine vbKey9 vbKeyA vbKeyAdd vbKeyB vbKeyBack vbKeyC
line 282: syn keyword vbDefine vbKeyCancel vbKeyCapital vbKeyClear vbKeyControl
line 283: syn keyword vbDefine vbKeyD vbKeyDecimal vbKeyDelete vbKeyDivide
line 284: syn keyword vbDefine vbKeyDown vbKeyE vbKeyEnd vbKeyEscape vbKeyExecute
line 285: syn keyword vbDefine vbKeyF vbKeyF1 vbKeyF10 vbKeyF11 vbKeyF12 vbKeyF13
line 286: syn keyword vbDefine vbKeyF14 vbKeyF15 vbKeyF16 vbKeyF2 vbKeyF3 vbKeyF4
line 287: syn keyword vbDefine vbKeyF5 vbKeyF6 vbKeyF7 vbKeyF8 vbKeyF9 vbKeyG
line 288: syn keyword vbDefine vbKeyH vbKeyHelp vbKeyHome vbKeyI vbKeyInsert
line 289: syn keyword vbDefine vbKeyJ vbKeyK vbKeyL vbKeyLButton vbKeyLeft vbKeyM
line 290: syn keyword vbDefine vbKeyMButton vbKeyMenu vbKeyMultiply vbKeyN
line 291: syn keyword vbDefine vbKeyNumlock vbKeyNumpad0 vbKeyNumpad1
line 292: syn keyword vbDefine vbKeyNumpad2 vbKeyNumpad3 vbKeyNumpad4
line 293: syn keyword vbDefine vbKeyNumpad5 vbKeyNumpad6 vbKeyNumpad7
line 294: syn keyword vbDefine vbKeyNumpad8 vbKeyNumpad9 vbKeyO vbKeyP
line 295: syn keyword vbDefine vbKeyPageDown vbKeyPageUp vbKeyPause vbKeyPrint
line 296: syn keyword vbDefine vbKeyQ vbKeyR vbKeyRButton vbKeyReturn vbKeyRight
line 297: syn keyword vbDefine vbKeyS vbKeySelect vbKeySeparator vbKeyShift
line 298: syn keyword vbDefine vbKeySnapshot vbKeySpace vbKeySubtract vbKeyT
line 299: syn keyword vbDefine vbKeyTab vbKeyU vbKeyUp vbKeyV vbKeyW vbKeyX
line 300: syn keyword vbDefine vbKeyY vbKeyZ vbLf vbLong vbLowerCase vbMagenta
line 301: syn keyword vbDefine vbMaximizedFocus vbMenuBar vbMenuText
line 302: syn keyword vbDefine vbMinimizedFocus vbMinimizedNoFocus vbMonday
line 303: syn keyword vbDefine vbMsgBox vbMsgBoxHelpButton vbMsgBoxRight
line 304: syn keyword vbDefine vbMsgBoxRtlReading vbMsgBoxSetForeground
line 305: syn keyword vbDefine vbMsgBoxText vbNarrow vbNewLine vbNo vbNormal
line 306: syn keyword vbDefine vbNormalFocus vbNormalNoFocus vbNull vbNullChar
line 307: syn keyword vbDefine vbNullString vbObject vbObjectError vbOK
line 308: syn keyword vbDefine vbOKCancel vbOKOnly vbProperCase vbQuestion
line 309: syn keyword vbDefine vbReadOnly vbRed vbRetry vbRetryCancel vbSaturday
line 310: syn keyword vbDefine vbScrollBars vbSingle vbString vbSunday vbSystem
line 311: syn keyword vbDefine vbSystemModal vbTab vbTextCompare vbThursday
line 312: syn keyword vbDefine vbTitleBarText vbTuesday vbUnicode vbUpperCase
line 313: syn keyword vbDefine vbUseSystem vbUseSystemDayOfWeek vbVariant
line 314: syn keyword vbDefine vbVerticalTab vbVolume vbWednesday vbWhite vbWide
line 315: syn keyword vbDefine vbWindowBackground vbWindowFrame vbWindowText
line 316: syn keyword vbDefine vbYellow vbYes vbYesNo vbYesNoCancel
line 317: 
line 318: "Numbers
line 319: "integer number, or floating point number without a dot.
line 320: syn match vbNumber "\<\d\+\>"
line 321: "floating point number, with dot
line 322: syn match vbNumber "\<\d\+\.\d*\>"
line 323: "floating point number, starting with a dot
line 324: syn match vbNumber "\.\d\+\>"
line 325: "syn match  vbNumber^I^I"{[[:xdigit:]-]\+}\|&[hH][[:xdigit:]]\+&"
line 326: "syn match  vbNumber^I^I":[[:xdigit:]]\+"
line 327: "syn match  vbNumber^I^I"[-+]\=\<\d\+\>"
line 328: syn match  vbFloat^I^I"[-+]\=\<\d\+[eE][\-+]\=\d\+"
line 329: syn match  vbFloat^I^I"[-+]\=\<\d\+\.\d*\([eE][\-+]\=\d\+\)\="
line 330: syn match  vbFloat^I^I"[-+]\=\<\.\d\+\([eE][\-+]\=\d\+\)\="
line 331: 
line 332: " String and Character contstants
line 333: syn region  vbString^I^Istart=+"+  end=+"\|$+
line 334: syn region  vbComment^I^Istart="\(^\|\s\)REM\s" end="$" contains=vbTodo
line 335: syn region  vbComment^I^Istart="\(^\|\s\)\'"   end="$" contains=vbTodo
line 336: syn match   vbLineNumber^I"^\d\+\(\s\|$\)"
line 337: syn match   vbTypeSpecifier  "[a-zA-Z0-9][\$%&!#]"ms=s+1
line 338: syn match   vbTypeSpecifier  "#[a-zA-Z0-9]"me=e-1
line 339: 
line 340: " Define the default highlighting.
line 341: " For version 5.7 and earlier: only when not done already
line 342: " For version 5.8 and later: only when an item doesn't have highlighting yet
line 343: if version >= 508 || !exists("did_vb_syntax_inits")
line 344: ^Iif version < 508
line 345: ^I^Ilet did_vb_syntax_inits = 1
line 346: ^I^Icommand -nargs=+ HiLink hi link <args>
line 347: ^Ielse
line 348: ^I^Icommand -nargs=+ HiLink hi def link <args>
line 349: ^Iendif
line 350: 
line 351: ^IHiLink vbBoolean^I^IBoolean
line 351: hi def link vbBoolean^I^IBoolean
line 352: ^IHiLink vbLineNumber^I^IComment
line 352: hi def link vbLineNumber^I^IComment
line 353: ^IHiLink vbComment^I^IComment
line 353: hi def link vbComment^I^IComment
line 354: ^IHiLink vbConditional^IConditional
line 354: hi def link vbConditional^IConditional
line 355: ^IHiLink vbConst^I^I^IConstant
line 355: hi def link vbConst^I^I^IConstant
line 356: ^IHiLink vbDefine^I^I^IConstant
line 356: hi def link vbDefine^I^I^IConstant
line 357: ^IHiLink vbError^I^I^IError
line 357: hi def link vbError^I^I^IError
line 358: ^IHiLink vbFunction^I^IIdentifier
line 358: hi def link vbFunction^I^IIdentifier
line 359: ^IHiLink vbIdentifier^I^IIdentifier
line 359: hi def link vbIdentifier^I^IIdentifier
line 360: ^IHiLink vbNumber^I^I^INumber
line 360: hi def link vbNumber^I^I^INumber
line 361: ^IHiLink vbFloat^I^I^IFloat
line 361: hi def link vbFloat^I^I^IFloat
line 362: ^IHiLink vbMethods^I^IPreProc
line 362: hi def link vbMethods^I^IPreProc
line 363: ^IHiLink vbOperator^I^IOperator
line 363: hi def link vbOperator^I^IOperator
line 364: ^IHiLink vbRepeat^I^I^IRepeat
line 364: hi def link vbRepeat^I^I^IRepeat
line 365: ^IHiLink vbString^I^I^IString
line 365: hi def link vbString^I^I^IString
line 366: ^IHiLink vbStatement^I^IStatement
line 366: hi def link vbStatement^I^IStatement
line 367: ^IHiLink vbKeyword^I^IStatement
line 367: hi def link vbKeyword^I^IStatement
line 368: ^IHiLink vbEvents^I^I^ISpecial
line 368: hi def link vbEvents^I^I^ISpecial
line 369: ^IHiLink vbTodo^I^I^ITodo
line 369: hi def link vbTodo^I^I^ITodo
line 370: ^IHiLink vbTypes^I^I^IType
line 370: hi def link vbTypes^I^I^IType
line 371: ^IHiLink vbTypeSpecifier^IType
line 371: hi def link vbTypeSpecifier^IType
line 372: 
line 373: ^Idelcommand HiLink
line 374: endif
line 375: 
line 376: let b:current_syntax = "vb"
line 377: 
line 378: " vim: ts=8
finished sourcing /usr/share/vim/vim74/syntax/vb.vim
continuing in /usr/share/vim/vim74/syntax/html.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/vb.vim"
Searching for "/var/lib/vim/addons/after/syntax/vb.vim"
Searching for "/home/kguest/.vim/after/syntax/vb.vim"
line 195:   unlet b:current_syntax
line 196:   syn region  javaScript start=+<script \_[^>]*language *=\_[^>]*vbscript\_[^>]*>+ keepend end=+</script>+me=s-1 contains=@htmlVbScript,htmlCssStyleComment,htmlScriptTag,@htmlPreproc
line 197: endif
line 198: 
line 199: syn cluster htmlJavaScript      add=@htmlPreproc
line 200: 
line 201: if main_syntax != 'java' || exists("java_css")
line 202:   " embedded style sheets
line 203:   syn keyword htmlArg           contained media
line 204:   syn include @htmlCss syntax/css.vim
Searching for "syntax/css.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/syntax/css.vim"
Searching for "/home/kguest/.vim/syntax/css.vim"
Searching for "/var/lib/vim/addons/syntax/css.vim"
Searching for "/usr/share/vim/vimfiles/syntax/css.vim"
Searching for "/usr/share/vim/vim74/syntax/css.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 204: sourcing "/usr/share/vim/vim74/syntax/css.vim"
line 1: " Vim syntax file
line 2: " Language:     Cascading Style Sheets
line 3: " Previous Contributor List:
line 4: "               Claudio Fleiner <claudio@fleiner.com> (Maintainer)
line 5: "               Yeti            (Add full CSS2, HTML4 support)
line 6: "               Nikolai Weibull (Add CSS2 support)
line 7: " Maintainer:   Jules Wang      <w.jq0722@gmail.com>
line 8: " URL:          https://github.com/JulesWang/css.vim
line 9: " Last Change:  2013 Jul 23
line 10: 
line 11: " For version 5.x: Clear all syntax items
line 12: " For version 6.x: Quit when a syntax file was already loaded
line 13: if !exists("main_syntax")
line 14:   if version < 600
line 15:     syntax clear
line 16:   elseif exists("b:current_syntax")
line 17:     finish
line 18:   endif
line 19:   let main_syntax = 'css'
line 20: elseif exists("b:current_syntax") && b:current_syntax == "css"
line 21:   finish
line 22: endif
line 23: 
line 24: let s:cpo_save = &cpo
line 25: set cpo&vim
line 26: 
line 27: syn case ignore
line 28: 
line 29: " All HTML4 tags
line 30: syn keyword cssTagName abbr acronym address applet area a b base
line 31: syn keyword cssTagName basefont bdo big blockquote body br button
line 32: syn keyword cssTagName caption center cite code col colgroup dd del
line 33: syn keyword cssTagName dfn dir div dl dt em fieldset font form frame
line 34: syn keyword cssTagName frameset h1 h2 h3 h4 h5 h6 head hr html img i
line 35: syn keyword cssTagName iframe img input ins isindex kbd label legend li
line 36: syn keyword cssTagName link map menu meta noframes noscript ol optgroup
line 37: syn keyword cssTagName option p param pre q s samp script select small
line 38: syn keyword cssTagName span strike strong style sub sup table tbody td
line 39: syn keyword cssTagName textarea tfoot th thead title tr tt ul u var
line 40: syn keyword cssTagName object
line 41: 
line 42: " HTML5 new tags 5*6=30
line 43: syn keyword cssTagName article aside audio bdi canvas command
line 44: syn keyword cssTagName datalist details embed figcaption figure footer
line 45: syn keyword cssTagName header hgroup keygen mark meter nav
line 46: syn keyword cssTagName output progress rt rp ruby section
line 47: syn keyword cssTagName source summary time track video wbr
line 48: 
line 49: " Tags not supported in HTML5
line 50: syn keyword cssDeprecated acronym applet basefont big center dir
line 51: syn keyword cssDeprecated font frame frameset noframes strike tt
line 52: 
line 53: "syn match cssTagName "\<table\>"
line 54: syn match cssTagName "\*"
line 55: 
line 56: " selectors
line 57: syn match cssSelectorOp "[,>+]"
line 58: syn match cssSelectorOp2 "[~|^$*]\?=" contained
line 59: " FIXME: add HTML5 attribute
line 60: syn region cssAttributeSelector matchgroup=cssSelectorOp start="\[" end="]" transparent contains=cssUnicodeEscape,cssSelectorOp2,cssStringQ,cssStringQQ
line 61: 
line 62: " .class and #id
line 63: syn match cssClassName "\.[A-Za-z][A-Za-z0-9_-]\+"
line 64: 
line 65: try
line 66: syn match cssIdentifier "#[A-Za-z<c0>-<ff>_@][A-Za-z<c0>-<ff>0-9_@-]*"
line 67: catch /^.*/
line 68: syn match cssIdentifier "#[A-Za-z_@][A-Za-z0-9_@-]*"
line 69: endtry
line 70: 
line 71: syn match cssTagName "@page\>" nextgroup=cssDefinition
line 72: " FIXME: use cssVendor here
line 73: syn match cssTagName "@\(-\(webkit\|moz\|o\|ms\)-\)\=keyframes\>" nextgroup=cssDefinition
line 74: 
line 75: syn match cssMedia "@media\>" nextgroup=cssMediaType skipwhite skipnl
line 76: syn keyword cssMediaType contained screen print aural braile embosed handheld projection ty tv all nextgroup=cssMediaComma,cssMediaBlock skipwhite skipnl
line 77: "syn match cssMediaComma "," nextgroup=cssMediaType skipwhite skipnl
line 78: syn region cssMediaBlock transparent matchgroup=cssBraces start='{' end='}' contains=cssTagName,cssError,cssComment,cssDefinition,cssURL,cssUnicodeEscape,cssIdentifier
line 79: 
line 80: syn match cssValueInteger contained "[-+]\=\d\+"
line 81: syn match cssValueNumber contained "[-+]\=\d\+\(\.\d*\)\="
line 82: syn match cssValueLength contained "[-+]\=\d\+\(\.\d*\)\=\(%\|mm\|cm\|in\|pt\|pc\|em\|ex\|px\|rem\)"
line 83: syn match cssValueAngle contained "[-+]\=\d\+\(\.\d*\)\=\(deg\|grad\|rad\)"
line 84: syn match cssValueTime contained "+\=\d\+\(\.\d*\)\=\(ms\|s\)"
line 85: syn match cssValueFrequency contained "+\=\d\+\(\.\d*\)\=\(Hz\|kHz\)"
line 86: 
line 87: syn match cssFontDescriptor "@font-face\>" nextgroup=cssFontDescriptorBlock skipwhite skipnl
line 88: syn region cssFontDescriptorBlock contained transparent matchgroup=cssBraces start="{" end="}" contains=cssComment,cssError,cssUnicodeEscape,cssFontProp,cssFontAttr,cssCommonAttr,cssStringQ,cssStringQQ,cssFontDescriptorProp,cssValue.*,cssFontDescriptorFunction,cssUnicodeRange,cssFontDescriptorAttr
line 89: syn match cssFontDescriptorProp contained "\<\(unicode-range\|unit-per-em\|panose-1\|cap-height\|x-height\|definition-src\)\>"
line 90: syn keyword cssFontDescriptorProp contained src stemv stemh slope ascent descent widths bbox baseline centerline mathline topline
line 91: syn keyword cssFontDescriptorAttr contained all
line 92: syn region cssFontDescriptorFunction contained matchgroup=cssFunctionName start="\<\(uri\|url\|local\|format\)\s*(" end=")" contains=cssStringQ,cssStringQQ oneline keepend
line 93: syn match cssUnicodeRange contained "U+[0-9A-Fa-f?]\+"
line 94: syn match cssUnicodeRange contained "U+\x\+-\x\+"
line 95: 
line 96: " The 16 basic color names
line 97: syn keyword cssColor contained aqua black blue fuchsia gray green lime maroon navy olive purple red silver teal yellow
line 98: 
line 99: " 130 more color names
line 100: syn keyword cssColor contained aliceblue antiquewhite aquamarine azure
line 101: syn keyword cssColor contained beige bisque blanchedalmond blueviolet brown burlywood
line 102: syn keyword cssColor contained cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan
line 103: syn match cssColor contained /dark\(blue\|cyan\|goldenrod\|gray\|green\|grey\|khaki\)/
line 104: syn match cssColor contained /dark\(magenta\|olivegreen\|orange\|orchid\|red\|salmon\|seagreen\)/
line 105: syn match cssColor contained /darkslate\(blue\|gray\|grey\)/
line 106: syn match cssColor contained /dark\(turquoise\|violet\)/
line 107: syn keyword cssColor contained deeppink deepskyblue dimgray dimgrey dodgerblue firebrick
line 108: syn keyword cssColor contained floralwhite forestgreen gainsboro ghostwhite gold
line 109: syn keyword cssColor contained goldenrod greenyellow grey honeydew hotpink
line 110: syn keyword cssColor contained indianred indigo ivory khaki lavender lavenderblush lawngreen
line 111: syn keyword cssColor contained lemonchiffon limegreen linen magenta
line 112: syn match cssColor contained /light\(blue\|coral\|cyan\|goldenrodyellow\|gray\|green\)/
line 113: syn match cssColor contained /light\(grey\|pink\|salmon\|seagreen\|skyblue\|yellow\)/
line 114: syn match cssColor contained /light\(slategray\|slategrey\|steelblue\)/
line 115: syn match cssColor contained /medium\(aquamarine\|blue\|orchid\|purple\|seagreen\)/
line 116: syn match cssColor contained /medium\(slateblue\|springgreen\|turquoise\|violetred\)/
line 117: syn keyword cssColor contained midnightblue mintcream mistyrose moccasin navajowhite
line 118: syn keyword cssColor contained oldlace olivedrab orange orangered orchid
line 119: syn match cssColor contained /pale\(goldenrod\|green\|turquoise\|violetred\)/
line 120: syn keyword cssColor contained papayawhip peachpuff peru pink plum powderblue
line 121: syn keyword cssColor contained rosybrown royalblue saddlebrown salmon sandybrown
line 122: syn keyword cssColor contained seagreen seashell sienna skyblue slateblue
line 123: syn keyword cssColor contained slategray slategrey snow springgreen steelblue tan
line 124: syn keyword cssColor contained thistle tomato turquoise violet wheat
line 125: syn keyword cssColor contained whitesmoke yellowgreen
line 126: 
line 127: " FIXME: These are actually case-insentivie too, but (a) specs recommend using
line 128: " mixed-case (b) it's hard to highlight the word `Background' correctly in
line 129: " all situations
line 130: syn case match
line 131: syn keyword cssColor contained ActiveBorder ActiveCaption AppWorkspace ButtonFace ButtonHighlight ButtonShadow ButtonText CaptionText GrayText Highlight HighlightText InactiveBorder InactiveCaption InactiveCaptionText InfoBackground InfoText Menu MenuText Scrollbar ThreeDDarkShadow ThreeDFace ThreeDHighlight ThreeDLightShadow ThreeDShadow Window WindowFrame WindowText Background
line 132: syn case ignore
line 133: 
line 134: syn match cssImportant contained "!\s*important\>"
line 135: 
line 136: syn match cssColor contained "\<transparent\>"
line 137: syn match cssColor contained "\<white\>"
line 138: syn match cssColor contained "#[0-9A-Fa-f]\{3\}\>"
line 139: syn match cssColor contained "#[0-9A-Fa-f]\{6\}\>"
line 140: 
line 141: syn region cssURL contained matchgroup=cssFunctionName start="\<url\s*(" end=")" oneline keepend
line 142: syn region cssFunction contained matchgroup=cssFunctionName start="\<\(rgb\|clip\|attr\|counter\|rect\|cubic-bezier\)\s*(" end=")" oneline keepend
line 143: syn region cssFunction contained matchgroup=cssFunctionName start="\<\(rgba\|hsl\|hsla\)\s*(" end=")" oneline keepend
line 144: syn region cssFunction contained matchgroup=cssFunctionName start="\<\(linear\|radial\)-gradient\s*(" end=")" oneline keepend
line 145: syn region cssFunction contained matchgroup=cssFunctionName start="\<\(matrix\(3d\)\=\|scale\(3d\|X\|Y|\Z\)\=\|translate\(3d\|X\|Y|\Z\)\=\|skew\(X\|Y\)\=\|rotate\(3d\|X\|Y|\Z\)\=\|perspective\)\s*(" end=")" oneline keepend
line 146: 
line 147: " Prop and Attr
line 148: " Reference: http://www.w3schools.com/cssref/default.asp
line 149: syn keyword cssCommonAttr contained auto none inherit all
line 150: syn keyword cssCommonAttr contained top bottom
line 151: syn keyword cssCommonAttr contained medium normal
line 152: 
line 153: 
line 154: syn match cssAnimationProp contained "\<animation\(-\(name\|duration\|timing-function\|delay\|iteration-cout\|play-state\)\)\=\>"
line 155: 
line 156: 
line 157: syn keyword cssAnimationAttr contained infinite alternate paused running
line 158: " bugfix: escape linear-gradient
line 159: syn match cssAnimationAttr contained "\<linear\(-gradient\)\@!\>"
line 160: syn match cssAnimationAttr contained "\<ease\(-\(in-out\|out\|in\)\)\=\>"
line 161: 
line 162: syn match cssBackgroundProp contained "\<background\(-\(color\|image\|attachment\|position\|clip\|origin\|size\)\)\=\>"
line 163: syn keyword cssBackgroundAttr contained center fixed over contain
line 164: syn match cssBackgroundAttr contained "\<no-repeat\>"
line 165: syn match cssBackgroundAttr contained "\<repeat\(-[xy]\)\=\>"
line 166: syn match cssBackgroundAttr contained "\<\(border\|content\|padding\)-box\>"
line 167: 
line 168: 
line 169: syn match cssBorderOutlineProp contained "\<border\(-\(top\|right\|bottom\|left\)\)\=\(-\(width\|color\|style\)\)\=\>"
line 170: syn match cssBorderOutlineProp contained "\<outline\(-\(width\|style\|color\)\)\=\>"
line 171: syn match cssBorderOutlineProp contained "\<border-\(top\|bottom\)-\(left\|right\)\(-radius\)\=\>"
line 172: syn match cssBorderOutlineProp contained "\<border-image\(-\(outset\|repeat\|slice\|source\|width\)\)\=\>"
line 173: syn match cssBorderOutlineProp contained "\<border-radius\>"
line 174: syn keyword cssBorderOutlineAttr contained thin thick medium
line 175: syn keyword cssBorderOutlineAttr contained dotted dashed solid double groove ridge inset outset
line 176: syn keyword cssBorderOutlineAttr contained hidden visible scroll collapse
line 177: syn keyword cssBorderOutlineAttr contained stretch round
line 178: 
line 179: 
line 180: syn match cssBoxProp contained "\<overflow\(-\(x\|y\|style\)\)\=\>"
line 181: syn match cssBoxProp contained "\<rotation\(-point\)=\>"
line 182: syn keyword cssBoxAttr contained visible hidden scroll auto
line 183: syn match cssBoxAttr contained "\<no-\(display\|content\)\>"
line 184: 
line 185: syn keyword cssColorProp contained opacity
line 186: syn match cssColorProp contained "\<color-profile\>"
line 187: syn match cssColorProp contained "\<rendering-intent\>"
line 188: 
line 189: 
line 190: syn match cssDimensionProp contained "\<\(min\|max\)-\(width\|height\)\>"
line 191: syn keyword cssDimensionProp contained height
line 192: syn keyword cssDimensionProp contained width
line 193: 
line 194: " shadow and sizing are in other property groups
line 195: syn match cssFlexibleBoxProp contained "\<box-\(align\|direction\|flex\|ordinal-group\|orient\|pack\|shadow\|sizing\)\>"
line 196: syn keyword cssFlexibleBoxAttr contained start end center baseline stretch
line 197: syn keyword cssFlexibleBoxAttr contained normal reverse
line 198: syn keyword cssFlexibleBoxAttr contained single mulitple
line 199: syn keyword cssFlexibleBoxAttr contained horizontal
line 200: " bugfix: escape vertial-align
line 201: syn match cssFlexibleBoxAttr contained "\<vertical\(-align\)\@!\>"
line 202: syn match cssFlexibleBoxAttr contained "\<\(inline\|block\)-axis\>"
line 203: 
line 204: 
line 205: syn match cssFontProp contained "\<font\(-\(family\|style\|variant\|weight\|size\(-adjust\)\=\|stretch\)\)\=\>"
line 206: syn match cssFontAttr contained "\<\(sans-\)\=\<serif\>"
line 207: syn match cssFontAttr contained "\<small\(-\(caps\|caption\)\)\=\>"
line 208: syn match cssFontAttr contained "\<x\{1,2\}-\(large\|small\)\>"
line 209: syn match cssFontAttr contained "\<message-box\>"
line 210: syn match cssFontAttr contained "\<status-bar\>"
line 211: syn match cssFontAttr contained "\<\(\(ultra\|extra\|semi\|status-bar\)-\)\=\(condensed\|expanded\)\>"
line 212: syn keyword cssFontAttr contained cursive fantasy monospace italic oblique
line 213: syn keyword cssFontAttr contained bold bolder light lighter larger smaller
line 214: syn keyword cssFontAttr contained icon menu caption
line 215: syn keyword cssFontAttr contained large smaller larger narrower wider
line 216: syn keyword cssFontAttr contained Courier Arial Georgia Times
line 217: 
line 218: 
line 219: syn keyword cssGeneratedContentProp contained content quotes crop
line 220: syn match cssGeneratedContentProp contained "\<counter-\(reset\|increment\)\>"
line 221: syn match cssGeneratedContentProp contained "\<move-to\>"
line 222: syn match cssGeneratedContentProp contained "\<page-policy\>"
line 223: syn match cssGeneratedContentAttr contained "\<\(no-\)\=\(open\|close\)-quote\>"
line 224: 
line 225: 
line 226: syn match cssGridProp contained "\<grid-\(columns\|rows\)\>"
line 227: 
line 228: syn match cssHyerlinkProp contained "\<target\(-\(name\|new\|position\)\)\=\>"
line 229: 
line 230: syn match cssListProp contained "\<list-style\(-\(type\|position\|image\)\)\=\>"
line 231: syn match cssListAttr contained "\<\(lower\|upper\)-\(roman\|alpha\|greek\|latin\)\>"
line 232: syn match cssListAttr contained "\<\(hiragana\|katakana\)\(-iroha\)\=\>"
line 233: syn match cssListAttr contained "\<\(decimal\(-leading-zero\)\=\|cjk-ideographic\)\>"
line 234: syn keyword cssListAttr contained disc circle square hebrew armenian georgian
line 235: syn keyword cssListAttr contained inside outside
line 236: 
line 237: 
line 238: syn match cssMarginProp contained "\<margin\(-\(top\|right\|bottom\|left\)\)\=\>"
line 239: 
line 240: syn match cssMultiColumnProp contained "\<column\(-\(\break-\(after\|before\)\|count\|gap\|rule\(-\(color\|style\|width\)\)\=\)\|span\|width\)\=\>"
line 241: 
line 242: 
line 243: syn match cssPaddingProp contained "\<padding\(-\(top\|right\|bottom\|left\)\)\=\>"
line 244: 
line 245: syn keyword cssPositioningProp contained bottom clear clip display float left
line 246: syn keyword cssPositioningProp contained position right top visibility
line 247: syn match cssPositioningProp contained "\<z-index\>"
line 248: syn keyword cssPositioningAttr contained block inline compact
line 249: syn match cssPositioningAttr contained "\<table\(-\(row-gorup\|\(header\|footer\)-group\|row\|column\(-group\)\=\|cell\|caption\)\)\=\>"
line 250: syn keyword cssPositioningAttr contained left right both
line 251: syn match cssPositioningAttr contained "\<list-item\>"
line 252: syn match cssPositioningAttr contained "\<inline-\(block\|table\)\>"
line 253: syn keyword cssPositioningAttr contained static relative absolute fixed
line 254: 
line 255: syn match cssPrintProp contained "\<page\(-break-\(before\|after\|inside\)\)\=\>"
line 256: syn keyword cssPrintProp contained orphans widows
line 257: syn keyword cssPrintAttr contained landscape portrait crop cross always avoid
line 258: 
line 259: syn match cssTableProp contained "\<\(caption-side\|table-layout\|border-collapse\|border-spacing\|empty-cells\)\>"
line 260: syn keyword cssTableAttr contained fixed collapse separate show hide once always
line 261: 
line 262: 
line 263: syn keyword cssTextProp contained color direction
line 264: syn match cssTextProp "\<\(\(word\|letter\)-spacing\|text\(-\(decoration\|transform\|align\|index\|shadow\)\)\=\|vertical-align\|unicode-bidi\|line-height\)\>"
line 265: syn match cssTextProp contained "\<text-\(justify\|\outline\|overflow\|warp\|align-last\)\>"
line 266: syn match cssTextProp contained "\<word-\(break\|\wrap\)\>"
line 267: syn match cssTextProp contained "\<white-space\>"
line 268: syn match cssTextProp contained "\<hanging-punctuation\>"
line 269: syn match cssTextProp contained "\<punctuation-trim\>"
line 270: syn match cssTextAttr contained "\<line-through\>"
line 271: syn match cssTextAttr contained "\<text-indent\>"
line 272: syn match cssTextAttr contained "\<\(text-\)\=\(top\|bottom\)\>"
line 273: syn keyword cssTextAttr contained ltr rtl embed nowrap
line 274: syn keyword cssTextAttr contained underline overline blink sub super middle
line 275: syn keyword cssTextAttr contained capitalize uppercase lowercase
line 276: syn keyword cssTextAttr contained center justify baseline sub super
line 277: syn match cssTextAttr contained "\<pre\(-\(line\|wrap\)\)\=\>"
line 278: syn match cssTextAttr contained "\<\(allow\|force\)-end\>"
line 279: syn keyword cssTextAttr contained start end adjacent
line 280: syn match cssTextAttr contained "\<inter-\(word\|ideographic\|cluster\)\>"
line 281: syn keyword cssTextAttr contained distribute kashida first last
line 282: syn keyword cssTextAttr contained clip ellipsis unrestricted suppress
line 283: syn match cssTextAttr contained "\<break-all\>"
line 284: syn match cssTextAttr contained "\<break-word\>"
line 285: syn keyword cssTextAttr contained hyphenate
line 286: 
line 287: 
line 288: syn match cssTransformProp contained "\<transform\(-\(origin\|style\)\)\=\>"
line 289: syn match cssTransformProp contained "\<perspective\(-origin\)\=\>"
line 290: syn match cssTransformProp contained "\<backface-visibility\>"
line 291: 
line 292: syn match cssTransitionProp contained "\<transition\(-\(delay\|duration\|property\|timing-function\)\)\=\>"
line 293: 
line 294: syn match cssUIProp contained "\<nav-\(down\|index\|left\|right\|up\)\=\>"
line 295: syn match cssUIProp contained "\<outline-offset\>"
line 296: syn match cssUIProp contained "\<box-sizing\>"
line 297: syn keyword cssUIProp contained appearance icon resize
line 298: syn keyword cssUIAttr contained window button menu field
line 299: 
line 300: syn match cssAuralProp contained "\<\(pause\|cue\)\(-\(before\|after\)\)\=\>"
line 301: syn match cssAuralProp contained "\<\(play-during\|speech-rate\|voice-family\|pitch\(-range\)\=\|speak\(-\(punctuation\|numerals\)\)\=\)\>"
line 302: syn keyword cssAuralProp contained volume during azimuth elevation stress richness
line 303: syn match cssAuralAttr contained "\<\(x-\)\=\(soft\|loud\)\>"
line 304: syn keyword cssAuralAttr contained silent
line 305: syn match cssAuralAttr contained "\<spell-out\>"
line 306: syn keyword cssAuralAttr contained non mix
line 307: syn match cssAuralAttr contained "\<\(left\|right\)-side\>"
line 308: syn match cssAuralAttr contained "\<\(far\|center\)-\(left\|center\|right\)\>"
line 309: syn keyword cssAuralAttr contained leftwards rightwards behind
line 310: syn keyword cssAuralAttr contained below level above higher
line 311: syn match cssAuralAttr contained "\<\(x-\)\=\(slow\|fast\)\>"
line 312: syn keyword cssAuralAttr contained faster slower
line 313: syn keyword cssAuralAttr contained male female child code digits continuous
line 314: syn match cssAuralAttr contained "\<lower\>"
line 315: 
line 316: " cursor
line 317: syn keyword cssUIProp contained cursor
line 318: syn match cssUIAttr contained "\<[ns]\=[ew]\=-resize\>"
line 319: syn keyword cssUIAttr contained crosshair default help move pointer
line 320: syn keyword cssUIAttr contained progress wait
line 321: 
line 322: " FIXME: I could not find them in reference
line 323: syn keyword cssUIAttr contained invert maker size zoom
line 324: syn match cssRenderAttr contained "\<run-in\>"
line 325: syn match cssRenderAttr contained "\<text-rendering\>"
line 326: syn match cssRenderAttr contained "\<font-smoothing\>"
line 327: syn match cssRenderProp contained "\<marker-offset\>"
line 328: syn match cssRenderAttr contained "\<bidi-override\>"
line 329: 
line 330: 
line 331: " FIXME: This allows cssMediaBlock before the semicolon, which is wrong.
line 332: syn region cssInclude start="@import" end=";" contains=cssComment,cssURL,cssUnicodeEscape,cssMediaType
line 333: syn match cssBraces contained "[{}]"
line 334: syn match cssError contained "{@<>"
line 335: syn region cssDefinition transparent matchgroup=cssBraces start='{' end='}' contains=css.*Attr,css.*Prop,cssComment,cssValue.*,cssColor,cssURL,cssImportant,cssError,cssStringQ,cssStringQQ,cssFunction,cssUnicodeEscape,cssVendor,cssDefinition
line 336: syn match cssBraceError "}"
line 337: 
line 338: " Pseudo class
line 339: syn match cssPseudoClass ":[A-Za-z0-9_-]*" contains=cssPseudoClassId,cssUnicodeEscape
line 340: syn keyword cssPseudoClassId link visited active hover focus before after left right lang
line 341: syn match cssPseudoClassId contained "\<first\(-\(line\|letter\|child\)\)\=\>"
line 342: " FIXME: handle functions.
line 343: "syn region cssPseudoClassLang matchgroup=cssPseudoClassId start="lang(" end=")"
line 344: syn match cssPseudoClassId contained "\<\(last\|only\|nth\|nth-last\)-child\>"
line 345: syn match cssPseudoClassId contained "\<\(first\|last\|only\|nth\|nth-last\)-of-type\>"
line 346: syn keyword cssPseudoClassId root empty target enable disabled checked not invalid
line 347: syn match cssPseudoClassId contained  "::\(-moz-\)\=selection"
line 348: 
line 349: " Comment
line 350: syn region cssComment start="/\*" end="\*/" contains=@Spell
line 351: syn region cssComment start="//" skip="\\$" end="$" keepend contains=@Spell
line 352: 
line 353: syn match cssUnicodeEscape "\\\x\{1,6}\s\?"
line 354: syn match cssSpecialCharQQ +\\"+ contained
line 355: syn match cssSpecialCharQ +\\'+ contained
line 356: syn region cssStringQQ start=+"+ skip=+\\\\\|\\"+ end=+"+ contains=cssUnicodeEscape,cssSpecialCharQQ
line 357: syn region cssStringQ start=+'+ skip=+\\\\\|\\'+ end=+'+ contains=cssUnicodeEscape,cssSpecialCharQ
line 358: 
line 359: " Vendor Prefix
line 360: syn match cssVendor contained "\(-\(webkit\|moz\|o\|ms\)-\)"
line 361: 
line 362: 
line 363: if main_syntax == "css"
line 364:   syn sync minlines=10
line 365: endif
line 366: 
line 367: " Define the default highlighting.
line 368: " For version 5.7 and earlier: only when not done already
line 369: " For version 5.8 and later: only when an item doesn't have highlighting yet
line 370: if version >= 508 || !exists("did_css_syn_inits")
line 371:   if version < 508
line 372:     let did_css_syn_inits = 1
line 373:     command -nargs=+ HiLink hi link <args>
line 374:   else
line 375:     command -nargs=+ HiLink hi def link <args>
line 376:   endif
line 377: 
line 378:   HiLink cssComment Comment
line 378: hi def link cssComment Comment
line 379:   HiLink cssVendor Comment
line 379: hi def link cssVendor Comment
line 380:   HiLink cssTagName Statement
line 380: hi def link cssTagName Statement
line 381:   HiLink cssDeprecated Error
line 381: hi def link cssDeprecated Error
line 382:   HiLink cssSelectorOp Special
line 382: hi def link cssSelectorOp Special
line 383:   HiLink cssSelectorOp2 Special
line 383: hi def link cssSelectorOp2 Special
line 384: 
line 385:   HiLink cssAnimationProp StorageClass
line 385: hi def link cssAnimationProp StorageClass
line 386:   HiLink cssBackgroundProp StorageClass
line 386: hi def link cssBackgroundProp StorageClass
line 387:   HiLink cssBorderOutlineProp StorageClass
line 387: hi def link cssBorderOutlineProp StorageClass
line 388:   HiLink cssBoxProp StorageClass
line 388: hi def link cssBoxProp StorageClass
line 389:   HiLink cssColorProp StorageClass
line 389: hi def link cssColorProp StorageClass
line 390:   HiLink cssContentForPagedMediaProp StorageClass
line 390: hi def link cssContentForPagedMediaProp StorageClass
line 391:   HiLink cssDimensionProp StorageClass
line 391: hi def link cssDimensionProp StorageClass
line 392:   HiLink cssFlexibleBoxProp StorageClass
line 392: hi def link cssFlexibleBoxProp StorageClass
line 393:   HiLink cssFontProp StorageClass
line 393: hi def link cssFontProp StorageClass
line 394:   HiLink cssGeneratedContentProp StorageClass
line 394: hi def link cssGeneratedContentProp StorageClass
line 395:   HiLink cssGridProp StorageClass
line 395: hi def link cssGridProp StorageClass
line 396:   HiLink cssHyerlinkProp StorageClass
line 396: hi def link cssHyerlinkProp StorageClass
line 397:   HiLink cssLineboxProp StorageClass
line 397: hi def link cssLineboxProp StorageClass
line 398:   HiLink cssListProp StorageClass
line 398: hi def link cssListProp StorageClass
line 399:   HiLink cssMarginProp StorageClass
line 399: hi def link cssMarginProp StorageClass
line 400:   HiLink cssMarqueeProp StorageClass
line 400: hi def link cssMarqueeProp StorageClass
line 401:   HiLink cssMultiColumnProp StorageClass
line 401: hi def link cssMultiColumnProp StorageClass
line 402:   HiLink cssPaddingProp StorageClass
line 402: hi def link cssPaddingProp StorageClass
line 403:   HiLink cssPagedMediaProp StorageClass
line 403: hi def link cssPagedMediaProp StorageClass
line 404:   HiLink cssPositioningProp StorageClass
line 404: hi def link cssPositioningProp StorageClass
line 405:   HiLink cssPrintProp StorageClass
line 405: hi def link cssPrintProp StorageClass
line 406:   HiLink cssRubyProp StorageClass
line 406: hi def link cssRubyProp StorageClass
line 407:   HiLink cssSpeechProp StorageClass
line 407: hi def link cssSpeechProp StorageClass
line 408:   HiLink cssTableProp StorageClass
line 408: hi def link cssTableProp StorageClass
line 409:   HiLink cssTextProp StorageClass
line 409: hi def link cssTextProp StorageClass
line 410:   HiLink cssTransformProp StorageClass
line 410: hi def link cssTransformProp StorageClass
line 411:   HiLink cssTransitionProp StorageClass
line 411: hi def link cssTransitionProp StorageClass
line 412:   HiLink cssUIProp StorageClass
line 412: hi def link cssUIProp StorageClass
line 413:   HiLink cssAuralProp StorageClass
line 413: hi def link cssAuralProp StorageClass
line 414:   HiLink cssRenderProp StorageClass
line 414: hi def link cssRenderProp StorageClass
line 415: 
line 416:   HiLink cssAnimationAttr Type
line 416: hi def link cssAnimationAttr Type
line 417:   HiLink cssBackgroundAttr Type
line 417: hi def link cssBackgroundAttr Type
line 418:   HiLink cssBorderOutlineAttr Type
line 418: hi def link cssBorderOutlineAttr Type
line 419:   HiLink cssBoxAttr Type
line 419: hi def link cssBoxAttr Type
line 420:   HiLink cssColorAttr Type
line 420: hi def link cssColorAttr Type
line 421:   HiLink cssContentForPagedMediaAttr Type
line 421: hi def link cssContentForPagedMediaAttr Type
line 422:   HiLink cssDimensionAttr Type
line 422: hi def link cssDimensionAttr Type
line 423:   HiLink cssFlexibleBoxAttr Type
line 423: hi def link cssFlexibleBoxAttr Type
line 424:   HiLink cssFontAttr Type
line 424: hi def link cssFontAttr Type
line 425:   HiLink cssGeneratedContentAttr Type
line 425: hi def link cssGeneratedContentAttr Type
line 426:   HiLink cssGridAttr Type
line 426: hi def link cssGridAttr Type
line 427:   HiLink cssHyerlinkAttr Type
line 427: hi def link cssHyerlinkAttr Type
line 428:   HiLink cssLineboxAttr Type
line 428: hi def link cssLineboxAttr Type
line 429:   HiLink cssListAttr Type
line 429: hi def link cssListAttr Type
line 430:   HiLink cssMarginAttr Type
line 430: hi def link cssMarginAttr Type
line 431:   HiLink cssMarqueeAttr Type
line 431: hi def link cssMarqueeAttr Type
line 432:   HiLink cssMultiColumnAttr Type
line 432: hi def link cssMultiColumnAttr Type
line 433:   HiLink cssPaddingAttr Type
line 433: hi def link cssPaddingAttr Type
line 434:   HiLink cssPagedMediaAttr Type
line 434: hi def link cssPagedMediaAttr Type
line 435:   HiLink cssPositioningAttr Type
line 435: hi def link cssPositioningAttr Type
line 436:   HiLink cssPrintAttr Type
line 436: hi def link cssPrintAttr Type
line 437:   HiLink cssRubyAttr Type
line 437: hi def link cssRubyAttr Type
line 438:   HiLink cssSpeechAttr Type
line 438: hi def link cssSpeechAttr Type
line 439:   HiLink cssTableAttr Type
line 439: hi def link cssTableAttr Type
line 440:   HiLink cssTextAttr Type
line 440: hi def link cssTextAttr Type
line 441:   HiLink cssTransformAttr Type
line 441: hi def link cssTransformAttr Type
line 442:   HiLink cssTransitionAttr Type
line 442: hi def link cssTransitionAttr Type
line 443:   HiLink cssUIAttr Type
line 443: hi def link cssUIAttr Type
line 444:   HiLink cssAuralAttr Type
line 444: hi def link cssAuralAttr Type
line 445:   HiLink cssRenderAttr Type
line 445: hi def link cssRenderAttr Type
line 446:   HiLink cssCommonAttr Type
line 446: hi def link cssCommonAttr Type
line 447: 
line 448:   HiLink cssPseudoClassId PreProc
line 448: hi def link cssPseudoClassId PreProc
line 449:   HiLink cssPseudoClassLang Constant
line 449: hi def link cssPseudoClassLang Constant
line 450:   HiLink cssValueLength Number
line 450: hi def link cssValueLength Number
line 451:   HiLink cssValueInteger Number
line 451: hi def link cssValueInteger Number
line 452:   HiLink cssValueNumber Number
line 452: hi def link cssValueNumber Number
line 453:   HiLink cssValueAngle Number
line 453: hi def link cssValueAngle Number
line 454:   HiLink cssValueTime Number
line 454: hi def link cssValueTime Number
line 455:   HiLink cssValueFrequency Number
line 455: hi def link cssValueFrequency Number
line 456:   HiLink cssFunction Constant
line 456: hi def link cssFunction Constant
line 457:   HiLink cssURL String
line 457: hi def link cssURL String
line 458:   HiLink cssFunctionName Function
line 458: hi def link cssFunctionName Function
line 459:   HiLink cssColor Constant
line 459: hi def link cssColor Constant
line 460:   HiLink cssIdentifier Function
line 460: hi def link cssIdentifier Function
line 461:   HiLink cssInclude Include
line 461: hi def link cssInclude Include
line 462:   HiLink cssImportant Special
line 462: hi def link cssImportant Special
line 463:   HiLink cssBraces Function
line 463: hi def link cssBraces Function
line 464:   HiLink cssBraceError Error
line 464: hi def link cssBraceError Error
line 465:   HiLink cssError Error
line 465: hi def link cssError Error
line 466:   HiLink cssInclude Include
line 466: hi def link cssInclude Include
line 467:   HiLink cssUnicodeEscape Special
line 467: hi def link cssUnicodeEscape Special
line 468:   HiLink cssStringQQ String
line 468: hi def link cssStringQQ String
line 469:   HiLink cssStringQ String
line 469: hi def link cssStringQ String
line 470:   HiLink cssMedia Special
line 470: hi def link cssMedia Special
line 471:   HiLink cssMediaType Special
line 471: hi def link cssMediaType Special
line 472:   HiLink cssMediaComma Normal
line 472: hi def link cssMediaComma Normal
line 473:   HiLink cssFontDescriptor Special
line 473: hi def link cssFontDescriptor Special
line 474:   HiLink cssFontDescriptorFunction Constant
line 474: hi def link cssFontDescriptorFunction Constant
line 475:   HiLink cssFontDescriptorProp StorageClass
line 475: hi def link cssFontDescriptorProp StorageClass
line 476:   HiLink cssFontDescriptorAttr Type
line 476: hi def link cssFontDescriptorAttr Type
line 477:   HiLink cssUnicodeRange Constant
line 477: hi def link cssUnicodeRange Constant
line 478:   HiLink cssClassName Function
line 478: hi def link cssClassName Function
line 479:   delcommand HiLink
line 480: endif
line 481: 
line 482: let b:current_syntax = "css"
line 483: 
line 484: if main_syntax == 'css'
line 485:   unlet main_syntax
line 486: endif
line 487: 
line 488: let &cpo = s:cpo_save
line 489: unlet s:cpo_save
line 490: " vim: ts=8
line 491: 
finished sourcing /usr/share/vim/vim74/syntax/css.vim
continuing in /usr/share/vim/vim74/syntax/html.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/css.vim"
Searching for "/var/lib/vim/addons/after/syntax/css.vim"
Searching for "/home/kguest/.vim/after/syntax/css.vim"
line 205:   unlet b:current_syntax
line 206:   syn region cssStyle start=+<style+ keepend end=+</style>+ contains=@htmlCss,htmlTag,htmlEndTag,htmlCssStyleComment,@htmlPreproc
line 207:   syn match htmlCssStyleComment contained "\(<!--\|-->\)"
line 208:   syn region htmlCssDefinition matchgroup=htmlArg start='style="' keepend matchgroup=htmlString end='"' contains=css.*Attr,css.*Prop,cssComment,cssLength,cssColor,cssURL,cssImportant,cssError,cssString,@htmlPreproc
line 209:   HtmlHiLink htmlStyleArg htmlString
line 209: hi def link htmlStyleArg htmlString
line 210: endif
line 211: 
line 212: if main_syntax == "html"
line 213:   " synchronizing (does not always work if a comment includes legal
line 214:   " html tags, but doing it right would mean to always start
line 215:   " at the first line, which is too slow)
line 216:   syn sync match htmlHighlight groupthere NONE "<[/a-zA-Z]"
line 217:   syn sync match htmlHighlight groupthere javaScript "<script"
line 218:   syn sync match htmlHighlightSkip "^.*['\"].*$"
line 219:   syn sync minlines=10
line 220: endif
line 221: 
line 222: " The default highlighting.
line 223: if version >= 508 || !exists("did_html_syn_inits")
line 224:   if version < 508
line 225:     let did_html_syn_inits = 1
line 226:   endif
line 227:   HtmlHiLink htmlTag                     Function
line 227: hi def link htmlTag                     Function
line 228:   HtmlHiLink htmlEndTag                  Identifier
line 228: hi def link htmlEndTag                  Identifier
line 229:   HtmlHiLink htmlArg                     Type
line 229: hi def link htmlArg                     Type
line 230:   HtmlHiLink htmlTagName                 htmlStatement
line 230: hi def link htmlTagName                 htmlStatement
line 231:   HtmlHiLink htmlSpecialTagName          Exception
line 231: hi def link htmlSpecialTagName          Exception
line 232:   HtmlHiLink htmlValue                     String
line 232: hi def link htmlValue                     String
line 233:   HtmlHiLink htmlSpecialChar             Special
line 233: hi def link htmlSpecialChar             Special
line 234:   
line 235:   if !exists("html_no_rendering")
line 236:     HtmlHiLink htmlH1                      Title
line 236: hi def link htmlH1                      Title
line 237:     HtmlHiLink htmlH2                      htmlH1
line 237: hi def link htmlH2                      htmlH1
line 238:     HtmlHiLink htmlH3                      htmlH2
line 238: hi def link htmlH3                      htmlH2
line 239:     HtmlHiLink htmlH4                      htmlH3
line 239: hi def link htmlH4                      htmlH3
line 240:     HtmlHiLink htmlH5                      htmlH4
line 240: hi def link htmlH5                      htmlH4
line 241:     HtmlHiLink htmlH6                      htmlH5
line 241: hi def link htmlH6                      htmlH5
line 242:     HtmlHiLink htmlHead                    PreProc
line 242: hi def link htmlHead                    PreProc
line 243:     HtmlHiLink htmlTitle                   Title
line 243: hi def link htmlTitle                   Title
line 244:     HtmlHiLink htmlBoldItalicUnderline     htmlBoldUnderlineItalic
line 244: hi def link htmlBoldItalicUnderline     htmlBoldUnderlineItalic
line 245:     HtmlHiLink htmlUnderlineBold           htmlBoldUnderline
line 245: hi def link htmlUnderlineBold           htmlBoldUnderline
line 246:     HtmlHiLink htmlUnderlineItalicBold     htmlBoldUnderlineItalic
line 246: hi def link htmlUnderlineItalicBold     htmlBoldUnderlineItalic
line 247:     HtmlHiLink htmlUnderlineBoldItalic     htmlBoldUnderlineItalic
line 247: hi def link htmlUnderlineBoldItalic     htmlBoldUnderlineItalic
line 248:     HtmlHiLink htmlItalicUnderline         htmlUnderlineItalic
line 248: hi def link htmlItalicUnderline         htmlUnderlineItalic
line 249:     HtmlHiLink htmlItalicBold              htmlBoldItalic
line 249: hi def link htmlItalicBold              htmlBoldItalic
line 250:     HtmlHiLink htmlItalicBoldUnderline     htmlBoldUnderlineItalic
line 250: hi def link htmlItalicBoldUnderline     htmlBoldUnderlineItalic
line 251:     HtmlHiLink htmlItalicUnderlineBold     htmlBoldUnderlineItalic
line 251: hi def link htmlItalicUnderlineBold     htmlBoldUnderlineItalic
line 252:     HtmlHiLink htmlLink                    Underlined
line 252: hi def link htmlLink                    Underlined
line 253:     HtmlHiLink htmlLeadingSpace            None
line 253: hi def link htmlLeadingSpace            None
line 254:     if !exists("html_my_rendering")
line 255:       hi def htmlBold                term=bold cterm=bold gui=bold
line 256:       hi def htmlBoldUnderline       term=bold,underline cterm=bold,underline gui=bold,underline
line 257:       hi def htmlBoldItalic          term=bold,italic cterm=bold,italic gui=bold,italic
line 258:       hi def htmlBoldUnderlineItalic term=bold,italic,underline cterm=bold,italic,underline gui=bold,italic,underline
line 259:       hi def htmlUnderline           term=underline cterm=underline gui=underline
line 260:       hi def htmlUnderlineItalic     term=italic,underline cterm=italic,underline gui=italic,underline
line 261:       hi def htmlItalic              term=italic cterm=italic gui=italic
line 262:     endif
line 263:   endif
line 264:   
line 265:   HtmlHiLink htmlPreStmt            PreProc
line 265: hi def link htmlPreStmt            PreProc
line 266:   HtmlHiLink htmlPreError           Error
line 266: hi def link htmlPreError           Error
line 267:   HtmlHiLink htmlPreProc            PreProc
line 267: hi def link htmlPreProc            PreProc
line 268:   HtmlHiLink htmlPreAttr            String
line 268: hi def link htmlPreAttr            String
line 269:   HtmlHiLink htmlPreProcAttrName    PreProc
line 269: hi def link htmlPreProcAttrName    PreProc
line 270:   HtmlHiLink htmlPreProcAttrError   Error
line 270: hi def link htmlPreProcAttrError   Error
line 271:   HtmlHiLink htmlSpecial            Special
line 271: hi def link htmlSpecial            Special
line 272:   HtmlHiLink htmlSpecialChar        Special
line 272: hi def link htmlSpecialChar        Special
line 273:   HtmlHiLink htmlString             String
line 273: hi def link htmlString             String
line 274:   HtmlHiLink htmlStatement          Statement
line 274: hi def link htmlStatement          Statement
line 275:   HtmlHiLink htmlComment            Comment
line 275: hi def link htmlComment            Comment
line 276:   HtmlHiLink htmlCommentPart        Comment
line 276: hi def link htmlCommentPart        Comment
line 277:   HtmlHiLink htmlValue              String
line 277: hi def link htmlValue              String
line 278:   HtmlHiLink htmlCommentError       htmlError
line 278: hi def link htmlCommentError       htmlError
line 279:   HtmlHiLink htmlTagError           htmlError
line 279: hi def link htmlTagError           htmlError
line 280:   HtmlHiLink htmlEvent              javaScript
line 280: hi def link htmlEvent              javaScript
line 281:   HtmlHiLink htmlError              Error
line 281: hi def link htmlError              Error
line 282:   
line 283:   HtmlHiLink javaScript             Special
line 283: hi def link javaScript             Special
line 284:   HtmlHiLink javaScriptExpression   javaScript
line 284: hi def link javaScriptExpression   javaScript
line 285:   HtmlHiLink htmlCssStyleComment    Comment
line 285: hi def link htmlCssStyleComment    Comment
line 286:   HtmlHiLink htmlCssDefinition      Special
line 286: hi def link htmlCssDefinition      Special
line 287: endif
line 288: 
line 289: delcommand HtmlHiLink
line 290: 
line 291: let b:current_syntax = "html"
line 292: 
line 293: if main_syntax == 'html'
line 294:   unlet main_syntax
line 295: endif
line 296: 
line 297: let &cpo = s:cpo_save
line 298: unlet s:cpo_save
line 299: " vim: ts=8
finished sourcing /usr/share/vim/vim74/syntax/html.vim
continuing in /home/kguest/My-.vim-files/syntax/php.vim
line 63: unlet b:current_syntax
line 64: 
line 65: " Set sync method if none declared
line 66: if !exists("php_sync_method")
line 67:   if exists("php_minlines")
line 68:     let php_sync_method=php_minlines
line 69:   else
line 70:     let php_sync_method=-1
line 71:   endif
line 72: endif
line 73: 
line 74: syn cluster htmlPreproc add=phpRegion
line 75: 
line 76: syn include @sqlTop syntax/sql.vim
Searching for "syntax/sql.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/syntax/sql.vim"
Searching for "/home/kguest/.vim/syntax/sql.vim"
Searching for "/var/lib/vim/addons/syntax/sql.vim"
Searching for "/usr/share/vim/vimfiles/syntax/sql.vim"
Searching for "/usr/share/vim/vim74/syntax/sql.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 76: sourcing "/usr/share/vim/vim74/syntax/sql.vim"
line 1: " Vim syntax file loader
line 2: " Language:    SQL
line 3: " Maintainer:  David Fishburn <fishburn at ianywhere dot com>
line 4: " Last Change: Thu Sep 15 2005 10:30:02 AM
line 5: " Version:     1.0
line 6: 
line 7: " Description: Checks for a:
line 8: "                  buffer local variable,
line 9: "                  global variable,
line 10: "              If the above exist, it will source the type specified.
line 11: "              If none exist, it will source the default sql.vim file.
line 12: "
line 13: " For version 5.x: Clear all syntax items
line 14: " For version 6.x: Quit when a syntax file was already loaded
line 15: if version < 600
line 16:     syntax clear
line 17: elseif exists("b:current_syntax")
line 18:     finish
line 19: endif
line 20: 
line 21: " Default to the standard Vim distribution file
line 22: let filename = 'sqloracle'
line 23: 
line 24: " Check for overrides.  Buffer variables have the highest priority.
line 25: if exists("b:sql_type_override")
line 26:     " Check the runtimepath to see if the file exists
line 27:     if globpath(&runtimepath, 'syntax/'.b:sql_type_override.'.vim') != ''
line 28:         let filename = b:sql_type_override
line 29:     endif
line 30: elseif exists("g:sql_type_default")
line 31:     if globpath(&runtimepath, 'syntax/'.g:sql_type_default.'.vim') != ''
line 32:         let filename = g:sql_type_default
line 33:     endif
line 34: endif
line 35: 
line 36: " Source the appropriate file
line 37: exec 'runtime syntax/'.filename.'.vim'
line 37: runtime syntax/sqloracle.vim
Searching for "syntax/sqloracle.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/syntax/sqloracle.vim"
Searching for "/home/kguest/.vim/syntax/sqloracle.vim"
Searching for "/var/lib/vim/addons/syntax/sqloracle.vim"
Searching for "/usr/share/vim/vimfiles/syntax/sqloracle.vim"
Searching for "/usr/share/vim/vim74/syntax/sqloracle.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 37: sourcing "/usr/share/vim/vim74/syntax/sqloracle.vim"
line 1: " Vim syntax file
line 2: " Language:^ISQL, PL/SQL (Oracle 8i)
line 3: " Maintainer:^IPaul Moore <pf_moore AT yahoo.co.uk>
line 4: " Last Change:^I2005 Dec 23
line 5: 
line 6: " For version 5.x: Clear all syntax items
line 7: " For version 6.x: Quit when a syntax file was already loaded
line 8: if version < 600
line 9:   syntax clear
line 10: elseif exists("b:current_syntax")
line 11:   finish
line 12: endif
line 13: 
line 14: syn case ignore
line 15: 
line 16: " The SQL reserved words, defined as keywords.
line 17: 
line 18: syn keyword sqlSpecial  false null true
line 19: 
line 20: syn keyword sqlKeyword^Iaccess add as asc begin by check cluster column
line 21: syn keyword sqlKeyword^Icompress connect current cursor decimal default desc
line 22: syn keyword sqlKeyword^Ielse elsif end exception exclusive file for from
line 23: syn keyword sqlKeyword^Ifunction group having identified if immediate increment
line 24: syn keyword sqlKeyword^Iindex initial into is level loop maxextents mode modify
line 25: syn keyword sqlKeyword^Inocompress nowait of offline on online start
line 26: syn keyword sqlKeyword^Isuccessful synonym table then to trigger uid
line 27: syn keyword sqlKeyword^Iunique user validate values view whenever
line 28: syn keyword sqlKeyword^Iwhere with option order pctfree privileges procedure
line 29: syn keyword sqlKeyword^Ipublic resource return row rowlabel rownum rows
line 30: syn keyword sqlKeyword^Isession share size smallint type using
line 31: 
line 32: syn keyword sqlOperator^Inot and or
line 33: syn keyword sqlOperator^Iin any some all between exists
line 34: syn keyword sqlOperator^Ilike escape
line 35: syn keyword sqlOperator union intersect minus
line 36: syn keyword sqlOperator prior distinct
line 37: syn keyword sqlOperator^Isysdate out
line 38: 
line 39: syn keyword sqlStatement alter analyze audit comment commit create
line 40: syn keyword sqlStatement delete drop execute explain grant insert lock noaudit
line 41: syn keyword sqlStatement rename revoke rollback savepoint select set
line 42: syn keyword sqlStatement truncate update
line 43: 
line 44: syn keyword sqlType^Iboolean char character date float integer long
line 45: syn keyword sqlType^Imlslabel number raw rowid varchar varchar2 varray
line 46: 
line 47: " Strings and characters:
line 48: syn region sqlString^I^Istart=+"+  skip=+\\\\\|\\"+  end=+"+
line 49: syn region sqlString^I^Istart=+'+  skip=+\\\\\|\\'+  end=+'+
line 50: 
line 51: " Numbers:
line 52: syn match sqlNumber^I^I"-\=\<\d*\.\=[0-9_]\>"
line 53: 
line 54: " Comments:
line 55: syn region sqlComment    start="/\*"  end="\*/" contains=sqlTodo
line 56: syn match sqlComment^I"--.*$" contains=sqlTodo
line 57: 
line 58: syn sync ccomment sqlComment
line 59: 
line 60: " Todo.
line 61: syn keyword sqlTodo contained TODO FIXME XXX DEBUG NOTE
line 62: 
line 63: " Define the default highlighting.
line 64: " For version 5.7 and earlier: only when not done already
line 65: " For version 5.8 and later: only when an item doesn't have highlighting yet
line 66: if version >= 508 || !exists("did_sql_syn_inits")
line 67:   if version < 508
line 68:     let did_sql_syn_inits = 1
line 69:     command -nargs=+ HiLink hi link <args>
line 70:   else
line 71:     command -nargs=+ HiLink hi def link <args>
line 72:   endif
line 73: 
line 74:   HiLink sqlComment^IComment
line 74: hi def link sqlComment^IComment
line 75:   HiLink sqlKeyword^IsqlSpecial
line 75: hi def link sqlKeyword^IsqlSpecial
line 76:   HiLink sqlNumber^INumber
line 76: hi def link sqlNumber^INumber
line 77:   HiLink sqlOperator^IsqlStatement
line 77: hi def link sqlOperator^IsqlStatement
line 78:   HiLink sqlSpecial^ISpecial
line 78: hi def link sqlSpecial^ISpecial
line 79:   HiLink sqlStatement^IStatement
line 79: hi def link sqlStatement^IStatement
line 80:   HiLink sqlString^IString
line 80: hi def link sqlString^IString
line 81:   HiLink sqlType^IType
line 81: hi def link sqlType^IType
line 82:   HiLink sqlTodo^ITodo
line 82: hi def link sqlTodo^ITodo
line 83: 
line 84:   delcommand HiLink
line 85: endif
line 86: 
line 87: let b:current_syntax = "sql"
line 88: 
line 89: " vim: ts=8
finished sourcing /usr/share/vim/vim74/syntax/sqloracle.vim
continuing in /usr/share/vim/vim74/syntax/sql.vim
line 38: 
line 39: " vim:sw=4:
finished sourcing /usr/share/vim/vim74/syntax/sql.vim
continuing in /home/kguest/My-.vim-files/syntax/php.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/sql.vim"
Searching for "/var/lib/vim/addons/after/syntax/sql.vim"
Searching for "/home/kguest/.vim/after/syntax/sql.vim"
line 77: 
line 78: syn sync clear
line 79: unlet b:current_syntax
line 80: syn cluster sqlTop remove=sqlString,sqlComment
line 81: if exists("php_sql_query")
line 82:   syn cluster phpAddStrings contains=@sqlTop
line 83: endif
line 84: 
line 85: if exists("php_html_in_strings")
line 86:   syn cluster phpAddStrings add=@htmlTop
line 87: endif
line 88: 
line 89: syn case match
line 90:  
line 91: " Superblobals
line 92: syn keyword phpSuperglobals GLOBALS _GET _POST _REQUEST _FILES _COOKIE _SERVER _SESSION _ENV HTTP_RAW_POST_DATA php_errormsg http_response_header argc argv contained
line 93: 
line 94: " Magic Constants
line 95: syn keyword phpMagicConstants __LINE__ __FILE__ __DIR__ __FUNCTION__ __CLASS__ __METHOD__ __NAMESPACE__ contained
line 96: 
line 97: " $_SERVER Variables
line 98: syn keyword phpServerVars GATEWAY_INTERFACE SERVER_NAME SERVER_SOFTWARE SERVER_PROTOCOL REQUEST_METHOD QUERY_STRING DOCUMENT_ROOT HTTP_ACCEPT HTTP_ACCEPT_CHARSET HTTP_ENCODING HTTP_ACCEPT_LANGUAGE HTTP_CONNECTION HTTP_HOST HTTP_REFERER HTTP_USER_AGENT REMOTE_ADDR REMOTE_PORT SCRIPT_FILENAME SERVER_ADMIN SERVER_PORT SERVER_SIGNATURE PATH_TRANSLATED SCRIPT_NAME REQUEST_URI PHP_SELF contained
line 99: 
line 100: " === BEGIN BUILTIN FUNCTIONS, CLASSES, AND CONSTANTS ===================================
line 101: 
line 102: " Core
line 103: syn keyword phpConstants E_ERROR E_RECOVERABLE_ERROR E_WARNING E_PARSE E_NOTICE E_STRICT E_DEPRECATED E_CORE_ERROR E_CORE_WARNING E_COMPILE_ERROR E_COMPILE_WARNING E_USER_ERROR E_USER_WARNING E_USER_NOTICE E_USER_DEPRECATED E_ALL TRUE FALSE NULL ZEND_THREAD_SAFE ZEND_DEBUG_BUILD PHP_VERSION PHP_MAJOR_VERSION PHP_MINOR_VERSION PHP_RELEASE_VERSION PHP_EXTRA_VERSION PHP_VERSION_ID PHP_ZTS PHP_DEBUG PHP_OS PHP_SAPI DEFAULT_INCLUDE_PATH PEAR_INSTALL_DIR PEAR_EXTENSION_DIR PHP_EXTENSION_DIR PHP_PREFIX PHP_BINDIR PHP_LIBDIR PHP_DATADIR PHP_SYSCONFDIR PHP_LOCALSTATEDIR PHP_CONFIG_FILE_PATH PHP_CONFIG_FILE_SCAN_DIR PHP_SHLIB_SUFFIX PHP_EOL PHP_MAXPATHLEN PHP_INT_MAX PHP_INT_SIZE PHP_WINDOWS_VERSION_MAJOR PHP_WINDOWS_VERSION_MINOR PHP_WINDOWS_VERSION_BUILD PHP_WINDOWS_VERSION_PLATFORM PHP_WINDOWS_VERSION_SP_MAJOR PHP_WINDOWS_VERSION_SP_MINOR PHP_WINDOWS_VERSION_SUITEMASK PHP_WINDOWS_VERSION_PRODUCTTYPE PHP_WINDOWS_NT_DOMAIN_CONTROLLER PHP_WINDOWS_NT_SERVER PHP_WINDOWS_NT_WORKSTATION PHP_OUTPUT_HANDLER_START P
line 104: 
line 105: " calendar
line 106: syn keyword phpConstants CAL_GREGORIAN CAL_JULIAN CAL_JEWISH CAL_FRENCH CAL_NUM_CALS CAL_DOW_DAYNO CAL_DOW_SHORT CAL_DOW_LONG CAL_MONTH_GREGORIAN_SHORT CAL_MONTH_GREGORIAN_LONG CAL_MONTH_JULIAN_SHORT CAL_MONTH_JULIAN_LONG CAL_MONTH_JEWISH CAL_MONTH_FRENCH CAL_EASTER_DEFAULT CAL_EASTER_ROMAN CAL_EASTER_ALWAYS_GREGORIAN CAL_EASTER_ALWAYS_JULIAN CAL_JEWISH_ADD_ALAFIM_GERESH CAL_JEWISH_ADD_ALAFIM CAL_JEWISH_ADD_GERESHAYIM contained
line 107: 
line 108: " com_dotnet
line 109: syn keyword phpConstants CLSCTX_INPROC_SERVER CLSCTX_INPROC_HANDLER CLSCTX_LOCAL_SERVER CLSCTX_REMOTE_SERVER CLSCTX_SERVER CLSCTX_ALL VT_NULL VT_EMPTY VT_UI1 VT_I1 VT_UI2 VT_I2 VT_UI4 VT_I4 VT_R4 VT_R8 VT_BOOL VT_ERROR VT_CY VT_DATE VT_BSTR VT_DECIMAL VT_UNKNOWN VT_DISPATCH VT_VARIANT VT_INT VT_UINT VT_ARRAY VT_BYREF CP_ACP CP_MACCP CP_OEMCP CP_UTF7 CP_UTF8 CP_SYMBOL CP_THREAD_ACP VARCMP_LT VARCMP_EQ VARCMP_GT VARCMP_NULL NORM_IGNORECASE NORM_IGNORENONSPACE NORM_IGNORESYMBOLS NORM_IGNOREWIDTH NORM_IGNOREKANATYPE DISP_E_DIVBYZERO DISP_E_OVERFLOW DISP_E_BADINDEX MK_E_UNAVAILABLE contained
line 110: 
line 111: " curl
line 112: syn keyword phpConstants CURLOPT_IPRESOLVE CURL_IPRESOLVE_WHATEVER CURL_IPRESOLVE_V4 CURL_IPRESOLVE_V6 CURLOPT_DNS_USE_GLOBAL_CACHE CURLOPT_DNS_CACHE_TIMEOUT CURLOPT_PORT CURLOPT_FILE CURLOPT_READDATA CURLOPT_INFILE CURLOPT_INFILESIZE CURLOPT_URL CURLOPT_PROXY CURLOPT_VERBOSE CURLOPT_HEADER CURLOPT_HTTPHEADER CURLOPT_NOPROGRESS CURLOPT_PROGRESSFUNCTION CURLOPT_NOBODY CURLOPT_FAILONERROR CURLOPT_UPLOAD CURLOPT_POST CURLOPT_FTPLISTONLY CURLOPT_FTPAPPEND CURLOPT_NETRC CURLOPT_FOLLOWLOCATION CURLOPT_PUT CURLOPT_USERPWD CURLOPT_PROXYUSERPWD CURLOPT_RANGE CURLOPT_TIMEOUT CURLOPT_TIMEOUT_MS CURLOPT_POSTFIELDS CURLOPT_REFERER CURLOPT_USERAGENT CURLOPT_FTPPORT CURLOPT_FTP_USE_EPSV CURLOPT_LOW_SPEED_LIMIT CURLOPT_LOW_SPEED_TIME CURLOPT_RESUME_FROM CURLOPT_COOKIE CURLOPT_COOKIESESSION CURLOPT_AUTOREFERER CURLOPT_SSLCERT CURLOPT_SSLCERTPASSWD CURLOPT_WRITEHEADER CURLOPT_SSL_VERIFYHOST CURLOPT_COOKIEFILE CURLOPT_SSLVERSION CURLOPT_TIMECONDITION CURLOPT_TIMEVALUE CURLOPT_CUSTOMREQUEST CURLOPT_STDERR CURLOPT_TRANS
line 113: 
line 114: " date
line 115: syn keyword phpConstants  DATE_ATOM DATE_COOKIE DATE_ISO8601 DATE_RFC822 DATE_RFC850 DATE_RFC1036 DATE_RFC1123 DATE_RFC2822 DATE_RFC3339 DATE_RSS DATE_W3C SUNFUNCS_RET_TIMESTAMP SUNFUNCS_RET_STRING SUNFUNCS_RET_DOUBLE ATOM COOKIE ISO8601 RFC822 RFC850 RFC1036 RFC1123 RFC2822 RFC3339 RSS W3C AFRICA AMERICA ANTARCTICA ARCTIC ASIA ATLANTIC AUSTRALIA EUROPE INDIAN PACIFIC UTC ALL ALL_WITH_BC PER_COUNTRY EXCLUDE_START_DATE contained
line 116: 
line 117: " dom
line 118: syn keyword phpConstants XML_ELEMENT_NODE XML_ATTRIBUTE_NODE XML_TEXT_NODE XML_CDATA_SECTION_NODE XML_ENTITY_REF_NODE XML_ENTITY_NODE XML_PI_NODE XML_COMMENT_NODE XML_DOCUMENT_NODE XML_DOCUMENT_TYPE_NODE XML_DOCUMENT_FRAG_NODE XML_NOTATION_NODE XML_HTML_DOCUMENT_NODE XML_DTD_NODE XML_ELEMENT_DECL_NODE XML_ATTRIBUTE_DECL_NODE XML_ENTITY_DECL_NODE XML_NAMESPACE_DECL_NODE XML_LOCAL_NAMESPACE XML_ATTRIBUTE_CDATA XML_ATTRIBUTE_ID XML_ATTRIBUTE_IDREF XML_ATTRIBUTE_IDREFS XML_ATTRIBUTE_ENTITY XML_ATTRIBUTE_NMTOKEN XML_ATTRIBUTE_NMTOKENS XML_ATTRIBUTE_ENUMERATION XML_ATTRIBUTE_NOTATION DOM_PHP_ERR DOM_INDEX_SIZE_ERR DOMSTRING_SIZE_ERR DOM_HIERARCHY_REQUEST_ERR DOM_WRONG_DOCUMENT_ERR DOM_INVALID_CHARACTER_ERR DOM_NO_DATA_ALLOWED_ERR DOM_NO_MODIFICATION_ALLOWED_ERR DOM_NOT_FOUND_ERR DOM_NOT_SUPPORTED_ERR DOM_INUSE_ATTRIBUTE_ERR DOM_INVALID_STATE_ERR DOM_SYNTAX_ERR DOM_INVALID_MODIFICATION_ERR DOM_NAMESPACE_ERR DOM_INVALID_ACCESS_ERR DOM_VALIDATION_ERR contained
line 119: 
line 120: " exif
line 121: syn keyword phpConstants EXIF_USE_MBSTRING contained
line 122: 
line 123: " fileinfo
line 124: syn keyword phpConstants FILEINFO_NONE FILEINFO_SYMLINK FILEINFO_MIME FILEINFO_MIME_TYPE FILEINFO_MIME_ENCODING FILEINFO_DEVICES FILEINFO_CONTINUE FILEINFO_PRESERVE_ATIME FILEINFO_RAW contained
line 125: 
line 126: " filter
line 127: syn keyword phpConstants INPUT_POST INPUT_GET INPUT_COOKIE INPUT_ENV INPUT_SERVER INPUT_SESSION INPUT_REQUEST FILTER_FLAG_NONE FILTER_REQUIRE_SCALAR FILTER_REQUIRE_ARRAY FILTER_FORCE_ARRAY FILTER_NULL_ON_FAILURE FILTER_VALIDATE_INT FILTER_VALIDATE_BOOLEAN FILTER_VALIDATE_FLOAT FILTER_VALIDATE_REGEXP FILTER_VALIDATE_URL FILTER_VALIDATE_EMAIL FILTER_VALIDATE_IP FILTER_DEFAULT FILTER_UNSAFE_RAW FILTER_SANITIZE_STRING FILTER_SANITIZE_STRIPPED FILTER_SANITIZE_ENCODED FILTER_SANITIZE_SPECIAL_CHARS FILTER_SANITIZE_EMAIL FILTER_SANITIZE_URL FILTER_SANITIZE_NUMBER_INT FILTER_SANITIZE_NUMBER_FLOAT FILTER_SANITIZE_MAGIC_QUOTES FILTER_CALLBACK FILTER_FLAG_ALLOW_OCTAL FILTER_FLAG_ALLOW_HEX FILTER_FLAG_STRIP_LOW FILTER_FLAG_STRIP_HIGH FILTER_FLAG_ENCODE_LOW FILTER_FLAG_ENCODE_HIGH FILTER_FLAG_ENCODE_AMP FILTER_FLAG_NO_ENCODE_QUOTES FILTER_FLAG_EMPTY_STRING_NULL FILTER_FLAG_ALLOW_FRACTION FILTER_FLAG_ALLOW_THOUSAND FILTER_FLAG_ALLOW_SCIENTIFIC FILTER_FLAG_SCHEME_REQUIRED FILTER_FLAG_HOST_REQUIRED FILTER_FLAG_PATH_
line 128: 
line 129: " ftp
line 130: syn keyword phpConstants FTP_ASCII FTP_TEXT FTP_BINARY FTP_IMAGE FTP_AUTORESUME FTP_TIMEOUT_SEC FTP_AUTOSEEK FTP_FAILED FTP_FINISHED FTP_MOREDATA contained
line 131: 
line 132: " gd
line 133: syn keyword phpConstants IMG_GIF IMG_JPG IMG_JPEG IMG_PNG IMG_WBMP IMG_XPM IMG_COLOR_TILED IMG_COLOR_STYLED IMG_COLOR_BRUSHED IMG_COLOR_STYLEDBRUSHED IMG_COLOR_TRANSPARENT IMG_ARC_ROUNDED IMG_ARC_PIE IMG_ARC_CHORD IMG_ARC_NOFILL IMG_ARC_EDGED IMG_GD2_RAW IMG_GD2_COMPRESSED IMG_EFFECT_REPLACE IMG_EFFECT_ALPHABLEND IMG_EFFECT_NORMAL IMG_EFFECT_OVERLAY GD_BUNDLED IMG_FILTER_NEGATE IMG_FILTER_GRAYSCALE IMG_FILTER_BRIGHTNESS IMG_FILTER_CONTRAST IMG_FILTER_COLORIZE IMG_FILTER_EDGEDETECT IMG_FILTER_GAUSSIAN_BLUR IMG_FILTER_SELECTIVE_BLUR IMG_FILTER_EMBOSS IMG_FILTER_MEAN_REMOVAL IMG_FILTER_SMOOTH IMG_FILTER_PIXELATE GD_VERSION GD_MAJOR_VERSION GD_MINOR_VERSION GD_RELEASE_VERSION GD_EXTRA_VERSION PNG_NO_FILTER PNG_FILTER_NONE PNG_FILTER_SUB PNG_FILTER_UP PNG_FILTER_AVG PNG_FILTER_PAETH PNG_ALL_FILTERS contained
line 134: 
line 135: " gmp
line 136: syn keyword phpConstants GMP_ROUND_ZERO GMP_ROUND_PLUSINF GMP_ROUND_MINUSINF GMP_VERSION contained
line 137: 
line 138: " hash
line 139: syn keyword phpConstants HASH_HMAC MHASH_CRC32 MHASH_MD5 MHASH_SHA1 MHASH_HAVAL256 MHASH_RIPEMD160 MHASH_TIGER MHASH_GOST MHASH_CRC32B MHASH_HAVAL224 MHASH_HAVAL192 MHASH_HAVAL160 MHASH_HAVAL128 MHASH_TIGER128 MHASH_TIGER160 MHASH_MD4 MHASH_SHA256 MHASH_ADLER32 MHASH_SHA224 MHASH_SHA512 MHASH_SHA384 MHASH_WHIRLPOOL MHASH_RIPEMD128 MHASH_RIPEMD256 MHASH_RIPEMD320 MHASH_SNEFRU256 MHASH_MD2 contained
line 140: 
line 141: " iconv
line 142: syn keyword phpConstants ICONV_IMPL ICONV_VERSION ICONV_MIME_DECODE_STRICT ICONV_MIME_DECODE_CONTINUE_ON_ERROR contained
line 143: 
line 144: " imap
line 145: syn keyword phpConstants NIL IMAP_OPENTIMEOUT IMAP_READTIMEOUT IMAP_WRITETIMEOUT IMAP_CLOSETIMEOUT OP_DEBUG OP_READONLY OP_ANONYMOUS OP_SHORTCACHE OP_SILENT OP_PROTOTYPE OP_HALFOPEN OP_EXPUNGE OP_SECURE CL_EXPUNGE FT_UID FT_PEEK FT_NOT FT_INTERNAL FT_PREFETCHTEXT ST_UID ST_SILENT ST_SET CP_UID CP_MOVE SE_UID SE_FREE SE_NOPREFETCH SO_FREE SO_NOSERVER SA_MESSAGES SA_RECENT SA_UNSEEN SA_UIDNEXT SA_UIDVALIDITY SA_ALL LATT_NOINFERIORS LATT_NOSELECT LATT_MARKED LATT_UNMARKED LATT_REFERRAL LATT_HASCHILDREN LATT_HASNOCHILDREN SORTDATE SORTARRIVAL SORTFROM SORTSUBJECT SORTTO SORTCC SORTSIZE TYPETEXT TYPEMULTIPART TYPEMESSAGE TYPEAPPLICATION TYPEAUDIO TYPEIMAGE TYPEVIDEO TYPEMODEL TYPEOTHER ENC7BIT ENC8BIT ENCBINARY ENCBASE64 ENCQUOTEDPRINTABLE ENCOTHER IMAP_GC_ELT IMAP_GC_ENV IMAP_GC_TEXTS contained
line 146: 
line 147: " intl
line 148: syn keyword phpConstants INTL_MAX_LOCALE_LEN ULOC_ACTUAL_LOCALE ULOC_VALID_LOCALE GRAPHEME_EXTR_COUNT GRAPHEME_EXTR_MAXBYTES GRAPHEME_EXTR_MAXCHARS U_USING_FALLBACK_WARNING U_ERROR_WARNING_START U_USING_DEFAULT_WARNING U_SAFECLONE_ALLOCATED_WARNING U_STATE_OLD_WARNING U_STRING_NOT_TERMINATED_WARNING U_SORT_KEY_TOO_SHORT_WARNING U_AMBIGUOUS_ALIAS_WARNING U_DIFFERENT_UCA_VERSION U_ERROR_WARNING_LIMIT U_ZERO_ERROR U_ILLEGAL_ARGUMENT_ERROR U_MISSING_RESOURCE_ERROR U_INVALID_FORMAT_ERROR U_FILE_ACCESS_ERROR U_INTERNAL_PROGRAM_ERROR U_MESSAGE_PARSE_ERROR U_MEMORY_ALLOCATION_ERROR U_INDEX_OUTOFBOUNDS_ERROR U_PARSE_ERROR U_INVALID_CHAR_FOUND U_TRUNCATED_CHAR_FOUND U_ILLEGAL_CHAR_FOUND U_INVALID_TABLE_FORMAT U_INVALID_TABLE_FILE U_BUFFER_OVERFLOW_ERROR U_UNSUPPORTED_ERROR U_RESOURCE_TYPE_MISMATCH U_ILLEGAL_ESCAPE_SEQUENCE U_UNSUPPORTED_ESCAPE_SEQUENCE U_NO_SPACE_AVAILABLE U_CE_NOT_FOUND_ERROR U_PRIMARY_TOO_LONG_ERROR U_STATE_TOO_OLD_ERROR U_TOO_MANY_ALIASES_ERROR U_ENUM_OUT_OF_SYNC_ERROR U_INVARIANT_CONVERSI
line 149: 
line 150: " json
line 151: syn keyword phpConstants JSON_HEX_TAG JSON_HEX_AMP JSON_HEX_APOS JSON_HEX_QUOT JSON_FORCE_OBJECT JSON_ERROR_NONE JSON_ERROR_DEPTH JSON_ERROR_STATE_MISMATCH JSON_ERROR_CTRL_CHAR JSON_ERROR_SYNTAX contained
line 152: 
line 153: " ldap
line 154: syn keyword phpConstants LDAP_DEREF_NEVER LDAP_DEREF_SEARCHING LDAP_DEREF_FINDING LDAP_DEREF_ALWAYS LDAP_OPT_DEREF LDAP_OPT_SIZELIMIT LDAP_OPT_TIMELIMIT LDAP_OPT_NETWORK_TIMEOUT LDAP_OPT_PROTOCOL_VERSION LDAP_OPT_ERROR_NUMBER LDAP_OPT_REFERRALS LDAP_OPT_RESTART LDAP_OPT_HOST_NAME LDAP_OPT_ERROR_STRING LDAP_OPT_MATCHED_DN LDAP_OPT_SERVER_CONTROLS LDAP_OPT_CLIENT_CONTROLS LDAP_OPT_DEBUG_LEVEL contained
line 155: 
line 156: " libxml
line 157: syn keyword phpConstants LIBXML_VERSION LIBXML_DOTTED_VERSION LIBXML_LOADED_VERSION LIBXML_NOENT LIBXML_DTDLOAD LIBXML_DTDATTR LIBXML_DTDVALID LIBXML_NOERROR LIBXML_NOWARNING LIBXML_NOBLANKS LIBXML_XINCLUDE LIBXML_NSCLEAN LIBXML_NOCDATA LIBXML_NONET LIBXML_COMPACT LIBXML_NOXMLDECL LIBXML_NOEMPTYTAG LIBXML_ERR_NONE LIBXML_ERR_WARNING LIBXML_ERR_ERROR LIBXML_ERR_FATAL contained
line 158: 
line 159: " mbstring
line 160: syn keyword phpConstants MB_OVERLOAD_MAIL MB_OVERLOAD_STRING MB_OVERLOAD_REGEX MB_CASE_UPPER MB_CASE_LOWER MB_CASE_TITLE contained
line 161: 
line 162: " mcrypt
line 163: syn keyword phpConstants  MCRYPT_ENCRYPT MCRYPT_DECRYPT MCRYPT_DEV_RANDOM MCRYPT_DEV_URANDOM MCRYPT_RAND MCRYPT_3DES MCRYPT_ARCFOUR_IV MCRYPT_ARCFOUR MCRYPT_BLOWFISH MCRYPT_BLOWFISH_COMPAT MCRYPT_CAST_128 MCRYPT_CAST_256 MCRYPT_CRYPT MCRYPT_DES MCRYPT_ENIGNA MCRYPT_GOST MCRYPT_LOKI97 MCRYPT_PANAMA MCRYPT_RC2 MCRYPT_RIJNDAEL_128 MCRYPT_RIJNDAEL_192 MCRYPT_RIJNDAEL_256 MCRYPT_SAFER64 MCRYPT_SAFER128 MCRYPT_SAFERPLUS MCRYPT_SERPENT MCRYPT_THREEWAY MCRYPT_TRIPLEDES MCRYPT_TWOFISH MCRYPT_WAKE MCRYPT_XTEA MCRYPT_IDEA MCRYPT_MARS MCRYPT_RC6 MCRYPT_SKIPJACK MCRYPT_MODE_CBC MCRYPT_MODE_CFB MCRYPT_MODE_ECB MCRYPT_MODE_NOFB MCRYPT_MODE_OFB MCRYPT_MODE_STREAM contained
line 164: 
line 165: " mysql
line 166: syn keyword phpConstants MYSQL_ASSOC MYSQL_NUM MYSQL_BOTH MYSQL_CLIENT_COMPRESS MYSQL_CLIENT_SSL MYSQL_CLIENT_INTERACTIVE MYSQL_CLIENT_IGNORE_SPACE contained
line 167: 
line 168: " mysqli
line 169: syn keyword phpConstants MYSQLI_READ_DEFAULT_GROUP MYSQLI_READ_DEFAULT_FILE MYSQLI_OPT_CONNECT_TIMEOUT MYSQLI_OPT_LOCAL_INFILE MYSQLI_INIT_COMMAND MYSQLI_OPT_NET_CMD_BUFFER_SIZE MYSQLI_OPT_NET_READ_BUFFER_SIZE MYSQLI_OPT_INT_AND_FLOAT_NATIVE MYSQLI_CLIENT_SSL MYSQLI_CLIENT_COMPRESS MYSQLI_CLIENT_INTERACTIVE MYSQLI_CLIENT_IGNORE_SPACE MYSQLI_CLIENT_NO_SCHEMA MYSQLI_CLIENT_FOUND_ROWS MYSQLI_STORE_RESULT MYSQLI_USE_RESULT MYSQLI_ASYNC MYSQLI_ASSOC MYSQLI_NUM MYSQLI_BOTH MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH MYSQLI_STMT_ATTR_CURSOR_TYPE MYSQLI_CURSOR_TYPE_NO_CURSOR MYSQLI_CURSOR_TYPE_READ_ONLY MYSQLI_CURSOR_TYPE_FOR_UPDATE MYSQLI_CURSOR_TYPE_SCROLLABLE MYSQLI_STMT_ATTR_PREFETCH_ROWS MYSQLI_NOT_NULL_FLAG MYSQLI_PRI_KEY_FLAG MYSQLI_UNIQUE_KEY_FLAG MYSQLI_MULTIPLE_KEY_FLAG MYSQLI_BLOB_FLAG MYSQLI_UNSIGNED_FLAG MYSQLI_ZEROFILL_FLAG MYSQLI_AUTO_INCREMENT_FLAG MYSQLI_TIMESTAMP_FLAG MYSQLI_SET_FLAG MYSQLI_NUM_FLAG MYSQLI_PART_KEY_FLAG MYSQLI_GROUP_FLAG MYSQLI_ENUM_FLAG MYSQLI_BINARY_FLAG MYSQLI_NO_DEFAULT_VALUE_F
line 170: 
line 171: " odbc
line 172: syn keyword phpConstants ODBC_TYPE ODBC_BINMODE_PASSTHRU ODBC_BINMODE_RETURN ODBC_BINMODE_CONVERT SQL_ODBC_CURSORS SQL_CUR_USE_DRIVER SQL_CUR_USE_IF_NEEDED SQL_CUR_USE_ODBC SQL_CONCURRENCY SQL_CONCUR_READ_ONLY SQL_CONCUR_LOCK SQL_CONCUR_ROWVER SQL_CONCUR_VALUES SQL_CURSOR_TYPE SQL_CURSOR_FORWARD_ONLY SQL_CURSOR_KEYSET_DRIVEN SQL_CURSOR_DYNAMIC SQL_CURSOR_STATIC SQL_KEYSET_SIZE SQL_FETCH_FIRST SQL_FETCH_NEXT SQL_CHAR SQL_VARCHAR SQL_LONGVARCHAR SQL_DECIMAL SQL_NUMERIC SQL_BIT SQL_TINYINT SQL_SMALLINT SQL_INTEGER SQL_BIGINT SQL_REAL SQL_FLOAT SQL_DOUBLE SQL_BINARY SQL_VARBINARY SQL_LONGVARBINARY SQL_DATE SQL_TIME SQL_TIMESTAMP contained
line 173: 
line 174: " openssl
line 175: syn keyword phpConstants OPENSSL_VERSION_TEXT OPENSSL_VERSION_NUMBER X509_PURPOSE_SSL_CLIENT X509_PURPOSE_SSL_SERVER X509_PURPOSE_NS_SSL_SERVER X509_PURPOSE_SMIME_SIGN X509_PURPOSE_SMIME_ENCRYPT X509_PURPOSE_CRL_SIGN X509_PURPOSE_ANY OPENSSL_ALGO_SHA1 OPENSSL_ALGO_MD5 OPENSSL_ALGO_MD4 OPENSSL_ALGO_MD2 OPENSSL_ALGO_DSS1 PKCS7_DETACHED PKCS7_TEXT PKCS7_NOINTERN PKCS7_NOVERIFY PKCS7_NOCHAIN PKCS7_NOCERTS PKCS7_NOATTR PKCS7_BINARY PKCS7_NOSIGS OPENSSL_PKCS1_PADDING OPENSSL_SSLV23_PADDING OPENSSL_NO_PADDING OPENSSL_PKCS1_OAEP_PADDING OPENSSL_CIPHER_RC2_40 OPENSSL_CIPHER_RC2_128 OPENSSL_CIPHER_RC2_64 OPENSSL_CIPHER_DES OPENSSL_CIPHER_3DES OPENSSL_KEYTYPE_RSA OPENSSL_KEYTYPE_DSA OPENSSL_KEYTYPE_DH OPENSSL_KEYTYPE_EC contained
line 176: 
line 177: " pcre
line 178: syn keyword phpConstants PREG_PATTERN_ORDER PREG_SET_ORDER PREG_OFFSET_CAPTURE PREG_SPLIT_NO_EMPTY PREG_SPLIT_DELIM_CAPTURE PREG_SPLIT_OFFSET_CAPTURE PREG_GREP_INVERT PREG_NO_ERROR PREG_INTERNAL_ERROR PREG_BACKTRACK_LIMIT_ERROR PREG_RECURSION_LIMIT_ERROR PREG_BAD_UTF8_ERROR PREG_BAD_UTF8_OFFSET_ERROR PCRE_VERSION contained
line 179: 
line 180: " PDO
line 181: syn keyword phpConstants PARAM_BOOL PARAM_NULL PARAM_INT PARAM_STR PARAM_LOB PARAM_STMT PARAM_INPUT_OUTPUT PARAM_EVT_ALLOC PARAM_EVT_FREE PARAM_EVT_EXEC_PRE PARAM_EVT_EXEC_POST PARAM_EVT_FETCH_PRE PARAM_EVT_FETCH_POST PARAM_EVT_NORMALIZE FETCH_LAZY FETCH_ASSOC FETCH_NUM FETCH_BOTH FETCH_OBJ FETCH_BOUND FETCH_COLUMN FETCH_CLASS FETCH_INTO FETCH_FUNC FETCH_GROUP FETCH_UNIQUE FETCH_KEY_PAIR FETCH_CLASSTYPE FETCH_SERIALIZE FETCH_PROPS_LATE FETCH_NAMED ATTR_AUTOCOMMIT ATTR_PREFETCH ATTR_TIMEOUT ATTR_ERRMODE ATTR_SERVER_VERSION ATTR_CLIENT_VERSION ATTR_SERVER_INFO ATTR_CONNECTION_STATUS ATTR_CASE ATTR_CURSOR_NAME ATTR_CURSOR ATTR_ORACLE_NULLS ATTR_PERSISTENT ATTR_STATEMENT_CLASS ATTR_FETCH_TABLE_NAMES ATTR_FETCH_CATALOG_NAMES ATTR_DRIVER_NAME ATTR_STRINGIFY_FETCHES ATTR_MAX_COLUMN_LEN ATTR_EMULATE_PREPARES ATTR_DEFAULT_FETCH_MODE ERRMODE_SILENT ERRMODE_WARNING ERRMODE_EXCEPTION CASE_NATURAL CASE_LOWER CASE_UPPER NULL_NATURAL NULL_EMPTY_STRING NULL_TO_STRING ERR_NONE FETCH_ORI_NEXT FETCH_ORI_PRIOR FETCH_OR
line 182: 
line 183: " pgsql
line 184: syn keyword phpConstants PGSQL_CONNECT_FORCE_NEW PGSQL_ASSOC PGSQL_NUM PGSQL_BOTH PGSQL_CONNECTION_BAD PGSQL_CONNECTION_OK PGSQL_TRANSACTION_IDLE PGSQL_TRANSACTION_ACTIVE PGSQL_TRANSACTION_INTRANS PGSQL_TRANSACTION_INERROR PGSQL_TRANSACTION_UNKNOWN PGSQL_ERRORS_TERSE PGSQL_ERRORS_DEFAULT PGSQL_ERRORS_VERBOSE PGSQL_SEEK_SET PGSQL_SEEK_CUR PGSQL_SEEK_END PGSQL_STATUS_LONG PGSQL_STATUS_STRING PGSQL_EMPTY_QUERY PGSQL_COMMAND_OK PGSQL_TUPLES_OK PGSQL_COPY_OUT PGSQL_COPY_IN PGSQL_BAD_RESPONSE PGSQL_NONFATAL_ERROR PGSQL_FATAL_ERROR PGSQL_DIAG_SEVERITY PGSQL_DIAG_SQLSTATE PGSQL_DIAG_MESSAGE_PRIMARY PGSQL_DIAG_MESSAGE_DETAIL PGSQL_DIAG_MESSAGE_HINT PGSQL_DIAG_STATEMENT_POSITION PGSQL_DIAG_INTERNAL_POSITION PGSQL_DIAG_INTERNAL_QUERY PGSQL_DIAG_CONTEXT PGSQL_DIAG_SOURCE_FILE PGSQL_DIAG_SOURCE_LINE PGSQL_DIAG_SOURCE_FUNCTION PGSQL_CONV_IGNORE_DEFAULT PGSQL_CONV_FORCE_NULL PGSQL_CONV_IGNORE_NOT_NULL PGSQL_DML_NO_CONV PGSQL_DML_EXEC PGSQL_DML_ASYNC PGSQL_DML_STRING contained
line 185: 
line 186: " Phar
line 187: syn keyword phpConstants CURRENT_MODE_MASK CURRENT_AS_PATHNAME CURRENT_AS_FILEINFO CURRENT_AS_SELF KEY_MODE_MASK KEY_AS_PATHNAME KEY_AS_FILENAME NEW_CURRENT_AND_KEY SKIP_DOTS UNIX_PATHS BZ2 GZ NONE PHAR TAR ZIP COMPRESSED PHP PHPS MD5 OPENSSL SHA1 SHA256 SHA512 contained
line 188: 
line 189: " Reflection
line 190: syn keyword phpConstants IS_DEPRECATED IS_STATIC IS_PUBLIC IS_PROTECTED IS_PRIVATE IS_ABSTRACT IS_FINAL IS_IMPLICIT_ABSTRACT IS_EXPLICIT_ABSTRACT contained
line 191: 
line 192: " soap
line 193: syn keyword phpConstants SOAP_1_1 SOAP_1_2 SOAP_PERSISTENCE_SESSION SOAP_PERSISTENCE_REQUEST SOAP_FUNCTIONS_ALL SOAP_ENCODED SOAP_LITERAL SOAP_RPC SOAP_DOCUMENT SOAP_ACTOR_NEXT SOAP_ACTOR_NONE SOAP_ACTOR_UNLIMATERECEIVER SOAP_COMPRESSION_ACCEPT SOAP_COMPRESSION_GZIP SOAP_COMPRESSION_DEFLATE SOAP_AUTHENTICATION_BASIC SOAP_AUTHENTICATION_DIGEST UNKNOWN_TYPE XSD_STRING XSD_BOOLEAN XSD_DECIMAL XSD_FLOAT XSD_DOUBLE XSD_DURATION XSD_DATETIME XSD_TIME XSD_DATE XSD_GYEARMONTH XSD_GYEAR XSD_GMONTHDAY XSD_GDAY XSD_GMONTH XSD_HEXBINARY XSD_BASE64BINARY XSD_ANYURI XSD_QNAME XSD_NOTATION XSD_NORMALIZEDSTRING XSD_TOKEN XSD_LANGUAGE XSD_NMTOKEN XSD_NAME XSD_NCNAME XSD_ID XSD_IDREF XSD_IDREFS XSD_ENTITY XSD_ENTITIES XSD_INTEGER XSD_NONPOSITIVEINTEGER XSD_NEGATIVEINTEGER XSD_LONG XSD_INT XSD_SHORT XSD_BYTE XSD_NONNEGATIVEINTEGER XSD_UNSIGNEDLONG XSD_UNSIGNEDINT XSD_UNSIGNEDSHORT XSD_UNSIGNEDBYTE XSD_POSITIVEINTEGER XSD_NMTOKENS XSD_ANYTYPE XSD_ANYXML APACHE_MAP SOAP_ENC_OBJECT SOAP_ENC_ARRAY XSD_1999_TIMEINSTANT XSD
line 194: 
line 195: " sockets
line 196: syn keyword phpConstants AF_UNIX AF_INET AF_INET6 SOCK_STREAM SOCK_DGRAM SOCK_RAW SOCK_SEQPACKET SOCK_RDM MSG_OOB MSG_WAITALL MSG_PEEK MSG_DONTROUTE SO_DEBUG SO_REUSEADDR SO_KEEPALIVE SO_DONTROUTE SO_LINGER SO_BROADCAST SO_OOBINLINE SO_SNDBUF SO_RCVBUF SO_SNDLOWAT SO_RCVLOWAT SO_SNDTIMEO SO_RCVTIMEO SO_TYPE SO_ERROR SOL_SOCKET SOMAXCONN TCP_NODELAY PHP_NORMAL_READ PHP_BINARY_READ SOCKET_EINTR SOCKET_EBADF SOCKET_EACCES SOCKET_EFAULT SOCKET_EINVAL SOCKET_EMFILE SOCKET_EWOULDBLOCK SOCKET_EINPROGRESS SOCKET_EALREADY SOCKET_ENOTSOCK SOCKET_EDESTADDRREQ SOCKET_EMSGSIZE SOCKET_EPROTOTYPE SOCKET_ENOPROTOOPT SOCKET_EPROTONOSUPPORT SOCKET_ESOCKTNOSUPPORT SOCKET_EOPNOTSUPP SOCKET_EPFNOSUPPORT SOCKET_EAFNOSUPPORT SOCKET_EADDRINUSE SOCKET_EADDRNOTAVAIL SOCKET_ENETDOWN SOCKET_ENETUNREACH SOCKET_ENETRESET SOCKET_ECONNABORTED SOCKET_ECONNRESET SOCKET_ENOBUFS SOCKET_EISCONN SOCKET_ENOTCONN SOCKET_ESHUTDOWN SOCKET_ETOOMANYREFS SOCKET_ETIMEDOUT SOCKET_ECONNREFUSED SOCKET_ELOOP SOCKET_ENAMETOOLONG SOCKET_EHOSTDOWN SOC
line 197: 
line 198: " SPL
line 199: syn keyword phpConstants LEAVES_ONLY SELF_FIRST CHILD_FIRST CATCH_GET_CHILD CALL_TOSTRING TOSTRING_USE_KEY TOSTRING_USE_CURRENT TOSTRING_USE_INNER FULL_CACHE USE_KEY MATCH GET_MATCH ALL_MATCHES SPLIT REPLACE BYPASS_CURRENT BYPASS_KEY PREFIX_LEFT PREFIX_MID_HAS_NEXT PREFIX_MID_LAST PREFIX_END_HAS_NEXT PREFIX_END_LAST PREFIX_RIGHT STD_PROP_LIST ARRAY_AS_PROPS CHILD_ARRAYS_ONLY CURRENT_MODE_MASK CURRENT_AS_PATHNAME CURRENT_AS_FILEINFO CURRENT_AS_SELF KEY_MODE_MASK KEY_AS_PATHNAME KEY_AS_FILENAME NEW_CURRENT_AND_KEY SKIP_DOTS UNIX_PATHS DROP_NEW_LINE READ_AHEAD SKIP_EMPTY READ_CSV IT_MODE_LIFO IT_MODE_FIFO IT_MODE_DELETE IT_MODE_KEEP EXTR_BOTH EXTR_PRIORITY EXTR_DATA MIT_NEED_ANY MIT_NEED_ALL MIT_KEYS_NUMERIC MIT_KEYS_ASSOC contained
line 200: 
line 201: " standard
line 202: syn keyword phpConstants CONNECTION_ABORTED CONNECTION_NORMAL CONNECTION_TIMEOUT INI_USER INI_PERDIR INI_SYSTEM INI_ALL INI_SCANNER_NORMAL INI_SCANNER_RAW PHP_URL_SCHEME PHP_URL_HOST PHP_URL_PORT PHP_URL_USER PHP_URL_PASS PHP_URL_PATH PHP_URL_QUERY PHP_URL_FRAGMENT M_E M_LOG2E M_LOG10E M_LN2 M_LN10 M_PI M_PI_2 M_PI_4 M_1_PI M_2_PI M_SQRTPI M_2_SQRTPI M_LNPI M_EULER M_SQRT2 M_SQRT1_2 M_SQRT3 INF NAN PHP_ROUND_HALF_UP PHP_ROUND_HALF_DOWN PHP_ROUND_HALF_EVEN PHP_ROUND_HALF_ODD INFO_GENERAL INFO_CREDITS INFO_CONFIGURATION INFO_MODULES INFO_ENVIRONMENT INFO_VARIABLES INFO_LICENSE INFO_ALL CREDITS_GROUP CREDITS_GENERAL CREDITS_SAPI CREDITS_MODULES CREDITS_DOCS CREDITS_FULLPAGE CREDITS_QA CREDITS_ALL HTML_SPECIALCHARS HTML_ENTITIES ENT_COMPAT ENT_QUOTES ENT_NOQUOTES ENT_IGNORE STR_PAD_LEFT STR_PAD_RIGHT STR_PAD_BOTH PATHINFO_DIRNAME PATHINFO_BASENAME PATHINFO_EXTENSION PATHINFO_FILENAME CHAR_MAX LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_ALL SEEK_SET SEEK_CUR SEEK_END LOCK_SH LOCK_EX LOCK_UN LOC
line 203: 
line 204: " sqlite
line 205: syn keyword phpConstants SQLITE_BOTH SQLITE_NUM SQLITE_ASSOC SQLITE_OK SQLITE_ERROR SQLITE_INTERNAL SQLITE_PERM SQLITE_ABORT SQLITE_BUSY SQLITE_LOCKED SQLITE_NOMEM SQLITE_READONLY SQLITE_INTERRUPT SQLITE_IOERR SQLITE_CORRUPT SQLITE_NOTFOUND SQLITE_FULL SQLITE_CANTOPEN SQLITE_PROTOCOL SQLITE_EMPTY SQLITE_SCHEMA SQLITE_TOOBIG SQLITE_CONSTRAINT SQLITE_MISMATCH SQLITE_MISUSE SQLITE_NOLFS SQLITE_AUTH SQLITE_NOTADB SQLITE_FORMAT SQLITE_ROW SQLITE_DONE contained
line 206: 
line 207: " sqlite3
line 208: syn keyword phpConstants SQLITE3_ASSOC SQLITE3_NUM SQLITE3_BOTH SQLITE3_INTEGER SQLITE3_FLOAT SQLITE3_TEXT SQLITE3_BLOB SQLITE3_NULL SQLITE3_OPEN_READONLY SQLITE3_OPEN_READWRITE SQLITE3_OPEN_CREATE contained
line 209: 
line 210: " tidy
line 211: syn keyword phpConstants TIDY_TAG_UNKNOWN TIDY_TAG_A TIDY_TAG_ABBR TIDY_TAG_ACRONYM TIDY_TAG_ADDRESS TIDY_TAG_ALIGN TIDY_TAG_APPLET TIDY_TAG_AREA TIDY_TAG_B TIDY_TAG_BASE TIDY_TAG_BASEFONT TIDY_TAG_BDO TIDY_TAG_BGSOUND TIDY_TAG_BIG TIDY_TAG_BLINK TIDY_TAG_BLOCKQUOTE TIDY_TAG_BODY TIDY_TAG_BR TIDY_TAG_BUTTON TIDY_TAG_CAPTION TIDY_TAG_CENTER TIDY_TAG_CITE TIDY_TAG_CODE TIDY_TAG_COL TIDY_TAG_COLGROUP TIDY_TAG_COMMENT TIDY_TAG_DD TIDY_TAG_DEL TIDY_TAG_DFN TIDY_TAG_DIR TIDY_TAG_DIV TIDY_TAG_DL TIDY_TAG_DT TIDY_TAG_EM TIDY_TAG_EMBED TIDY_TAG_FIELDSET TIDY_TAG_FONT TIDY_TAG_FORM TIDY_TAG_FRAME TIDY_TAG_FRAMESET TIDY_TAG_H1 TIDY_TAG_H2 TIDY_TAG_H3 TIDY_TAG_H4 TIDY_TAG_H5 TIDY_TAG_H6 TIDY_TAG_HEAD TIDY_TAG_HR TIDY_TAG_HTML TIDY_TAG_I TIDY_TAG_IFRAME TIDY_TAG_ILAYER TIDY_TAG_IMG TIDY_TAG_INPUT TIDY_TAG_INS TIDY_TAG_ISINDEX TIDY_TAG_KBD TIDY_TAG_KEYGEN TIDY_TAG_LABEL TIDY_TAG_LAYER TIDY_TAG_LEGEND TIDY_TAG_LI TIDY_TAG_LINK TIDY_TAG_LISTING TIDY_TAG_MAP TIDY_TAG_MARQUEE TIDY_TAG_MENU TIDY_TAG_META TIDY_TAG_MULT
line 212: 
line 213: " tokenizer
line 214: syn keyword phpConstants T_REQUIRE_ONCE T_REQUIRE T_EVAL T_INCLUDE_ONCE T_INCLUDE T_LOGICAL_OR T_LOGICAL_XOR T_LOGICAL_AND T_PRINT T_SR_EQUAL T_SL_EQUAL T_XOR_EQUAL T_OR_EQUAL T_AND_EQUAL T_MOD_EQUAL T_CONCAT_EQUAL T_DIV_EQUAL T_MUL_EQUAL T_MINUS_EQUAL T_PLUS_EQUAL T_BOOLEAN_OR T_BOOLEAN_AND T_IS_NOT_IDENTICAL T_IS_IDENTICAL T_IS_NOT_EQUAL T_IS_EQUAL T_IS_GREATER_OR_EQUAL T_IS_SMALLER_OR_EQUAL T_SR T_SL T_INSTANCEOF T_UNSET_CAST T_BOOL_CAST T_OBJECT_CAST T_ARRAY_CAST T_STRING_CAST T_DOUBLE_CAST T_INT_CAST T_DEC T_INC T_CLONE T_NEW T_EXIT T_IF T_ELSEIF T_ELSE T_ENDIF T_LNUMBER T_DNUMBER T_STRING T_STRING_VARNAME T_VARIABLE T_NUM_STRING T_INLINE_HTML T_CHARACTER T_BAD_CHARACTER T_ENCAPSED_AND_WHITESPACE T_CONSTANT_ENCAPSED_STRING T_ECHO T_DO T_WHILE T_ENDWHILE T_FOR T_ENDFOR T_FOREACH T_ENDFOREACH T_DECLARE T_ENDDECLARE T_AS T_SWITCH T_ENDSWITCH T_CASE T_DEFAULT T_BREAK T_CONTINUE T_GOTO T_FUNCTION T_CONST T_RETURN T_TRY T_CATCH T_THROW T_USE T_GLOBAL T_PUBLIC T_PROTECTED T_PRIVATE T_FINAL T_ABSTRACT 
line 215: 
line 216: " xml
line 217: syn keyword phpConstants XML_ERROR_NONE XML_ERROR_NO_MEMORY XML_ERROR_SYNTAX XML_ERROR_NO_ELEMENTS XML_ERROR_INVALID_TOKEN XML_ERROR_UNCLOSED_TOKEN XML_ERROR_PARTIAL_CHAR XML_ERROR_TAG_MISMATCH XML_ERROR_DUPLICATE_ATTRIBUTE XML_ERROR_JUNK_AFTER_DOC_ELEMENT XML_ERROR_PARAM_ENTITY_REF XML_ERROR_UNDEFINED_ENTITY XML_ERROR_RECURSIVE_ENTITY_REF XML_ERROR_ASYNC_ENTITY XML_ERROR_BAD_CHAR_REF XML_ERROR_BINARY_ENTITY_REF XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF XML_ERROR_MISPLACED_XML_PI XML_ERROR_UNKNOWN_ENCODING XML_ERROR_INCORRECT_ENCODING XML_ERROR_UNCLOSED_CDATA_SECTION XML_ERROR_EXTERNAL_ENTITY_HANDLING XML_OPTION_CASE_FOLDING XML_OPTION_TARGET_ENCODING XML_OPTION_SKIP_TAGSTART XML_OPTION_SKIP_WHITE XML_SAX_IMPL contained
line 218: 
line 219: " xmlreader
line 220: syn keyword phpConstants NONE ELEMENT ATTRIBUTE TEXT CDATA ENTITY_REF ENTITY PI COMMENT DOC DOC_TYPE DOC_FRAGMENT NOTATION WHITESPACE SIGNIFICANT_WHITESPACE END_ELEMENT END_ENTITY XML_DECLARATION LOADDTD DEFAULTATTRS VALIDATE SUBST_ENTITIES contained
line 221: 
line 222: " xsl
line 223: syn keyword phpConstants XSL_CLONE_AUTO XSL_CLONE_NEVER XSL_CLONE_ALWAYS LIBXSLT_VERSION LIBXSLT_DOTTED_VERSION LIBEXSLT_VERSION LIBEXSLT_DOTTED_VERSION contained
line 224: 
line 225: " zip
line 226: syn keyword phpConstants CREATE EXCL CHECKCONS OVERWRITE FL_NOCASE FL_NODIR FL_COMPRESSED FL_UNCHANGED CM_DEFAULT CM_STORE CM_SHRINK CM_REDUCE_1 CM_REDUCE_2 CM_REDUCE_3 CM_REDUCE_4 CM_IMPLODE CM_DEFLATE CM_DEFLATE64 CM_PKWARE_IMPLODE ER_OK ER_MULTIDISK ER_RENAME ER_CLOSE ER_SEEK ER_READ ER_WRITE ER_CRC ER_ZIPCLOSED ER_NOENT ER_EXISTS ER_OPEN ER_TMPOPEN ER_ZLIB ER_MEMORY ER_CHANGED ER_COMPNOTSUPP ER_EOF ER_INVAL ER_NOZIP ER_INTERNAL ER_INCONS ER_REMOVE ER_DELETED contained
line 227: 
line 228: " zlib
line 229: syn keyword phpConstants FORCE_GZIP FORCE_DEFLATE contained
line 230: 
line 231: syn case ignore
line 232: 
line 233: " Core
line 234: syn keyword phpFunctions zend_version func_num_args func_get_arg func_get_args strlen strcmp strncmp strcasecmp strncasecmp each error_reporting define defined get_class get_called_class get_parent_class method_exists property_exists class_exists interface_exists function_exists class_alias get_included_files get_required_files is_subclass_of is_a get_class_vars get_object_vars get_class_methods trigger_error user_error set_error_handler restore_error_handler set_exception_handler restore_exception_handler get_declared_classes get_declared_interfaces get_defined_functions get_defined_vars create_function get_resource_type get_loaded_extensions extension_loaded get_extension_funcs get_defined_constants debug_backtrace debug_print_backtrace gc_collect_cycles gc_enabled gc_enable gc_disable contained
line 235: syn keyword phpClasses Traversable IteratorAggregate Iterator ArrayAccess Serializable Exception ErrorException Closure contained
line 236: 
line 237: " bcmath
line 238: syn keyword phpFunctions bcadd bcsub bcmul bcdiv bcmod bcpow bcsqrt bcscale bccomp bcpowmod contained
line 239: 
line 240: " bz2
line 241: syn keyword phpFunctions bzopen bzread bzwrite bzflush bzclose bzerrno bzerrstr bzerror bzcompress bzdecompress contained
line 242: 
line 243: " calendar
line 244: syn keyword phpFunctions jdtogregorian gregoriantojd jdtojulian juliantojd jdtojewish jewishtojd jdtofrench frenchtojd jddayofweek jdmonthname easter_date easter_days unixtojd jdtounix cal_to_jd cal_from_jd cal_days_in_month cal_info contained
line 245: 
line 246: " com_dotnet
line 247: syn keyword phpFunctions variant_set variant_add variant_cat variant_sub variant_mul variant_and variant_div variant_eqv variant_idiv variant_imp variant_mod variant_or variant_pow variant_xor variant_abs variant_fix variant_int variant_neg variant_not variant_round variant_cmp variant_date_to_timestamp variant_date_from_timestamp variant_get_type variant_set_type variant_cast com_create_guid com_event_sink com_print_typeinfo com_message_pump com_load_typelib com_get_active_object contained
line 248: syn keyword phpClasses COMPersistHelper com_exception com_safearray_proxy variant com dotnet contained
line 249: 
line 250: " ctype
line 251: syn keyword phpFunctions ctype_alnum ctype_alpha ctype_cntrl ctype_digit ctype_lower ctype_graph ctype_print ctype_punct ctype_space ctype_upper ctype_xdigit contained
line 252: 
line 253: " curl
line 254: syn keyword phpFunctions curl_init curl_copy_handle curl_version curl_setopt curl_setopt_array curl_exec curl_getinfo curl_error curl_errno curl_close curl_multi_init curl_multi_add_handle curl_multi_remove_handle curl_multi_select curl_multi_exec curl_multi_getcontent curl_multi_info_read curl_multi_close contained
line 255: 
line 256: " date
line 257: syn keyword phpFunctions strtotime date idate gmdate mktime gmmktime checkdate strftime gmstrftime time localtime getdate date_create date_create_from_format date_parse date_parse_from_format date_get_last_errors date_format date_modify date_add date_sub date_timezone_get date_timezone_set date_offset_get date_diff date_time_set date_date_set date_isodate_set date_timestamp_set date_timestamp_get timezone_open timezone_name_get timezone_name_from_abbr timezone_offset_get timezone_transitions_get timezone_location_get timezone_identifiers_list timezone_abbreviations_list timezone_version_get date_interval_create_from_date_string date_interval_format date_default_timezone_set date_default_timezone_get date_sunrise date_sunset date_sun_info contained
line 258: syn keyword phpClasses DateTime DateTimeZone DateInterval DatePeriod contained
line 259: 
line 260: " dba
line 261: syn keyword phpFunctions dba_close dba_delete dba_exists dba_fetch dba_firstkey dba_handlers dba_insert dba_key_split dba_list dba_nextkey dba_open dba_optimize dba_popen dba_replace dba_sync contained
line 262: 
line 263: " dom
line 264: syn keyword phpFunctions dom_import_simplexml contained
line 265: syn keyword phpClasses DOMException DOMStringList DOMNameList DOMImplementationList DOMImplementationSource DOMImplementation DOMNode DOMNameSpaceNode DOMDocumentFragment DOMDocument DOMNodeList DOMNamedNodeMap DOMCharacterData DOMAttr DOMElement DOMText DOMComment DOMTypeinfo DOMUserDataHandler DOMDomError DOMErrorHandler DOMLocator DOMConfiguration DOMCdataSection DOMDocumentType DOMNotation DOMEntity DOMEntityReference DOMProcessingInstruction DOMStringExtend DOMXPath contained
line 266: 
line 267: " enchant
line 268: syn keyword phpFunctions enchant_broker_describe enchant_broker_dict_exists enchant_broker_free_dictenchant_broker_free enchant_broker_get_error enchant_broker_init enchant_broker_list_dicts enchant_broker_request_dict enchant_broker_request_pwl_dict enchant_broker_set_ordering enchant_dict_add_to_personal enchant_dict_add_to_session enchant_dict_check enchant_dict_describe enchant_dict_get_error enchant_dict_is_in_session enchant_dict_quick_check enchant_dict_store_replacement enchant_dict_suggest contained
line 269: 
line 270: " ereg
line 271: syn keyword phpFunctions ereg ereg_replace eregi eregi_replace split spliti sql_regcase contained
line 272: 
line 273: " exif
line 274: syn keyword phpFunctions exif_imagetype exif_read_data exif_tagname exif_thumbnail read_exif_data contained
line 275: 
line 276: " fileinfo
line 277: syn keyword phpFunctions finfo_open finfo_close finfo_set_flags finfo_file finfo_buffer mime_content_type contained
line 278: syn keyword phpClasses finfo contained
line 279: 
line 280: " filter
line 281: syn keyword phpFunctions filter_input filter_var filter_input_array filter_var_array filter_list filter_has_var filter_id contained
line 282: 
line 283: " ftp
line 284: syn keyword phpFunctions ftp_connect ftp_login ftp_pwd ftp_cdup ftp_chdir ftp_exec ftp_raw ftp_mkdir ftp_rmdir ftp_chmod ftp_alloc ftp_nlist ftp_rawlist ftp_systype ftp_pasv ftp_get ftp_fget ftp_put ftp_fput ftp_size ftp_mdtm ftp_rename ftp_delete ftp_site ftp_close ftp_set_option ftp_get_option ftp_nb_fget ftp_nb_get ftp_nb_continue ftp_nb_put ftp_nb_fput ftp_quit contained
line 285: 
line 286: " gd
line 287: syn keyword phpFunctions gd_info imagearc imageellipse imagechar imagecharup imagecolorat imagecolorallocate imagepalettecopy imagecreatefromstring imagecolorclosest imagecolorclosesthwb imagecolordeallocate imagecolorresolve imagecolorexact imagecolorset imagecolortransparent imagecolorstotal imagecolorsforindex imagecopy imagecopymerge imagecopymergegray imagecopyresized imagecreate imagecreatetruecolor imageistruecolor imagetruecolortopalette imagesetthickness imagefilledarc imagefilledellipse imagealphablending imagesavealpha imagecolorallocatealpha imagecolorresolvealpha imagecolorclosestalpha imagecolorexactalpha imagecopyresampled imagerotate imageantialias imagesettile imagesetbrush imagesetstyle imagecreatefrompng imagecreatefromgif imagecreatefromwbmp imagecreatefromxbm imagecreatefromgd imagecreatefromgd2 imagecreatefromgd2part imagepng imagegif imagewbmp imagegd imagegd2 imagedestroy imagegammacorrect imagefill imagefilledpolygon imagefilledrectangle imagefilltoborder imagefontwidth imag
line 288: 
line 289: " gettext
line 290: syn keyword phpFunctions textdomain gettext dgettext dcgettext bindtextdomain ngettext dngettext dcngettext bind_textdomain_codeset contained
line 291: 
line 292: " gmp
line 293: syn keyword phpFunctions gmp_init gmp_intval gmp_strval gmp_add gmp_sub gmp_mul gmp_div_qr gmp_div_q gmp_div_r gmp_div gmp_mod gmp_divexact gmp_neg gmp_abs gmp_fact gmp_sqrt gmp_sqrtrem gmp_pow gmp_powm gmp_perfect_square gmp_prob_prime gmp_gcd gmp_gcdext gmp_invert gmp_jacobi gmp_legendre gmp_cmp gmp_sign gmp_random gmp_and gmp_or gmp_com gmp_xor gmp_setbit gmp_clrbit gmp_scan0 gmp_scan1 gmp_testbit gmp_popcount gmp_hamdist gmp_nextprime contained
line 294: 
line 295: " hash
line 296: syn keyword phpFunctions hash hash_file hash_hmac hash_hmac_file hash_init hash_update hash_update_stream hash_update_file hash_final hash_copy hash_algos mhash_keygen_s2k mhash_get_block_size mhash_get_hash_name mhash_count mhash contained
line 297: 
line 298: " iconv
line 299: syn keyword phpFunctions iconv ob_iconv_handler iconv_get_encoding iconv_set_encoding iconv_strlen iconv_substr iconv_strpos iconv_strrpos iconv_mime_encode iconv_mime_decode iconv_mime_decode_headers contained
line 300: 
line 301: " imap
line 302: syn keyword phpFunctions  imap_open imap_reopen imap_close imap_num_msg imap_num_recent imap_headers imap_headerinfo imap_rfc822_parse_headers imap_rfc822_write_address imap_rfc822_parse_adrlist imap_body imap_bodystruct imap_fetchbody imap_savebody imap_fetchheader imap_fetchstructure imap_gc imap_expunge imap_delete imap_undelete imap_check imap_mail_copy imap_mail_move imap_mail_compose imap_createmailbox imap_renamemailbox imap_deletemailbox imap_subscribe imap_unsubscribe imap_append imap_ping imap_base64 imap_qprint imap_8bit imap_binary imap_utf8 imap_status imap_mailboxmsginfo imap_setflag_full imap_clearflag_full imap_sort imap_uid imap_msgno imap_list imap_lsub imap_fetch_overview imap_alerts imap_errors imap_last_error imap_search imap_utf7_decode imap_utf7_encode imap_utf8_to_mutf7 imap_mutf7_to_utf8 imap_mime_header_decode imap_thread imap_timeout imap_get_quota imap_get_quotaroot imap_set_quota imap_setacl imap_getacl imap_mail imap_header imap_listmailbox imap_getmailboxes imap_scanma
line 303: 
line 304: " intl
line 305: syn keyword phpFunctions collator_create collator_compare collator_get_attribute collator_set_attribute collator_get_strength collator_set_strength collator_sort collator_sort_with_sort_keys collator_asort collator_get_locale collator_get_error_code collator_get_error_message numfmt_create numfmt_format numfmt_parse numfmt_format_currency numfmt_parse_currency numfmt_set_attribute numfmt_get_attribute numfmt_set_text_attribute numfmt_get_text_attribute numfmt_set_symbol numfmt_get_symbol numfmt_set_pattern numfmt_get_pattern numfmt_get_locale numfmt_get_error_code numfmt_get_error_message normalizer_normalize normalizer_is_normalized locale_get_default locale_set_default locale_get_primary_language locale_get_script locale_get_region locale_get_keywords locale_get_display_script locale_get_display_region locale_get_display_name locale_get_display_language locale_get_display_variant locale_compose locale_parse locale_get_all_variants locale_filter_matches locale_canonicalize locale_lookup locale_acce
line 306: syn keyword phpClasses Collator NumberFormatter Normalizer Locale MessageFormatter IntlDateFormatter contained
line 307: 
line 308: " json
line 309: syn keyword phpFunctions json_encode json_decode json_last_error contained
line 310: 
line 311: " ldap
line 312: syn keyword phpFunctions ldap_connect ldap_close ldap_bind ldap_unbind ldap_read ldap_list ldap_search ldap_free_result ldap_count_entries ldap_first_entry ldap_next_entry ldap_get_entries ldap_first_attribute ldap_next_attribute ldap_get_attributes ldap_get_values ldap_get_values_len ldap_get_dn ldap_explode_dn ldap_dn2ufn ldap_add ldap_delete ldap_modify ldap_mod_add ldap_mod_replace ldap_mod_del ldap_errno ldap_err2str ldap_error ldap_compare ldap_sort ldap_rename ldap_get_option ldap_set_option ldap_first_reference ldap_next_reference ldap_parse_reference ldap_parse_result ldap_start_tls contained
line 313: 
line 314: " libxml
line 315: syn keyword phpFunctions libxml_set_streams_context libxml_use_internal_errors libxml_get_last_error libxml_clear_errors libxml_get_errors libxml_disable_entity_loader contained
line 316: syn keyword phpClasses LibXMLError contained
line 317: 
line 318: " mbstring
line 319: syn keyword phpFunctions mb_convert_case mb_strtoupper mb_strtolower mb_language mb_internal_encoding mb_http_input mb_http_output mb_detect_order mb_substitute_character mb_parse_str mb_output_handler mb_preferred_mime_name mb_strlen mb_strpos mb_strrpos mb_stripos mb_strripos mb_strstr mb_strrchr mb_stristr mb_strrichr mb_substr_count mb_substr mb_strcut mb_strwidth mb_strimwidth mb_convert_encoding mb_detect_encoding mb_list_encodings mb_encoding_aliases mb_convert_kana mb_encode_mimeheader mb_decode_mimeheader mb_convert_variables mb_encode_numericentity mb_decode_numericentity mb_send_mail mb_get_info mb_check_encoding mb_regex_encoding mb_regex_set_options mb_ereg mb_eregi mb_ereg_replace mb_eregi_replace mb_split mb_ereg_match mb_ereg_search mb_ereg_search_pos mb_ereg_search_regs mb_ereg_search_init mb_ereg_search_getregs mb_ereg_search_getpos mb_ereg_search_setpos mbregex_encoding mbereg mberegi mbereg_replace mberegi_replace mbsplit mbereg_match mbereg_search mbereg_search_pos mbereg_search
line 320: 
line 321: " mcrypt
line 322: syn keyword phpFunctions mcrypt_ecb mcrypt_cbc mcrypt_cfb mcrypt_ofb mcrypt_get_key_size mcrypt_get_block_size mcrypt_get_cipher_name mcrypt_create_iv mcrypt_list_algorithms mcrypt_list_modes mcrypt_get_iv_size mcrypt_encrypt mcrypt_decrypt mcrypt_module_open mcrypt_generic_init mcrypt_generic mdecrypt_generic mcrypt_generic_end mcrypt_generic_deinit mcrypt_enc_self_test mcrypt_enc_is_block_algorithm_mode mcrypt_enc_is_block_algorithm mcrypt_enc_is_block_mode mcrypt_enc_get_block_size mcrypt_enc_get_key_size mcrypt_enc_get_supported_key_sizes mcrypt_enc_get_iv_size mcrypt_enc_get_algorithms_name mcrypt_enc_get_modes_name mcrypt_module_self_test mcrypt_module_is_block_algorithm_mode mcrypt_module_is_block_algorithm mcrypt_module_is_block_mode mcrypt_module_get_algo_block_size mcrypt_module_get_algo_key_size mcrypt_module_get_supported_key_sizes mcrypt_module_close contained
line 323: 
line 324: " mysql
line 325: syn keyword phpFunctions mysql_connect mysql_pconnect mysql_close mysql_select_db mysql_query mysql_unbuffered_query mysql_db_query mysql_list_dbs mysql_list_tables mysql_list_fields mysql_list_processes mysql_error mysql_errno mysql_affected_rows mysql_insert_id mysql_result mysql_num_rows mysql_num_fields mysql_fetch_row mysql_fetch_array mysql_fetch_assoc mysql_fetch_object mysql_data_seek mysql_fetch_lengths mysql_fetch_field mysql_field_seek mysql_free_result mysql_field_name mysql_field_table mysql_field_len mysql_field_type mysql_field_flags mysql_escape_string mysql_real_escape_string mysql_stat mysql_thread_id mysql_client_encoding mysql_ping mysql_get_client_info mysql_get_host_info mysql_get_proto_info mysql_get_server_info mysql_info mysql_set_charset mysql mysql_fieldname mysql_fieldtable mysql_fieldlen mysql_fieldtype mysql_fieldflags mysql_selectdb mysql_freeresult mysql_numfields mysql_numrows mysql_listdbs mysql_listtables mysql_listfields mysql_db_name mysql_dbname mysql_tablename 
line 326: 
line 327: " mysqli
line 328: syn keyword phpFunctions mysqli_affected_rows mysqli_autocommit mysqli_change_user mysqli_character_set_name mysqli_close mysqli_commit mysqli_connect mysqli_connect_errno mysqli_connect_error mysqli_data_seek mysqli_dump_debug_info mysqli_debug mysqli_errno mysqli_error mysqli_stmt_execute mysqli_execute mysqli_fetch_field mysqli_fetch_fields mysqli_fetch_field_direct mysqli_fetch_lengths mysqli_fetch_all mysqli_fetch_array mysqli_fetch_assoc mysqli_fetch_object mysqli_fetch_row mysqli_field_count mysqli_field_seek mysqli_field_tell mysqli_free_result mysqli_get_cache_stats mysqli_get_connection_stats mysqli_get_client_stats mysqli_get_charset mysqli_get_client_info mysqli_get_client_version mysqli_get_host_info mysqli_get_proto_info mysqli_get_server_info mysqli_get_server_version mysqli_get_warnings mysqli_init mysqli_info mysqli_insert_id mysqli_kill mysqli_more_results mysqli_multi_query mysqli_next_result mysqli_num_fields mysqli_num_rows mysqli_options mysqli_ping mysqli_poll mysqli_prepare m
line 329: syn keyword phpClasses mysqli_sql_exception mysqli_driver mysqli mysqli_warning mysqli_result mysqli_stmt contained
line 330: 
line 331: " odbc
line 332: syn keyword phpFunctions odbc_autocommit odbc_binmode odbc_close odbc_close_all odbc_columns odbc_commit odbc_connect odbc_cursor odbc_data_source odbc_execute odbc_error odbc_errormsg odbc_exec odbc_fetch_array odbc_fetch_object odbc_fetch_row odbc_fetch_into odbc_field_len odbc_field_scale odbc_field_name odbc_field_type odbc_field_num odbc_free_result odbc_gettypeinfo odbc_longreadlen odbc_next_result odbc_num_fields odbc_num_rows odbc_pconnect odbc_prepare odbc_result odbc_result_all odbc_rollback odbc_setoption odbc_specialcolumns odbc_statistics odbc_tables odbc_primarykeys odbc_columnprivileges odbc_tableprivileges odbc_foreignkeys odbc_procedures odbc_procedurecolumns odbc_do odbc_field_precision contained
line 333: 
line 334: " openssl
line 335: syn keyword phpFunctions openssl_pkey_free openssl_pkey_new openssl_pkey_export openssl_pkey_export_to_file openssl_pkey_get_private openssl_pkey_get_public openssl_pkey_get_details openssl_free_key openssl_get_privatekey openssl_get_publickey openssl_x509_read openssl_x509_free openssl_x509_parse openssl_x509_checkpurpose openssl_x509_check_private_key openssl_x509_export openssl_x509_export_to_file openssl_pkcs12_export openssl_pkcs12_export_to_file openssl_pkcs12_read openssl_csr_new openssl_csr_export openssl_csr_export_to_file openssl_csr_sign openssl_csr_get_subject openssl_csr_get_public_key openssl_digest openssl_encrypt openssl_decrypt openssl_sign openssl_verify openssl_seal openssl_open openssl_pkcs7_verify openssl_pkcs7_decrypt openssl_pkcs7_sign openssl_pkcs7_encrypt openssl_private_encrypt openssl_private_decrypt openssl_public_encrypt openssl_public_decrypt openssl_get_md_methods openssl_get_cipher_methods openssl_dh_compute_key openssl_random_pseudo_bytes openssl_error_string contain
line 336: 
line 337: " pcre
line 338: syn keyword phpFunctions preg_match preg_match_all preg_replace preg_replace_callback preg_filter preg_split preg_quote preg_grep preg_last_error contained
line 339: 
line 340: " PDO
line 341: syn keyword phpFunctions pdo_drivers contained
line 342: syn keyword phpClasses PDOException PDO PDOStatement PDORow contained
line 343: 
line 344: " pgsql
line 345: syn keyword phpFunctions pg_connect pg_pconnect pg_close pg_connection_status pg_connection_busy pg_connection_reset pg_host pg_dbname pg_port pg_tty pg_options pg_version pg_ping pg_parameter_status pg_transaction_status pg_query pg_query_params pg_prepare pg_execute pg_send_query pg_send_query_params pg_send_prepare pg_send_execute pg_cancel_query pg_fetch_result pg_fetch_row pg_fetch_assoc pg_fetch_array pg_fetch_object pg_fetch_all pg_fetch_all_columns pg_affected_rows pg_get_result pg_result_seek pg_result_status pg_free_result pg_last_oid pg_num_rows pg_num_fields pg_field_name pg_field_num pg_field_size pg_field_type pg_field_type_oid pg_field_prtlen pg_field_is_null pg_field_table pg_get_notify pg_get_pid pg_result_error pg_result_error_field pg_last_error pg_last_notice pg_put_line pg_end_copy pg_copy_to pg_copy_from pg_trace pg_untrace pg_lo_create pg_lo_unlink pg_lo_open pg_lo_close pg_lo_read pg_lo_write pg_lo_read_all pg_lo_import pg_lo_export pg_lo_seek pg_lo_tell pg_escape_string pg_e
line 346: 
line 347: " Phar
line 348: syn keyword phpClasses PharException Phar PharData PharFileInfo contained
line 349: 
line 350: " readline
line 351: syn keyword phpFunctions readline readline_add_history readline_callback_handler_install readline_callback_handler_remove readline_callback_read_char readline_clear_history readline_completion_function readline_info readline_list_history readline_on_new_line readline_read_history readline_redisplay readline_write_history contained
line 352: 
line 353: " recode
line 354: syn keyword phpFunctions recode recode_file recode_string contained
line 355: 
line 356: " Reflection
line 357: syn keyword phpClasses ReflectionException Reflection Reflector ReflectionFunctionAbstract ReflectionFunction ReflectionParameter ReflectionMethod ReflectionClass ReflectionObject ReflectionProperty ReflectionExtension contained
line 358: 
line 359: " session
line 360: syn keyword phpFunctions session_name session_module_name session_save_path session_id session_regenerate_id session_decode session_register session_unregister session_is_registered session_encode session_start session_destroy session_unset session_set_save_handler session_cache_limiter session_cache_expire session_set_cookie_params session_get_cookie_params session_write_close session_commit contained
line 361: 
line 362: " shmop
line 363: syn keyword phpFunctions shmop_open shmop_read shmop_close shmop_size shmop_write shmop_delete contained
line 364: 
line 365: " SimpleXML
line 366: syn keyword phpFunctions simplexml_load_file simplexml_load_string simplexml_import_dom contained
line 367: syn keyword phpClasses SimpleXMLElement SimpleXMLIterator contained
line 368: 
line 369: " soap
line 370: syn keyword phpFunctions use_soap_error_handler is_soap_fault contained
line 371: syn keyword phpClasses SoapClient SoapVar SoapServer SoapFault SoapParam SoapHeader contained
line 372: 
line 373: " sockets
line 374: syn keyword phpFunctions socket_select socket_create socket_create_listen socket_create_pair socket_accept socket_set_nonblock socket_set_block socket_listen socket_close socket_write socket_read socket_getsockname socket_getpeername socket_connect socket_strerror socket_bind socket_recv socket_send socket_recvfrom socket_sendto socket_get_option socket_set_option socket_shutdown socket_last_error socket_clear_error socket_getopt socket_setopt contained
line 375: 
line 376: " SPL
line 377: syn keyword phpFunctions spl_classes spl_autoload spl_autoload_extensions spl_autoload_register spl_autoload_unregister spl_autoload_functions spl_autoload_call class_parents class_implements spl_object_hash iterator_to_array iterator_count iterator_apply contained
line 378: syn keyword phpClasses LogicException BadFunctionCallException BadMethodCallException DomainException InvalidArgumentException LengthException OutOfRangeException RuntimeException OutOfBoundsException OverflowException RangeException UnderflowException UnexpectedValueException RecursiveIterator RecursiveIteratorIterator OuterIterator IteratorIterator FilterIterator RecursiveFilterIterator ParentIterator Countable SeekableIterator LimitIterator CachingIterator RecursiveCachingIterator NoRewindIterator AppendIterator InfiniteIterator RegexIterator RecursiveRegexIterator EmptyIterator RecursiveTreeIterator ArrayObject ArrayIterator RecursiveArrayIterator SplFileInfo DirectoryIterator FilesystemIterator RecursiveDirectoryIterator GlobIterator SplFileObject SplTempFileObject SplDoublyLinkedList SplQueue SplStack SplHeap SplMinHeap SplMaxHeap SplPriorityQueue SplFixedArray SplObserver SplSubject SplObjectStorage MultipleIterator contained
line 379: 
line 380: " standard
line 381: syn keyword phpFunctions constant bin2hex sleep usleep time_nanosleep time_sleep_until flush wordwrap htmlspecialchars htmlentities html_entity_decode htmlspecialchars_decode get_html_translation_table sha1 sha1_file md5 md5_file crc32 iptcparse iptcembed getimagesize image_type_to_mime_type image_type_to_extension phpinfo phpversion phpcredits php_logo_guid php_real_logo_guid php_egg_logo_guid zend_logo_guid php_sapi_name php_uname php_ini_scanned_files php_ini_loaded_file strnatcmp strnatcasecmp substr_count strspn strcspn strtok strtoupper strtolower strpos stripos strrpos strripos strrev hebrev hebrevc nl2br basename dirname pathinfo stripslashes stripcslashes strstr stristr strrchr str_shuffle str_word_count str_split strpbrk substr_compare strcoll substr substr_replace quotemeta ucfirst lcfirst ucwords strtr addslashes addcslashes rtrim str_replace str_ireplace str_repeat count_chars chunk_split trim ltrim strip_tags similar_text explode implode join setlocale localeconv soundex levenshtein ch
line 382: syn keyword phpClasses __PHP_Incomplete_Class php_user_filter Directory contained
line 383: 
line 384: " SQLite
line 385: syn keyword phpFunctions sqlite_open sqlite_popen sqlite_close sqlite_query sqlite_exec sqlite_array_query sqlite_single_query sqlite_fetch_array sqlite_fetch_object sqlite_fetch_single sqlite_fetch_string sqlite_fetch_all sqlite_current sqlite_column sqlite_libversion sqlite_libencoding sqlite_changes sqlite_last_insert_rowid sqlite_num_rows sqlite_num_fields sqlite_field_name sqlite_seek sqlite_rewind sqlite_next sqlite_prev sqlite_valid sqlite_has_more sqlite_has_prev sqlite_escape_string sqlite_busy_timeout sqlite_last_error sqlite_error_string sqlite_unbuffered_query sqlite_create_aggregate sqlite_create_function sqlite_factory sqlite_udf_encode_binary sqlite_udf_decode_binary sqlite_fetch_column_types contained
line 386: syn keyword phpClasses SQLiteDatabase SQLiteResult SQLiteUnbuffered SQLiteException contained
line 387: 
line 388: " sqlite3
line 389: syn keyword phpClasses SQLite3 SQLite3Stmt SQLite3Result contained
line 390: 
line 391: " tidy
line 392: syn keyword phpFunctions tidy_getopt tidy_parse_string tidy_parse_file tidy_get_output tidy_get_error_buffer tidy_clean_repair tidy_repair_string tidy_repair_file tidy_diagnose tidy_get_release tidy_get_config tidy_get_status tidy_get_html_ver tidy_is_xhtml tidy_is_xml tidy_error_count tidy_warning_count tidy_access_count tidy_config_count tidy_get_root tidy_get_head tidy_get_html tidy_get_body ob_tidyhandler contained
line 393: syn keyword phpClasses tidy tidyNode contained
line 394: 
line 395: " tokenizer
line 396: syn keyword phpFunctions token_get_all token_name contained
line 397: 
line 398: " xml
line 399: syn keyword phpFunctions  xml_parser_create xml_parser_create_ns xml_set_object xml_set_element_handler xml_set_character_data_handler xml_set_processing_instruction_handler xml_set_default_handler xml_set_unparsed_entity_decl_handler xml_set_notation_decl_handler xml_set_external_entity_ref_handler xml_set_start_namespace_decl_handler xml_set_end_namespace_decl_handler xml_parse xml_parse_into_struct xml_get_error_code xml_error_string xml_get_current_line_number xml_get_current_column_number xml_get_current_byte_index xml_parser_free xml_parser_set_option xml_parser_get_option utf8_encode utf8_decode contained
line 400: 
line 401: " xmlreader
line 402: syn keyword phpClasses XMLReader contained
line 403: 
line 404: " xmlwriter
line 405: syn keyword phpFunctions  xmlwriter_open_uri xmlwriter_open_memory xmlwriter_set_indent xmlwriter_set_indent_string xmlwriter_start_comment xmlwriter_end_comment xmlwriter_start_attribute xmlwriter_end_attribute xmlwriter_write_attribute xmlwriter_start_attribute_ns xmlwriter_write_attribute_ns xmlwriter_start_element xmlwriter_end_element xmlwriter_full_end_element xmlwriter_start_element_ns xmlwriter_write_element xmlwriter_write_element_ns xmlwriter_start_pi xmlwriter_end_pi xmlwriter_write_pi xmlwriter_start_cdata xmlwriter_end_cdata xmlwriter_write_cdata xmlwriter_text xmlwriter_write_raw xmlwriter_start_document xmlwriter_end_document xmlwriter_write_comment xmlwriter_start_dtd xmlwriter_end_dtd xmlwriter_write_dtd xmlwriter_start_dtd_element xmlwriter_end_dtd_element xmlwriter_write_dtd_element xmlwriter_start_dtd_attlist xmlwriter_end_dtd_attlist xmlwriter_write_dtd_attlist xmlwriter_start_dtd_entity xmlwriter_end_dtd_entity xmlwriter_write_dtd_entity xmlwriter_output_memory xmlwriter_flush 
line 406: syn keyword phpClasses XMLWriter contained
line 407: 
line 408: " xmlrpc
line 409: syn keyword phpFunctions xmlrpc_encode xmlrpc_decode xmlrpc_decode_request xmlrpc_encode_request xmlrpc_get_type xmlrpc_set_type xmlrpc_is_fault xmlrpc_server_create xmlrpc_server_destroy xmlrpc_server_register_method xmlrpc_server_call_method xmlrpc_parse_method_descriptions xmlrpc_server_add_introspection_data xmlrpc_server_register_introspection_callback contained
line 410: 
line 411: " xsl
line 412: syn keyword phpClasses XSLTProcessor contained
line 413: 
line 414: " zip
line 415: syn keyword phpFunctions zip_open zip_close zip_read zip_entry_open zip_entry_close zip_entry_read zip_entry_filesize zip_entry_name zip_entry_compressedsize zip_entry_compressionmethod contained
line 416: syn keyword phpClasses ZipArchive contained
line 417: 
line 418: " zlib
line 419: syn keyword phpFunctions readgzfile gzrewind gzclose gzeof gzgetc gzgets gzgetss gzread gzopen gzpassthru gzseek gztell gzwrite gzputs gzfile gzcompress gzuncompress gzdeflate gzinflate gzencode ob_gzhandler zlib_get_coding_type contained
line 420: 
line 421: " === END BUILTIN FUNCTIONS, CLASSES, AND CONSTANTS =====================================
line 422: 
line 423: " The following is needed afterall it seems.
line 424: syntax keyword phpClasses containedin=ALLBUT,phpComment,phpStringDouble,phpStringSingle,phpIdentifier,phpMethodsVar
line 425: 
line 426: " Control Structures
line 427: syn keyword phpStatement if else elseif while do for foreach break switch case default continue return goto as endif endwhile endfor endforeach endswitch declare endeclare contained
line 428: 
line 429: " Class Keywords
line 430: syn keyword phpType class abstract extends interface implements static final var public private protected const contained
line 431: 
line 432: " Magic Methods
line 433: syn keyword phpStatement __construct __destruct __call __callStatic __get __set __isset __unset __sleep __wakeup __toString __invoke __set_state __clone contained
line 434: 
line 435: " Exception Keywords
line 436: syn keyword phpStatement try catch throw contained
line 437: 
line 438: " Language Constructs
line 439: syn keyword phpStatement die exit eval empty isset unset list instanceof contained
line 440: 
line 441: " These special keywords have traditionally received special colors
line 442: syn keyword phpSpecial function echo print new clone contained
line 443: 
line 444: " Include & friends
line 445: syn keyword phpInclude include include_once require require_once namespace use contained
line 446: 
line 447: " Types
line 448: syn keyword phpType bool[ean] int[eger] real double float string array object null self parent global this stdClass contained
line 449: 
line 450: " Operator
line 451: syn match phpOperator       "[-=+%^&|*!.~?:]" contained display
line 452: syn match phpOperator       "[-+*/%^&|.]="  contained display
line 453: syn match phpOperator       "/[^*/]"me=e-1  contained display
line 454: syn match phpOperator       "\$"  contained display
line 455: syn match phpOperator       "&&\|\<and\>" contained display
line 456: syn match phpOperator       "||\|\<x\=or\>" contained display
line 457: syn match phpOperator       "[!=<>]=" contained display
line 458: syn match phpOperator       "[<>]"  contained display
line 459: syn match phpMemberSelector "->"  contained display
line 460: syn match phpVarSelector    "\$"  contained display
line 461: " highlight object variables inside strings
line 462: syn match phpMethodsVar     "->\h\w*" contained contains=phpMethods,phpMemberSelector display containedin=phpStringDouble
line 463: 
line 464: " Identifier
line 465: syn match  phpIdentifier         "$\h\w*"  contained contains=phpEnvVar,phpIntVar,phpVarSelector display
line 466: syn match  phpIdentifierSimply   "${\h\w*}"  contains=phpOperator,phpParent  contained display
line 467: syn region phpIdentifierComplex  matchgroup=phpParent start="{\$"rs=e-1 end="}"  contains=phpIdentifier,phpMemberSelector,phpVarSelector,phpIdentifierArray contained extend
line 468: syn region phpIdentifierArray    matchgroup=phpParent start="\[" end="]" contains=@phpClInside contained
line 469: 
line 470: " Boolean
line 471: syn keyword phpBoolean true false  contained
line 472: 
line 473: " Number
line 474: syn match phpNumber "-\=\<\d\+\>" contained display
line 475: syn match phpNumber "\<0x\x\{1,8}\>"  contained display
line 476: 
line 477: " Float
line 478: syn match phpNumber "\(-\=\<\d+\|-\=\)\.\d\+\>" contained display
line 479: 
line 480: " SpecialChar
line 481: syn match phpSpecialChar "\\[fnrtv\\]" contained display
line 482: syn match phpSpecialChar "\\\d\{3}"  contained contains=phpOctalError display
line 483: syn match phpSpecialChar "\\x\x\{2}" contained display
line 484: " corrected highlighting for an escaped '\$' inside a double-quoted string
line 485: syn match phpSpecialChar "\\\$"  contained display
line 486: syn match phpSpecialChar +\\"+   contained display
line 487: syn match phpStrEsc      "\\\\"  contained display
line 488: syn match phpStrEsc      "\\'"   contained display
line 489: 
line 490: " Error
line 491: syn match phpOctalError "[89]"  contained display
line 492: if exists("php_parent_error_close")
line 493:   syn match phpParentError "[)\]}]"  contained display
line 494: endif
line 495: 
line 496: " Todo
line 497: syn keyword phpTodo todo fixme xxx note contained
line 498: 
line 499: " Comment
line 500: if exists("php_parent_error_open")
line 501:   syn region phpComment start="/\*" end="\*/" contained contains=phpTodo
line 502: else
line 503:   syn region phpComment start="/\*" end="\*/" contained contains=phpTodo extend
line 504: endif
line 505: if version >= 600
line 506:   syn match phpComment  "#.\{-}\(?>\|$\)\@="  contained contains=phpTodo
line 507:   syn match phpComment  "//.\{-}\(?>\|$\)\@=" contained contains=phpTodo
line 508: else
line 509:   syn match phpComment  "#.\{-}$" contained contains=phpTodo
line 510:   syn match phpComment  "#.\{-}?>"me=e-2  contained contains=phpTodo
line 511:   syn match phpComment  "//.\{-}$"  contained contains=phpTodo
line 512:   syn match phpComment  "//.\{-}?>"me=e-2 contained contains=phpTodo
line 513: endif
line 514: 
line 515: " String
line 516: if exists("php_parent_error_open")
line 517:   syn region phpStringDouble matchgroup=None start=+"+ skip=+\\\\\|\\"+ end=+"+  contains=@phpAddStrings,phpIdentifier,phpSpecialChar,phpIdentifierSimply,phpIdentifierComplex,phpStrEsc contained keepend
line 518:   syn region phpBacktick matchgroup=None start=+`+ skip=+\\\\\|\\"+ end=+`+  contains=@phpAddStrings,phpIdentifier,phpSpecialChar,phpIdentifierSimply,phpIdentifierComplex,phpStrEsc contained keepend
line 519:   syn region phpStringSingle matchgroup=None start=+'+ skip=+\\\\\|\\'+ end=+'+  contains=@phpAddStrings,phpStrEsc contained keepend
line 520: else
line 521:   syn region phpStringDouble matchgroup=None start=+"+ skip=+\\\\\|\\"+ end=+"+  contains=@phpAddStrings,phpIdentifier,phpSpecialChar,phpIdentifierSimply,phpIdentifierComplex,phpStrEsc contained extend keepend
line 522:   syn region phpBacktick matchgroup=None start=+`+ skip=+\\\\\|\\"+ end=+`+  contains=@phpAddStrings,phpIdentifier,phpSpecialChar,phpIdentifierSimply,phpIdentifierComplex,phpStrEsc contained extend keepend
line 523:   syn region phpStringSingle matchgroup=None start=+'+ skip=+\\\\\|\\'+ end=+'+  contains=@phpAddStrings,phpStrEsc contained keepend extend
line 524: endif
line 525: 
line 526: " HereDoc
line 527:   syn case match
line 528:   syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\z(\I\i*\)$" end="^\z1\(;\=$\)\@=" contained contains=phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
line 529:   syn region phpHereDoc matchgroup=Delimiter start=+\(<<<\)\@<="\z(\I\i*\)"$+ end="^\z1\(;\=$\)\@=" contained contains=phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
line 530: " including HTML,JavaScript,SQL even if not enabled via options
line 531:   syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\z(\(\I\i*\)\=\(html\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@="  contained contains=@htmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
line 532:   syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\z(\(\I\i*\)\=\(sql\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@=" contained contains=@sqlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
line 533:   syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\z(\(\I\i*\)\=\(javascript\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@="  contained contains=@htmlJavascript,phpIdentifierSimply,phpIdentifier,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
line 534:   syn case ignore
line 535: 
line 536: " NowDoc
line 537:   syn region phpNowDoc matchgroup=Delimiter start=+\(<<<\)\@<='\z(\I\i*\)'$+ end="^\z1\(;\=$\)\@=" contained keepend extend
line 538: 
line 539: " Parent
line 540: if exists("php_parent_error_close") || exists("php_parent_error_open")
line 541:   syn match  phpParent "[{}]"  contained
line 542:   syn region phpParent matchgroup=Delimiter start="(" end=")"  contained contains=@phpClInside transparent
line 543:   syn region phpParent matchgroup=Delimiter start="\[" end="\]"  contained contains=@phpClInside transparent
line 544:   if !exists("php_parent_error_close")
line 545:     syn match phpParent "[\])]" contained
line 546:   endif
line 547: else
line 548:   syn match phpParent "[({[\]})]" contained
line 549: endif
line 550: 
line 551: " Clusters
line 552: syn cluster phpClConst contains=phpFunctions,phpClasses,phpIdentifier,phpStatement,phpOperator,phpStringSingle,phpStringDouble,phpBacktick,phpNumber,phpType,phpBoolean,phpStructure,phpMethodsVar,phpConstants,phpException,phpSuperglobals,phpMagicConstants,phpServerVars
line 553: syn cluster phpClInside contains=@phpClConst,phpComment,phpParent,phpParentError,phpInclude,phpHereDoc,phpNowDoc
line 554: syn cluster phpClFunction contains=@phpClInside,phpDefine,phpParentError,phpStorageClass,phpSpecial
line 555: syn cluster phpClTop contains=@phpClFunction,phpFoldFunction,phpFoldClass,phpFoldInterface,phpFoldTry,phpFoldCatch
line 556: 
line 557: " Php Region
line 558: if exists("php_parent_error_open")
line 559:   syn region phpRegion matchgroup=Delimiter start="<?\(php\)\=" end="?>" contains=@phpClTop
line 560: else
line 561:   syn region phpRegion matchgroup=Delimiter start="<?\(php\)\=" end="?>" contains=@phpClTop keepend
line 562: endif
line 563: 
line 564: " Fold
line 565: if exists("php_folding") && php_folding==1
line 566: " match one line constructs here and skip them at folding
line 567:   syn keyword phpSCKeyword  abstract final private protected public static  contained
line 568:   syn keyword phpFCKeyword  function  contained
line 569:   syn match phpDefine "\(\s\|^\)\(abstract\s\+\|final\s\+\|private\s\+\|protected\s\+\|public\s\+\|static\s\+\)*function\(\s\+.*[;}]\)\@="  contained contains=phpSCKeyword
line 570:   syn match phpStructure "\(\s\|^\)\(abstract\s\+\|final\s\+\)*class\(\s\+.*}\)\@="  contained
line 571:   syn match phpStructure "\(\s\|^\)interface\(\s\+.*}\)\@="  contained
line 572:   syn match phpException "\(\s\|^\)try\(\s\+.*}\)\@="  contained
line 573:   syn match phpException "\(\s\|^\)catch\(\s\+.*}\)\@="  contained
line 574: 
line 575:   set foldmethod=syntax
line 576:   syn region phpFoldHtmlInside matchgroup=Delimiter start="?>" end="<?\(php\)\=" contained transparent contains=@htmlTop
line 577:   syn region phpFoldFunction matchgroup=Storageclass start="^\z(\s*\)\(abstract\s\+\|final\s\+\|private\s\+\|protected\s\+\|public\s\+\|static\s\+\)*function\s\([^};]*$\)\@="rs=e-9 matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldHtmlInside,phpFCKeyword contained transparent fold extend
line 578:   syn region phpFoldFunction matchgroup=Define start="^function\s\([^};]*$\)\@=" matchgroup=Delimiter end="^}" contains=@phpClFunction,phpFoldHtmlInside contained transparent fold extend
line 579:   syn region phpFoldClass matchgroup=Structure start="^\z(\s*\)\(abstract\s\+\|final\s\+\)*class\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldFunction,phpSCKeyword contained transparent fold extend
line 580:   syn region phpFoldInterface matchgroup=Structure start="^\z(\s*\)interface\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldFunction contained transparent fold extend
line 581:   syn region phpFoldCatch matchgroup=Exception start="^\z(\s*\)catch\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldFunction contained transparent fold extend
line 582:   syn region phpFoldTry matchgroup=Exception start="^\z(\s*\)try\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldFunction contained transparent fold extend
line 583: elseif exists("php_folding") && php_folding==2
line 584: "  syn keyword phpDefine function  contained
line 585: "  syn keyword phpStructure  abstract class interface  contained
line 586: "  syn keyword phpException  catch throw try contained
line 587: "  syn keyword phpStorageClass final global private protected public static  contained
line 588: 
line 589:   set foldmethod=syntax
line 590:   syn region phpFoldHtmlInside matchgroup=Delimiter start="?>" end="<?\(php\)\=" contained transparent contains=@htmlTop
line 591:   syn region phpParent matchgroup=Delimiter start="{" end="}"  contained contains=@phpClFunction,phpFoldHtmlInside transparent fold
line 592: else
line 593: "  syn keyword phpDefine function  contained
line 594: "  syn keyword phpStructure  abstract class interface  contained
line 595: "  syn keyword phpException  catch throw try contained
line 596: "  syn keyword phpStorageClass final global private protected public static  contained
line 597: endif
line 598: 
line 599: " Sync
line 600: if php_sync_method==-1
line 601:   syn sync match phpRegionSync grouphere phpRegion "^\s*<?\(php\)\=\s*$"
line 602:   syn sync match phpRegionSync grouphere NONE "^\s*?>\s*$"
line 603:   syn sync match phpRegionSync grouphere NONE "^\s*%>\s*$"
line 604:   syn sync match phpRegionSync grouphere phpRegion "function\s.*(.*\$"
line 605:   "syn sync match phpRegionSync grouphere NONE "/\i*>\s*$"
line 606: elseif php_sync_method>0
line 607:   exec "syn sync minlines=" . php_sync_method
line 608: else
line 609:   exec "syn sync fromstart"
line 610: endif
line 611: 
line 612: " Define the default highlighting.
line 613: " For version 5.8 and later: only when an item doesn't have highlighting yet
line 614: if !exists("did_php_syn_inits")
line 615: 
line 616:   hi def link phpComment          Comment
line 617:   hi def link phpSuperglobals     Constant
line 618:   hi def link phpMagicConstants   Constant
line 619:   hi def link phpServerVars       Constant
line 620:   hi def link phpConstants        Constant
line 621:   hi def link phpBoolean          Constant
line 622:   hi def link phpNumber           Constant
line 623:   hi def link phpStringSingle     String
line 624:   hi def link phpStringDouble     String
line 625:   hi def link phpBacktick         String
line 626:   hi def link phpHereDoc          String
line 627:   hi def link phpNowDoc           String
line 628:   hi def link phpFunctions        Identifier
line 629:   hi def link phpClasses          Identifier
line 630:   hi def link phpMethods          Identifier
line 631:   hi def link phpIdentifier       Identifier
line 632:   hi def link phpIdentifierSimply Identifier
line 633:   hi def link phpStatement        Statement
line 634:   hi def link phpStructure        Statement
line 635:   hi def link phpException        Statement
line 636:   hi def link phpOperator         Operator
line 637:   hi def link phpVarSelector      Operator
line 638:   hi def link phpInclude          PreProc
line 639:   hi def link phpDefine           PreProc
line 640:   hi def link phpSpecial          PreProc
line 641:   hi def link phpFCKeyword        PreProc
line 642:   hi def link phpType             Type
line 643:   hi def link phpSCKeyword        Type
line 644:   hi def link phpMemberSelector   Type
line 645:   hi def link phpSpecialChar      Special
line 646:   hi def link phpStrEsc           Special
line 647:   hi def link phpParent           Special
line 648:   hi def link phpParentError      Error
line 649:   hi def link phpOctalError       Error
line 650:   hi def link phpTodo             Todo
line 651: 
line 652: endif
line 653: 
line 654: let b:current_syntax = "php"
line 655: 
line 656: if main_syntax == 'php'
line 657:   unlet main_syntax
line 658: endif
line 659: 
line 660: " vim: ts=8 sts=2 sw=2 expandtab
finished sourcing /home/kguest/.vim/syntax/php.vim
continuing in function <SNR>4_SynSet
Searching for "/home/kguest/.vim/syntax/php/*.vim"
Searching for "/var/lib/vim/addons/syntax/php.vim"
Searching for "/var/lib/vim/addons/syntax/php/*.vim"
Searching for "/usr/share/vim/vimfiles/syntax/php.vim"
Searching for "/usr/share/vim/vimfiles/syntax/php/*.vim"
Searching for "/usr/share/vim/vim74/syntax/php.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 24: sourcing "/usr/share/vim/vim74/syntax/php.vim"
line 1: " Vim syntax file
line 2: " Language: php PHP 3/4/5
line 3: " Maintainer: Jason Woofenden <jason@jasonwoof.com>
line 4: " Last Change: Dec 11, 2012
line 5: " URL: https://gitorious.org/jasonwoof/vim-syntax/blobs/master/php.vim
line 6: " Former Maintainers: Peter Hodge <toomuchphp-vim@yahoo.com>
line 7: "         Debian VIM Maintainers <pkg-vim-maintainers@lists.alioth.debian.org>
line 8: "
line 9: " Note: If you are using a colour terminal with dark background, you will probably find
line 10: "       the 'elflord' colorscheme is much better for PHP's syntax than the default
line 11: "       colourscheme, because elflord's colours will better highlight the break-points
line 12: "       (Statements) in your code.
line 13: "
line 14: " Options:  php_sql_query = 1  for SQL syntax highlighting inside strings
line 15: "           php_htmlInStrings = 1  for HTML syntax highlighting inside strings
line 16: "           php_baselib = 1  for highlighting baselib functions
line 17: "           php_asp_tags = 1  for highlighting ASP-style short tags
line 18: "           php_parent_error_close = 1  for highlighting parent error ] or )
line 19: "           php_parent_error_open = 1  for skipping an php end tag, if there exists an open ( or [ without a closing one
line 20: "           php_oldStyle = 1  for using old colorstyle
line 21: "           php_noShortTags = 1  don't sync <? ?> as php
line 22: "           php_folding = 1  for folding classes and functions
line 23: "           php_folding = 2  for folding all { } regions
line 24: "           php_sync_method = x
line 25: "                             x=-1 to sync by search ( default )
line 26: "                             x>0 to sync at least x lines backwards
line 27: "                             x=0 to sync from start
line 28: "
line 29: "       Added by Peter Hodge On June 9, 2006:
line 30: "           php_special_functions = 1|0 to highlight functions with abnormal behaviour
line 31: "           php_alt_comparisons = 1|0 to highlight comparison operators in an alternate colour
line 32: "           php_alt_assignByReference = 1|0 to highlight '= &' in an alternate colour
line 33: "
line 34: "           Note: these all default to 1 (On), so you would set them to '0' to turn them off.
line 35: "                 E.g., in your .vimrc or _vimrc file:
line 36: "                   let php_special_functions = 0
line 37: "                   let php_alt_comparisons = 0
line 38: "                   let php_alt_assignByReference = 0
line 39: "                 Unletting these variables will revert back to their default (On).
line 40: "
line 41: "
line 42: " Note:
line 43: " Setting php_folding=1 will match a closing } by comparing the indent
line 44: " before the class or function keyword with the indent of a matching }.
line 45: " Setting php_folding=2 will match all of pairs of {,} ( see known
line 46: " bugs ii )
line 47: 
line 48: " Known Bugs:
line 49: "  - setting  php_parent_error_close  on  and  php_parent_error_open  off
line 50: "    has these two leaks:
line 51: "     i) A closing ) or ] inside a string match to the last open ( or [
line 52: "        before the string, when the the closing ) or ] is on the same line
line 53: "        where the string started. In this case a following ) or ] after
line 54: "        the string would be highlighted as an error, what is incorrect.
line 55: "    ii) Same problem if you are setting php_folding = 2 with a closing
line 56: "        } inside an string on the first line of this string.
line 57: 
line 58: " For version 5.x: Clear all syntax items
line 59: " For version 6.x: Quit when a syntax file was already loaded
line 60: if version < 600
line 61:   syntax clear
line 62: elseif exists("b:current_syntax")
line 63:   finish
finished sourcing /usr/share/vim/vim74/syntax/php.vim
continuing in function <SNR>4_SynSet
Searching for "/usr/share/vim/vim74/syntax/php/*.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/php.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/php/*.vim"
Searching for "/var/lib/vim/addons/after/syntax/php.vim"
Searching for "/var/lib/vim/addons/after/syntax/php/*.vim"
Searching for "/home/kguest/.vim/after/syntax/php.vim"
Searching for "/home/kguest/.vim/after/syntax/php/*.vim"
line 25:     endfor
line 23:     for name in split(s, '\.')
line 24:       exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 25:     endfor
line 26:   endif
function <SNR>4_SynSet returning #0

continuing in Syntax Auto commands for "*"

Executing Syntax Auto commands for "php"
autocommand if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif

line 0: if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif
line 0:  runtime! syntax/doxygen.vim | endif
line 0:  endif
line 231: endif
line 232: set keywordprg=pman
line 233: " turn off spell check
line 234: if has("spell")
line 235:   set nospell
line 236: endif
line 237: " fold by syntax
line 238: set foldmethod=syntax
line 239: 
line 240: "turn off SQL syntax hightlighting inside Strings
line 241: let php_sql_query = 0
line 242: "highlight parent errors
line 243: let php_parent_error_close = 1
line 244: let php_parent_error_open = 1
line 245: "For highlighting parent error ] or ):
line 246: let php_parent_error_close = 1
line 247: "For skipping an php end tag, if there exists an open ( or [ without a closing
line 248: "one
line 249: let php_parent_error_open = 1
line 250: "For highlighting the Baselib methods
line 251: let php_baselib = 1
line 252: "Allow short tags
line 253: let php_noShortTags = 0
line 254: let php_smart_members = 1
line 255: let php_alt_properties = 1
line 256: 
line 257: " Map F7 to remove additional DOS line endings.
line 258: map <F7> <ESC>:%s/^M//g<CR>
line 259: 
line 260: func! PreWriteTidyUp()
line 275: 
line 276: function! Phpcs()
line 282: 
line 283: "if !exists("autocommands_loaded")
line 284: "    let autocommands_loaded = 1
line 285: "    autocmd BufWritePost *.php call Phpcs() "seg fault!
line 286: "    autocmd BufWritePre *.php call PreWriteTidyUp()
line 287: "endif
line 288: " {{{ abbreviations for common keypresses
line 289: 
line 290: abb fh <BACKSPACE><ESC>:r ~/config/vim/phpdocheader.txt<RETURN>
line 291: iab .d var_dump
line 292: iab .e var_export
line 293: iab .r print_r
line 294: iab .? echo 
line 295: iab ab abstract
line 296: iab bo boolean
line 297: iab brk break;
line 298: iab ca catch
line 299: iab catchnone catch(Exception $e) {}
line 300: iab cl class
line 301: iab cn continue
line 302: iab df default:
line 303: iab dowhile do {<CR>} while ();
line 304: iab Ex Exception
line 305: iab g global
line 306: iab iflist if(cond){<CR>pass;<CR>} else {<CR>pass;<CR>}
line 307: iab ifunction function foo(){<CR>}<CR>
line 308: iab iselect <select name=""><CR></select>
line 309: iab pcg pgc
line 310: iab pe protected
line 311: iab pfn public function
line 312: iab pf public function
line 313: iab pro protected
line 314: iab pr private
line 315: iab psf public static function
line 316: iab pub public
line 317: iab pu public
line 318: iab pvn private function
line 319: iab ret return
line 320: iab st static
line 321: iab trycatch try {<CR>} catch(Exception $e) {<CR>}
finished sourcing /home/kguest/.vim/ftplugin/php.vim
continuing in function <SNR>12_LoadFTPlugin
Searching for "/home/kguest/.vim/ftplugin/php_*.vim"
Searching for "/home/kguest/.vim/ftplugin/php/*.vim"
Searching for "/var/lib/vim/addons/ftplugin/php.vim"
Searching for "/var/lib/vim/addons/ftplugin/php_*.vim"
Searching for "/var/lib/vim/addons/ftplugin/php/*.vim"
Searching for "/usr/share/vim/vimfiles/ftplugin/php.vim"
Searching for "/usr/share/vim/vimfiles/ftplugin/php_*.vim"
Searching for "/usr/share/vim/vimfiles/ftplugin/php/*.vim"
Searching for "/usr/share/vim/vim74/ftplugin/php.vim"
chdir(/usr/share/vim/vim74/ftplugin)
fchdir() to previous dir
line 17: sourcing "/usr/share/vim/vim74/ftplugin/php.vim"
line 1: " Vim filetype plugin file
line 2: " Language:^Iphp
line 3: " Maintainer:^IDan Sharp <dwsharp at users dot sourceforge dot net>
line 4: " Last Changed: 20 Jan 2009
line 5: " URL:^I^Ihttp://dwsharp.users.sourceforge.net/vim/ftplugin
line 6: 
line 7: if exists("b:did_ftplugin") | finish | endif
line 7:  finish | endif
line 7:  endif
line 8: 
line 9: " Make sure the continuation lines below do not cause problems in
line 10: " compatibility mode.
line 11: let s:keepcpo= &cpo
line 12: set cpo&vim
line 13: 
line 14: " Define some defaults in case the included ftplugins don't set them.
line 15: let s:undo_ftplugin = ""
line 17: let s:browsefilter = "HTML Files (*.html, *.htm)\t*.html;*.htm\n" .^I     "All Files (*.*)\t*.*\n"
line 18: let s:match_words = ""
line 19: 
line 20: runtime! ftplugin/html.vim ftplugin/html_*.vim ftplugin/html/*.vim
Searching for "ftplugin/html.vim ftplugin/html_*.vim ftplugin/html/*.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/ftplugin/html.vim"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/ftplugin/html_*.vim"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/ftplugin/html/*.vim"
Searching for "/home/kguest/.vim/ftplugin/html.vim"
Searching for "/home/kguest/.vim/ftplugin/html_*.vim"
Searching for "/home/kguest/.vim/ftplugin/html/*.vim"
Searching for "/var/lib/vim/addons/ftplugin/html.vim"
Searching for "/var/lib/vim/addons/ftplugin/html_*.vim"
Searching for "/var/lib/vim/addons/ftplugin/html/*.vim"
Searching for "/usr/share/vim/vimfiles/ftplugin/html.vim"
Searching for "/usr/share/vim/vimfiles/ftplugin/html_*.vim"
Searching for "/usr/share/vim/vimfiles/ftplugin/html/*.vim"
Searching for "/usr/share/vim/vim74/ftplugin/html.vim"
chdir(/usr/share/vim/vim74/ftplugin)
fchdir() to previous dir
line 20: sourcing "/usr/share/vim/vim74/ftplugin/html.vim"
line 1: " Vim filetype plugin file
line 2: " Language:^Ihtml
line 3: " Maintainer:^IDan Sharp <dwsharp at users dot sourceforge dot net>
line 4: " Last Changed: 20 Jan 2009
line 5: " URL:^I^Ihttp://dwsharp.users.sourceforge.net/vim/ftplugin
line 6: 
line 7: if exists("b:did_ftplugin") | finish | endif
line 7:  finish | endif
line 7:  endif
line 8: let b:did_ftplugin = 1
line 9: 
line 10: " Make sure the continuation lines below do not cause problems in
line 11: " compatibility mode.
line 12: let s:save_cpo = &cpo
line 13: set cpo-=C
line 14: 
line 15: setlocal matchpairs+=<:>
line 16: setlocal commentstring=<!--%s-->
line 17: setlocal comments=s:<!--,m:\ \ \ \ ,e:-->
line 18: 
line 19: if exists("g:ft_html_autocomment") && (g:ft_html_autocomment == 1)
line 20:     setlocal formatoptions-=t formatoptions+=croql
line 21: endif
line 22: 
line 23: 
line 24: if exists('&omnifunc')
line 25:     " Distinguish between HTML versions
line 26:     " To use with other HTML versions add another
line 27:     " elseif condition to match proper DOCTYPE
line 28:     setlocal omnifunc=htmlcomplete#CompleteTags
line 29: 
line 30:     if &filetype == 'xhtml'
line 31:             let b:html_omni_flavor = 'xhtml10s'
line 32:     else
line 33:             let b:html_omni_flavor = 'html401t'
line 34:     endif
line 35:     let i = 1
line 36:     let line = ""
line 37:     while i < 10 && i < line("$")
line 38:         let line = getline(i)
line 39:         if line =~ '<!DOCTYPE.*\<DTD '
line 40:             break
line 41:         endif
line 42:         let i += 1
line 43:     endwhile
line 37:     while i < 10 && i < line("$")
line 38:         let line = getline(i)
line 39:         if line =~ '<!DOCTYPE.*\<DTD '
line 40:             break
line 41:         endif
line 42:         let i += 1
line 43:     endwhile
line 37:     while i < 10 && i < line("$")
line 38:         let line = getline(i)
line 39:         if line =~ '<!DOCTYPE.*\<DTD '
line 40:             break
line 41:         endif
line 42:         let i += 1
line 43:     endwhile
line 37:     while i < 10 && i < line("$")
line 38:         let line = getline(i)
line 39:         if line =~ '<!DOCTYPE.*\<DTD '
line 40:             break
line 41:         endif
line 42:         let i += 1
line 43:     endwhile
line 37:     while i < 10 && i < line("$")
line 38:         let line = getline(i)
line 39:         if line =~ '<!DOCTYPE.*\<DTD '
line 40:             break
line 41:         endif
line 42:         let i += 1
line 43:     endwhile
line 37:     while i < 10 && i < line("$")
line 38:         let line = getline(i)
line 39:         if line =~ '<!DOCTYPE.*\<DTD '
line 40:             break
line 41:         endif
line 42:         let i += 1
line 43:     endwhile
line 37:     while i < 10 && i < line("$")
line 38:         let line = getline(i)
line 39:         if line =~ '<!DOCTYPE.*\<DTD '
line 40:             break
line 41:         endif
line 42:         let i += 1
line 43:     endwhile
line 44:     if line =~ '<!DOCTYPE.*\<DTD '  " doctype line found above
line 45:         if line =~ ' HTML 3\.2'
line 46:             let b:html_omni_flavor = 'html32'
line 47:         elseif line =~ ' XHTML 1\.1'
line 48:             let b:html_omni_flavor = 'xhtml11'
line 49:         else    " two-step detection with strict/frameset/transitional
line 50:             if line =~ ' XHTML 1\.0'
line 51:                 let b:html_omni_flavor = 'xhtml10'
line 52:             elseif line =~ ' HTML 4\.01'
line 53:                 let b:html_omni_flavor = 'html401'
line 54:             elseif line =~ ' HTML 4.0\>'
line 55:                 let b:html_omni_flavor = 'html40'
line 56:             endif
line 57:             if line =~ '\<Transitional\>'
line 58:                 let b:html_omni_flavor .= 't'
line 59:             elseif line =~ '\<Frameset\>'
line 60:                 let b:html_omni_flavor .= 'f'
line 61:             else
line 62:                 let b:html_omni_flavor .= 's'
line 63:             endif
line 64:         endif
line 65:     endif
line 66: endif
line 67: 
line 68: " HTML:  thanks to Johannes Zellner and Benji Fisher.
line 69: if exists("loaded_matchit")
line 70:     let b:match_ignorecase = 1
line 74:     let b:match_words = '<:>,' . '<\@<=[ou]l\>[^>]*\%(>\|$\):<\@<=li\>:<\@<=/[ou]l>,' . '<\@<=dl\>[^>]*\%(>\|$\):<\@<=d[td]\>:<\@<=/dl>,' . '<\@<=\([^/][^ \t>]*\)[^>]*\%(>\|$\):<\@<=/\1>'
line 75: endif
line 76: 
line 77: " Change the :browse e filter to primarily show HTML-related files.
line 78: if has("gui_win32")
line 82:     let  b:browsefilter="HTML Files (*.html,*.htm)\t*.htm;*.html\n" .^I"JavaScript Files (*.js)\t*.js\n" .^I"Cascading StyleSheets (*.css)\t*.css\n" .^I"All Files (*.*)\t*.*\n"
line 83: endif
line 84: 
line 85: " Undo the stuff we changed.
line 87: let b:undo_ftplugin = "setlocal commentstring< matchpairs< omnifunc< comments< formatoptions<" .^I" | unlet! b:match_ignorecase b:match_skip b:match_words b:browsefilter"
line 88: 
line 89: " Restore the saved compatibility options.
line 90: let &cpo = s:save_cpo
line 91: unlet s:save_cpo
finished sourcing /usr/share/vim/vim74/ftplugin/html.vim
continuing in /usr/share/vim/vim74/ftplugin/php.vim
Searching for "/usr/share/vim/vim74/ftplugin/html_*.vim"
Searching for "/usr/share/vim/vim74/ftplugin/html/*.vim"
Searching for "/usr/share/vim/vimfiles/after/ftplugin/html.vim"
Searching for "/usr/share/vim/vimfiles/after/ftplugin/html_*.vim"
Searching for "/usr/share/vim/vimfiles/after/ftplugin/html/*.vim"
Searching for "/var/lib/vim/addons/after/ftplugin/html.vim"
Searching for "/var/lib/vim/addons/after/ftplugin/html_*.vim"
Searching for "/var/lib/vim/addons/after/ftplugin/html/*.vim"
Searching for "/home/kguest/.vim/after/ftplugin/html.vim"
Searching for "/home/kguest/.vim/after/ftplugin/html_*.vim"
Searching for "/home/kguest/.vim/after/ftplugin/html/*.vim"
line 21: let b:did_ftplugin = 1
line 22: 
line 23: " Override our defaults if these were set by an included ftplugin.
line 24: if exists("b:undo_ftplugin")
line 25:     let s:undo_ftplugin = b:undo_ftplugin
line 26: endif
line 27: if exists("b:browsefilter")
line 28:     let s:browsefilter = b:browsefilter
line 29: endif
line 30: if exists("b:match_words")
line 31:     let s:match_words = b:match_words
line 32: endif
line 33: if exists("b:match_skip")
line 34:     unlet b:match_skip
line 35: endif
line 36: 
line 37: " Change the :browse e filter to primarily show PHP-related files.
line 38: if has("gui_win32")
line 39:     let  b:browsefilter="PHP Files (*.php)\t*.php\n" . s:browsefilter
line 40: endif
line 41: 
line 42: " ###
line 43: " Provided by Mikolaj Machowski <mikmach at wp dot pl>
line 44: setlocal include=\\\(require\\\|include\\\)\\\(_once\\\)\\\?
line 45: " Disabled changing 'iskeyword', it breaks a command such as "*"
line 46: " setlocal iskeyword+=$
line 47: 
line 48: if exists("loaded_matchit")
line 56:     let b:match_words = '<?php:?>,\<switch\>:\<endswitch\>,' . '\<if\>:\<elseif\>:\<else\>:\<endif\>,' . '\<while\>:\<endwhile\>,' . '\<do\>:\<while\>,' . '\<for\>:\<endfor\>,' . '\<foreach\>:\<endforeach\>,' . '(:),[:],{:},' . s:match_words
line 57: endif
line 58: " ###
line 59: 
line 60: if exists('&omnifunc')
line 61:   setlocal omnifunc=phpcomplete#CompletePHP
line 62: endif
line 63: 
line 64: " Section jumping: [[ and ]] provided by Antony Scriven <adscriven at gmail dot com>
line 65: let s:function = '\(abstract\s\+\|final\s\+\|private\s\+\|protected\s\+\|public\s\+\|static\s\+\)*function'
line 66: let s:class = '\(abstract\s\+\|final\s\+\)*class'
line 67: let s:interface = 'interface'
line 68: let s:section = '\(.*\%#\)\@!\_^\s*\zs\('.s:function.'\|'.s:class.'\|'.s:interface.'\)'
line 69: exe 'nno <buffer> <silent> [[ ?' . escape(s:section, '|') . '?<CR>:nohls<CR>'
line 69: nno <buffer> <silent> [[ ?\(.*\%#\)\@!\_^\s*\zs\(\(abstract\s\+\\|final\s\+\\|private\s\+\\|protected\s\+\\|public\s\+\\|static\s\+\)*function\\|\(abstract\s\+\\|final\s\+\)*class\\|interface\)?<CR>:nohls<CR>
line 70: exe 'nno <buffer> <silent> ]] /' . escape(s:section, '|') . '/<CR>:nohls<CR>'
line 70: nno <buffer> <silent> ]] /\(.*\%#\)\@!\_^\s*\zs\(\(abstract\s\+\\|final\s\+\\|private\s\+\\|protected\s\+\\|public\s\+\\|static\s\+\)*function\\|\(abstract\s\+\\|final\s\+\)*class\\|interface\)/<CR>:nohls<CR>
line 71: exe 'ono <buffer> <silent> [[ ?' . escape(s:section, '|') . '?<CR>:nohls<CR>'
line 71: ono <buffer> <silent> [[ ?\(.*\%#\)\@!\_^\s*\zs\(\(abstract\s\+\\|final\s\+\\|private\s\+\\|protected\s\+\\|public\s\+\\|static\s\+\)*function\\|\(abstract\s\+\\|final\s\+\)*class\\|interface\)?<CR>:nohls<CR>
line 72: exe 'ono <buffer> <silent> ]] /' . escape(s:section, '|') . '/<CR>:nohls<CR>'
line 72: ono <buffer> <silent> ]] /\(.*\%#\)\@!\_^\s*\zs\(\(abstract\s\+\\|final\s\+\\|private\s\+\\|protected\s\+\\|public\s\+\\|static\s\+\)*function\\|\(abstract\s\+\\|final\s\+\)*class\\|interface\)/<CR>:nohls<CR>
line 73: 
line 74: setlocal commentstring=/*%s*/
line 75: 
line 76: " Undo the stuff we changed.
line 79: let b:undo_ftplugin = "setlocal commentstring< include< omnifunc<" .^I      " | unlet! b:browsefilter b:match_words | " .^I      s:undo_ftplugin
line 80: 
line 81: " Restore the saved compatibility options.
line 82: let &cpo = s:keepcpo
line 83: unlet s:keepcpo
finished sourcing /usr/share/vim/vim74/ftplugin/php.vim
continuing in function <SNR>12_LoadFTPlugin
Searching for "/usr/share/vim/vim74/ftplugin/php_*.vim"
Searching for "/usr/share/vim/vim74/ftplugin/php/*.vim"
Searching for "/usr/share/vim/vimfiles/after/ftplugin/php.vim"
Searching for "/usr/share/vim/vimfiles/after/ftplugin/php_*.vim"
Searching for "/usr/share/vim/vimfiles/after/ftplugin/php/*.vim"
Searching for "/var/lib/vim/addons/after/ftplugin/php.vim"
Searching for "/var/lib/vim/addons/after/ftplugin/php_*.vim"
Searching for "/var/lib/vim/addons/after/ftplugin/php/*.vim"
Searching for "/home/kguest/.vim/after/ftplugin/php.vim"
Searching for "/home/kguest/.vim/after/ftplugin/php_*.vim"
Searching for "/home/kguest/.vim/after/ftplugin/php/*.vim"
line 18:       endfor
line 16:       for name in split(s, '\.')
line 17: ^Iexe 'runtime! ftplugin/' . name . '.vim ftplugin/' . name . '_*.vim ftplugin/' . name . '/*.vim'
line 18:       endfor
line 19:     endif
function <SNR>12_LoadFTPlugin returning #0

continuing in FileType Auto commands for "*"

Executing FileType Auto commands for "*"
autocommand exe "set syntax=" . expand("<amatch>")

line 0: exe "set syntax=" . expand("<amatch>")
line 0: set syntax=php
Executing Syntax Auto commands for "*"
autocommand call s:SynSet()

line 0: call s:SynSet()
calling function <SNR>4_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.
line 23:     for name in split(s, '\.')
line 24:       exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 24: runtime! syntax/php.vim syntax/php/*.vim
Searching for "syntax/php.vim syntax/php/*.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/syntax/php.vim"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/syntax/php/*.vim"
Searching for "/home/kguest/.vim/syntax/php.vim"
chdir(/home/kguest/.vim/syntax)
fchdir() to previous dir
line 24: sourcing "/home/kguest/.vim/syntax/php.vim"
line 1: " Vim syntax file
line 2: " Language: PHP 5.3 & up
line 3: " Maintainer: Paul Garvin <paul@paulgarvin.net>
line 4: " Last Change:  April 2, 2010
line 5: " URL: 
line 6: "
line 7: " Former Maintainer:  Peter Hodge <toomuchphp-vim@yahoo.com>
line 8: " Former URL: http://www.vim.org/scripts/script.php?script_id=1571
line 9: "
line 10: " Note: All of the switches for VIM 5.X and 6.X compatability were removed.
line 11: "       DO NOT USE THIS FILE WITH A VERSION OF VIM < 7.0.
line 12: "
line 13: " Note: If you are using a colour terminal with dark background, you will probably find
line 14: "       the 'elflord' colorscheme is much better for PHP's syntax than the default
line 15: "       colourscheme, because elflord's colours will better highlight the break-points
line 16: "       (Statements) in your code.
line 17: "
line 18: " Options:  php_sql_query = 1  for SQL syntax highlighting inside strings
line 19: "           php_html_in_strings = 1  for HTML syntax highlighting inside strings
line 20: "           php_parent_error_close = 1  for highlighting parent error ] or )
line 21: "           php_parent_error_open = 1  for skipping an php end tag,
line 22: "                                      if there exists an open ( or [ without a closing one
line 23: "           php_no_shorttags = 1  don't sync <? ?> as php
line 24: "           php_folding = 1  for folding classes and functions
line 25: "           php_sync_method = x
line 26: "                             x=-1 to sync by search ( default )
line 27: "                             x>0 to sync at least x lines backwards
line 28: "                             x=0 to sync from start
line 29: "
line 30: " Note:
line 31: " Setting php_folding=1 will match a closing } by comparing the indent
line 32: " before the class or function keyword with the indent of a matching }.
line 33: " Setting php_folding=2 will match all of pairs of {,} ( see known
line 34: " bugs ii )
line 35: "
line 36: " Known Bugs:
line 37: "  - setting  php_parent_error_close  on  and  php_parent_error_open  off
line 38: "    has these two leaks:
line 39: "     i) A closing ) or ] inside a string match to the last open ( or [
line 40: "        before the string, when the the closing ) or ] is on the same line
line 41: "        where the string started. In this case a following ) or ] after
line 42: "        the string would be highlighted as an error, what is incorrect.
line 43: "    ii) Same problem if you are setting php_folding = 2 with a closing
line 44: "        } inside an string on the first line of this string.
line 45: "
line 46: "  - A double-quoted string like this:
line 47: "      "$foo->someVar->someOtherVar->bar"
line 48: "    will highight '->someOtherVar->bar' as though they will be parsed
line 49: "    as object member variables, but PHP only recognizes the first
line 50: "    object member variable ($foo->someVar).
line 51: "
line 52: "
line 53: "
line 54: if exists("b:current_syntax")
line 55:   finish
line 56: endif
line 57: 
line 58: if !exists("main_syntax")
line 59:   let main_syntax = 'php'
line 60: endif
line 61: 
line 62: runtime syntax/html.vim
Searching for "syntax/html.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/syntax/html.vim"
Searching for "/home/kguest/.vim/syntax/html.vim"
Searching for "/var/lib/vim/addons/syntax/html.vim"
Searching for "/usr/share/vim/vimfiles/syntax/html.vim"
Searching for "/usr/share/vim/vim74/syntax/html.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 62: sourcing "/usr/share/vim/vim74/syntax/html.vim"
line 1: " Vim syntax file
line 2: " Language:^IHTML
line 3: " Maintainer:^IClaudio Fleiner <claudio@fleiner.com>
line 4: " URL:^I^Ihttp://www.fleiner.com/vim/syntax/html.vim
line 5: " Last Change:^I2012 Oct 05
line 6: 
line 7: " Please check :help html.vim for some comments and a description of the options
line 8: 
line 9: " For version 5.x: Clear all syntax items
line 10: " For version 6.x: Quit when a syntax file was already loaded
line 11: if !exists("main_syntax")
line 12:   if version < 600
line 13:     syntax clear
line 14:   elseif exists("b:current_syntax")
line 15:     finish
line 16:   endif
line 17:   let main_syntax = 'html'
line 18: endif
line 19: 
line 20: let s:cpo_save = &cpo
line 21: set cpo&vim
line 22: 
line 23: " don't use standard HiLink, it will not work with included syntax files
line 24: if version < 508
line 25:   command! -nargs=+ HtmlHiLink hi link <args>
line 26: else
line 27:   command! -nargs=+ HtmlHiLink hi def link <args>
line 28: endif
line 29: 
line 30: syntax spell toplevel
line 31: 
line 32: syn case ignore
line 33: 
line 34: " mark illegal characters
line 35: syn match htmlError "[<>&]"
line 36: 
line 37: 
line 38: " tags
line 39: syn region  htmlString   contained start=+"+ end=+"+ contains=htmlSpecialChar,javaScriptExpression,@htmlPreproc
line 40: syn region  htmlString   contained start=+'+ end=+'+ contains=htmlSpecialChar,javaScriptExpression,@htmlPreproc
line 41: syn match   htmlValue    contained "=[\t ]*[^'" \t>][^ \t>]*"hs=s+1   contains=javaScriptExpression,@htmlPreproc
line 42: syn region  htmlEndTag             start=+</+      end=+>+ contains=htmlTagN,htmlTagError
line 43: syn region  htmlTag                start=+<[^/]+   end=+>+ fold contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent,htmlCssDefinition,@htmlPreproc,@htmlArgCluster
line 44: syn match   htmlTagN     contained +<\s*[-a-zA-Z0-9]\++hs=s+1 contains=htmlTagName,htmlSpecialTagName,@htmlTagNameCluster
line 45: syn match   htmlTagN     contained +</\s*[-a-zA-Z0-9]\++hs=s+2 contains=htmlTagName,htmlSpecialTagName,@htmlTagNameCluster
line 46: syn match   htmlTagError contained "[^>]<"ms=s+1
line 47: 
line 48: 
line 49: " tag names
line 50: syn keyword htmlTagName contained address applet area a base basefont
line 51: syn keyword htmlTagName contained big blockquote br caption center
line 52: syn keyword htmlTagName contained cite code dd dfn dir div dl dt font
line 53: syn keyword htmlTagName contained form hr html img
line 54: syn keyword htmlTagName contained input isindex kbd li link map menu
line 55: syn keyword htmlTagName contained meta ol option param pre p samp span
line 56: syn keyword htmlTagName contained select small strike sub sup
line 57: syn keyword htmlTagName contained table td textarea th tr tt ul var xmp
line 58: syn match htmlTagName contained "\<\(b\|i\|u\|h[1-6]\|em\|strong\|head\|body\|title\)\>"
line 59: 
line 60: " new html 4.0 tags
line 61: syn keyword htmlTagName contained abbr acronym bdo button col label
line 62: syn keyword htmlTagName contained colgroup del fieldset iframe ins legend
line 63: syn keyword htmlTagName contained object optgroup q s tbody tfoot thead
line 64: 
line 65: " legal arg names
line 66: syn keyword htmlArg contained action
line 67: syn keyword htmlArg contained align alink alt archive background bgcolor
line 68: syn keyword htmlArg contained border bordercolor cellpadding
line 69: syn keyword htmlArg contained cellspacing checked class clear code codebase color
line 70: syn keyword htmlArg contained cols colspan content coords enctype face
line 71: syn keyword htmlArg contained gutter height hspace id
line 72: syn keyword htmlArg contained link lowsrc marginheight
line 73: syn keyword htmlArg contained marginwidth maxlength method name prompt
line 74: syn keyword htmlArg contained rel rev rows rowspan scrolling selected shape
line 75: syn keyword htmlArg contained size src start target text type url
line 76: syn keyword htmlArg contained usemap ismap valign value vlink vspace width wrap
line 77: syn match   htmlArg contained "\<\(http-equiv\|href\|title\)="me=e-1
line 78: 
line 79: " Netscape extensions
line 80: syn keyword htmlTagName contained frame noframes frameset nobr blink
line 81: syn keyword htmlTagName contained layer ilayer nolayer spacer
line 82: syn keyword htmlArg     contained frameborder noresize pagex pagey above below
line 83: syn keyword htmlArg     contained left top visibility clip id noshade
line 84: syn match   htmlArg     contained "\<z-index\>"
line 85: 
line 86: " Microsoft extensions
line 87: syn keyword htmlTagName contained marquee
line 88: 
line 89: " html 4.0 arg names
line 90: syn match   htmlArg contained "\<\(accept-charset\|label\)\>"
line 91: syn keyword htmlArg contained abbr accept accesskey axis char charoff charset
line 92: syn keyword htmlArg contained cite classid codetype compact data datetime
line 93: syn keyword htmlArg contained declare defer dir disabled for frame
line 94: syn keyword htmlArg contained headers hreflang lang language longdesc
line 95: syn keyword htmlArg contained multiple nohref nowrap object profile readonly
line 96: syn keyword htmlArg contained rules scheme scope span standby style
line 97: syn keyword htmlArg contained summary tabindex valuetype version
line 98: 
line 99: " special characters
line 100: syn match htmlSpecialChar "&#\=[0-9A-Za-z]\{1,8};"
line 101: 
line 102: " Comments (the real ones or the old netscape ones)
line 103: if exists("html_wrong_comments")
line 104:   syn region htmlComment                start=+<!--+    end=+--\s*>+ contains=@Spell
line 105: else
line 106:   syn region htmlComment                start=+<!+      end=+>+   contains=htmlCommentPart,htmlCommentError,@Spell
line 107:   syn match  htmlCommentError contained "[^><!]"
line 108:   syn region htmlCommentPart  contained start=+--+      end=+--\s*+  contains=@htmlPreProc,@Spell
line 109: endif
line 110: syn region htmlComment                  start=+<!DOCTYPE+ keepend end=+>+
line 111: 
line 112: " server-parsed commands
line 113: syn region htmlPreProc start=+<!--#+ end=+-->+ contains=htmlPreStmt,htmlPreError,htmlPreAttr
line 114: syn match htmlPreStmt contained "<!--#\(config\|echo\|exec\|fsize\|flastmod\|include\|printenv\|set\|if\|elif\|else\|endif\|geoguide\)\>"
line 115: syn match htmlPreError contained "<!--#\S*"ms=s+4
line 116: syn match htmlPreAttr contained "\w\+=[^"]\S\+" contains=htmlPreProcAttrError,htmlPreProcAttrName
line 117: syn region htmlPreAttr contained start=+\w\+="+ skip=+\\\\\|\\"+ end=+"+ contains=htmlPreProcAttrName keepend
line 118: syn match htmlPreProcAttrError contained "\w\+="he=e-1
line 119: syn match htmlPreProcAttrName contained "\(expr\|errmsg\|sizefmt\|timefmt\|var\|cgi\|cmd\|file\|virtual\|value\)="he=e-1
line 120: 
line 121: if !exists("html_no_rendering")
line 122:   " rendering
line 123:   syn cluster htmlTop contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLink,javaScript,@htmlPreproc
line 124: 
line 125:   syn region htmlBold start="<b\>" end="</b>"me=e-4 contains=@htmlTop,htmlBoldUnderline,htmlBoldItalic
line 126:   syn region htmlBold start="<strong\>" end="</strong>"me=e-9 contains=@htmlTop,htmlBoldUnderline,htmlBoldItalic
line 127:   syn region htmlBoldUnderline contained start="<u\>" end="</u>"me=e-4 contains=@htmlTop,htmlBoldUnderlineItalic
line 128:   syn region htmlBoldItalic contained start="<i\>" end="</i>"me=e-4 contains=@htmlTop,htmlBoldItalicUnderline
line 129:   syn region htmlBoldItalic contained start="<em\>" end="</em>"me=e-5 contains=@htmlTop,htmlBoldItalicUnderline
line 130:   syn region htmlBoldUnderlineItalic contained start="<i\>" end="</i>"me=e-4 contains=@htmlTop
line 131:   syn region htmlBoldUnderlineItalic contained start="<em\>" end="</em>"me=e-5 contains=@htmlTop
line 132:   syn region htmlBoldItalicUnderline contained start="<u\>" end="</u>"me=e-4 contains=@htmlTop,htmlBoldUnderlineItalic
line 133: 
line 134:   syn region htmlUnderline start="<u\>" end="</u>"me=e-4 contains=@htmlTop,htmlUnderlineBold,htmlUnderlineItalic
line 135:   syn region htmlUnderlineBold contained start="<b\>" end="</b>"me=e-4 contains=@htmlTop,htmlUnderlineBoldItalic
line 136:   syn region htmlUnderlineBold contained start="<strong\>" end="</strong>"me=e-9 contains=@htmlTop,htmlUnderlineBoldItalic
line 137:   syn region htmlUnderlineItalic contained start="<i\>" end="</i>"me=e-4 contains=@htmlTop,htmlUnderlineItalicBold
line 138:   syn region htmlUnderlineItalic contained start="<em\>" end="</em>"me=e-5 contains=@htmlTop,htmlUnderlineItalicBold
line 139:   syn region htmlUnderlineItalicBold contained start="<b\>" end="</b>"me=e-4 contains=@htmlTop
line 140:   syn region htmlUnderlineItalicBold contained start="<strong\>" end="</strong>"me=e-9 contains=@htmlTop
line 141:   syn region htmlUnderlineBoldItalic contained start="<i\>" end="</i>"me=e-4 contains=@htmlTop
line 142:   syn region htmlUnderlineBoldItalic contained start="<em\>" end="</em>"me=e-5 contains=@htmlTop
line 143: 
line 144:   syn region htmlItalic start="<i\>" end="</i>"me=e-4 contains=@htmlTop,htmlItalicBold,htmlItalicUnderline
line 145:   syn region htmlItalic start="<em\>" end="</em>"me=e-5 contains=@htmlTop
line 146:   syn region htmlItalicBold contained start="<b\>" end="</b>"me=e-4 contains=@htmlTop,htmlItalicBoldUnderline
line 147:   syn region htmlItalicBold contained start="<strong\>" end="</strong>"me=e-9 contains=@htmlTop,htmlItalicBoldUnderline
line 148:   syn region htmlItalicBoldUnderline contained start="<u\>" end="</u>"me=e-4 contains=@htmlTop
line 149:   syn region htmlItalicUnderline contained start="<u\>" end="</u>"me=e-4 contains=@htmlTop,htmlItalicUnderlineBold
line 150:   syn region htmlItalicUnderlineBold contained start="<b\>" end="</b>"me=e-4 contains=@htmlTop
line 151:   syn region htmlItalicUnderlineBold contained start="<strong\>" end="</strong>"me=e-9 contains=@htmlTop
line 152: 
line 153:   syn match htmlLeadingSpace "^\s\+" contained
line 154:   syn region htmlLink start="<a\>\_[^>]*\<href\>" end="</a>"me=e-4 contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLeadingSpace,javaScript,@htmlPreproc
line 155:   syn region htmlH1 start="<h1\>" end="</h1>"me=e-5 contains=@htmlTop
line 156:   syn region htmlH2 start="<h2\>" end="</h2>"me=e-5 contains=@htmlTop
line 157:   syn region htmlH3 start="<h3\>" end="</h3>"me=e-5 contains=@htmlTop
line 158:   syn region htmlH4 start="<h4\>" end="</h4>"me=e-5 contains=@htmlTop
line 159:   syn region htmlH5 start="<h5\>" end="</h5>"me=e-5 contains=@htmlTop
line 160:   syn region htmlH6 start="<h6\>" end="</h6>"me=e-5 contains=@htmlTop
line 161:   syn region htmlHead start="<head\>" end="</head>"me=e-7 end="<body\>"me=e-5 end="<h[1-6]\>"me=e-3 contains=htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLink,htmlTitle,javaScript,cssStyle,@htmlPreproc
line 162:   syn region htmlTitle start="<title\>" end="</title>"me=e-8 contains=htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,javaScript,@htmlPreproc
line 163: endif
line 164: 
line 165: syn keyword htmlTagName         contained noscript
line 166: syn keyword htmlSpecialTagName  contained script style
line 167: if main_syntax != 'java' || exists("java_javascript")
line 168:   " JAVA SCRIPT
line 169:   syn include @htmlJavaScript syntax/javascript.vim
Searching for "syntax/javascript.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/syntax/javascript.vim"
Searching for "/home/kguest/.vim/syntax/javascript.vim"
chdir(/home/kguest/.vim/syntax)
fchdir() to previous dir
line 169: sourcing "/home/kguest/.vim/syntax/javascript.vim"
line 1: " Vim syntax file
line 2: " Language:     JavaScript
line 3: " Maintainer:   Yi Zhao (ZHAOYI) <zzlinux AT hotmail DOT com>
line 4: " Last Change:  2007 Jan. 30th
line 5: " Version:      0.7.3
line 6: " Changes:      Add the keywords for JavaScript 1.7: let, yield,
line 7: " 
line 8: " TODO:
line 9: "  - Add the HTML syntax inside the JSDoc
line 10: 
line 11: if !exists("main_syntax")
line 12:   if version < 600
line 13:     syntax clear
line 14:   elseif exists("b:current_syntax")
line 15:     finish
line 16:   endif
line 17:   let main_syntax = 'javascript'
line 18: endif
line 19: 
line 20: "" Drop fold if it set but VIM doesn't support it.
line 21: if version < 600 && exists("javaScript_fold")
line 22:   unlet javaScript_fold
line 23: else
line 24:   let javaScript_fold = 'false'
line 25: endif
line 26: 
line 27: "" dollar sign is permitted anywhere in an identifier
line 28: setlocal iskeyword+=$
line 29: 
line 30: syntax sync fromstart
line 31: syntax sync maxlines=200
line 32: 
line 33: "" JavaScript comments
line 34: syntax keyword javaScriptCommentTodo    TODO FIXME XXX TBD contained
line 35: syntax region  javaScriptLineComment    start=+\/\/+ end=+$+ keepend contains=javaScriptCommentTodo,@Spell 
line 36: syntax region  javaScriptLineComment    start=+^\s*\/\/+ skip=+\n\s*\/\/+ end=+$+ keepend contains=javaScriptCommentTodo,@Spell 
line 37: syntax region  javaScriptCvsTag         start="\$\cid:" end="\$" oneline contained
line 38: syntax region  javaScriptComment        start="/\*"  end="\*/" contains=javaScriptCommentTodo,javaScriptCvsTag,@Spell fold
line 39: 
line 40: "" JSDoc support start
line 41: if !exists("javascript_ignore_javaScriptdoc")
line 42:   syntax case ignore
line 43: 
line 44:   "" syntax coloring for javadoc comments (HTML)
line 45:   "syntax include @javaHtml <sfile>:p:h/html.vim
line 46:   "unlet b:current_syntax  
line 47:   
line 48:   syntax region javaScriptDocComment    matchgroup=javaScriptComment start="/\*\*\s*$"  end="\*/" contains=javaScriptDocTags,javaScriptCommentTodo,javaScriptCvsTag,@javaScriptHtml,@Spell fold
line 49:   syntax match  javaScriptDocTags       contained "@\(param\|argument\|requires\|exception\|throws\|type\|class\|extends\|see\|link\|member\|base\|file\)\>" nextgroup=javaScriptDocParam,javaScriptDocSeeTag skipwhite
line 50:   syntax match  javaScriptDocTags       contained "@\(deprecated\|fileoverview\|author\|license\|version\|returns\=\|constructor\|private\|final\|ignore\|addon\|exec\)\>"
line 51:   syntax match  javaScriptDocParam      contained "\%(#\|\w\|\.\|:\|\/\)\+"
line 52:   syntax region javaScriptDocSeeTag     contained matchgroup=javaScriptDocSeeTag start="{" end="}" contains=javaScriptDocTags
line 53: 
line 54:   syntax case match
line 55: endif   "" JSDoc end
line 56: 
line 57: syntax case match
line 58: 
line 59: "" Syntax in the JavaScript code
line 60: syntax match   javaScriptSpecial        "\\\d\d\d\|\\x\x\{2\}\|\\u\x\{4\}\|\\."
line 61: syntax region  javaScriptStringD        start=+"+  skip=+\\\\\|\\$"+  end=+"+  contains=javaScriptSpecial,@htmlPreproc
line 62: syntax region  javaScriptStringS        start=+'+  skip=+\\\\\|\\$'+  end=+'+  contains=javaScriptSpecial,@htmlPreproc
line 63: syntax region  javaScriptRegexpString   start=+/\(\*\|/\)\@!+ skip=+\\\\\|\\/+ end=+/[gim]\{-,3}\(\s*[),.;$]\)\@=+ contains=javaScriptSpecial,@htmlPreproc oneline
line 64: syntax match   javaScriptNumber         /\<-\=\d\+L\=\>\|\<0[xX]\x\+\>/
line 65: syntax match   javaScriptFloat          /\<-\=\%(\d\+\.\d\+\|\d\+\.\|\.\d\+\)\%([eE][+-]\=\d\+\)\=\>/
line 66: syntax match   javaScriptLabel          /\(?\s*\)\@<!\<\w\+\(\s*:\)\@=/
line 67: 
line 68: "" JavaScript Prototype 
line 69: syntax keyword javaScriptPrototype      prototype 
line 70: 
line 71: "" Programme Keywords
line 72: syntax keyword javaScriptSource         import export
line 73: syntax keyword javaScriptType           const this var void yield
line 74: syntax keyword javaScriptOperator       delete new in instanceof let typeof 
line 75: syntax keyword javaScriptBoolean        true false
line 76: syntax keyword javaScriptNull           null
line 77: 
line 78: "" Statement Keywords
line 79: syntax keyword javaScriptConditional    if else
line 80: syntax keyword javaScriptRepeat         do while for
line 81: syntax keyword javaScriptBranch         break continue switch case default return 
line 82: syntax keyword javaScriptStatement      try catch throw with finally 
line 83: 
line 84: syntax keyword javaScriptGlobalObjects  Array Boolean Date Function Infinity JavaArray JavaClass JavaObject JavaPackage Math Number NaN Object Packages RegExp String Undefined java netscape sun
line 85: 
line 86: syntax keyword javaScriptExceptions     Error EvalError RangeError ReferenceError SyntaxError TypeError URIError
line 87: 
line 88: syntax keyword javaScriptFutureKeys     abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public 
line 89: 
line 90: "" DOM/HTML/CSS specified things
line 91: 
line 92:   " DOM2 Objects
line 93:   syntax keyword javaScriptGlobalObjects  DOMImplementation DocumentFragment Document Node NodeList NamedNodeMap CharacterData Attr Element Text Comment CDATASection DocumentType Notation Entity EntityReference ProcessingInstruction
line 94:   syntax keyword javaScriptExceptions     DOMException
line 95:   
line 96:   " DOM2 CONSTANT
line 97:   syntax keyword javaScriptDomErrNo       INDEX_SIZE_ERR DOMSTRING_SIZE_ERR HIERARCHY_REQUEST_ERR WRONG_DOCUMENT_ERR INVALID_CHARACTER_ERR NO_DATA_ALLOWED_ERR NO_MODIFICATION_ALLOWED_ERR NOT_FOUND_ERR NOT_SUPPORTED_ERR INUSE_ATTRIBUTE_ERR INVALID_STATE_ERR SYNTAX_ERR INVALID_MODIFICATION_ERR NAMESPACE_ERR INVALID_ACCESS_ERR
line 98:   syntax keyword javaScriptDomNodeConsts  ELEMENT_NODE ATTRIBUTE_NODE TEXT_NODE CDATA_SECTION_NODE ENTITY_REFERENCE_NODE ENTITY_NODE PROCESSING_INSTRUCTION_NODE COMMENT_NODE DOCUMENT_NODE DOCUMENT_TYPE_NODE DOCUMENT_FRAGMENT_NODE NOTATION_NODE 
line 99:   
line 100:   " HTML events and internal variables
line 101:   syntax case ignore
line 102:   syntax keyword javaScriptHtmlEvents     onblur onclick oncontextmenu ondblclick onfocus onkeydown onkeypress onkeyup onmousedown onmousemove onmouseout onmouseover onmouseup onresize
line 103:   syntax case match
line 104: 
line 105: " Follow stuff should be highligh within a special context
line 106: " While it can't be handled with context depended with Regex based highlight
line 107: " So, turn it off by default
line 108: if exists("javascript_enable_domhtmlcss")
line 109: 
line 110:     " DOM2 things
line 111:     syntax match javaScriptDomElemAttrs     contained /\%(nodeName\|nodeValue\|nodeType\|parentNode\|childNodes\|firstChild\|lastChild\|previousSibling\|nextSibling\|attributes\|ownerDocument\|namespaceURI\|prefix\|localName\|tagName\)\>/
line 112:     syntax match javaScriptDomElemFuncs     contained /\%(insertBefore\|replaceChild\|removeChild\|appendChild\|hasChildNodes\|cloneNode\|normalize\|isSupported\|hasAttributes\|getAttribute\|setAttribute\|removeAttribute\|getAttributeNode\|setAttributeNode\|removeAttributeNode\|getElementsByTagName\|getAttributeNS\|setAttributeNS\|removeAttributeNS\|getAttributeNodeNS\|setAttributeNodeNS\|getElementsByTagNameNS\|hasAttribute\|hasAttributeNS\)\>/ nextgroup=javaScriptParen skipwhite
line 113:     " HTML things
line 114:     syntax match javaScriptHtmlElemAttrs    contained /\%(className\|clientHeight\|clientLeft\|clientTop\|clientWidth\|dir\|id\|innerHTML\|lang\|length\|offsetHeight\|offsetLeft\|offsetParent\|offsetTop\|offsetWidth\|scrollHeight\|scrollLeft\|scrollTop\|scrollWidth\|style\|tabIndex\|title\)\>/
line 115:     syntax match javaScriptHtmlElemFuncs    contained /\%(blur\|click\|focus\|scrollIntoView\|addEventListener\|dispatchEvent\|removeEventListener\|item\)\>/ nextgroup=javaScriptParen skipwhite
line 116: 
line 117:     " CSS Styles in JavaScript
line 118:     syntax keyword javaScriptCssStyles      contained color font fontFamily fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontWeight letterSpacing lineBreak lineHeight quotes rubyAlign rubyOverhang rubyPosition 
line 119:     syntax keyword javaScriptCssStyles      contained textAlign textAlignLast textAutospace textDecoration textIndent textJustify textJustifyTrim textKashidaSpace textOverflowW6 textShadow textTransform textUnderlinePosition 
line 120:     syntax keyword javaScriptCssStyles      contained unicodeBidi whiteSpace wordBreak wordSpacing wordWrap writingMode
line 121:     syntax keyword javaScriptCssStyles      contained bottom height left position right top width zIndex 
line 122:     syntax keyword javaScriptCssStyles      contained border borderBottom borderLeft borderRight borderTop borderBottomColor borderLeftColor borderTopColor borderBottomStyle borderLeftStyle borderRightStyle borderTopStyle borderBottomWidth borderLeftWidth borderRightWidth borderTopWidth borderColor borderStyle borderWidth borderCollapse borderSpacing captionSide emptyCells tableLayout
line 123:     syntax keyword javaScriptCssStyles      contained margin marginBottom marginLeft marginRight marginTop outline outlineColor outlineStyle outlineWidth padding paddingBottom paddingLeft paddingRight paddingTop 
line 124:     syntax keyword javaScriptCssStyles      contained listStyle listStyleImage listStylePosition listStyleType 
line 125:     syntax keyword javaScriptCssStyles      contained background backgroundAttachment backgroundColor backgroundImage gackgroundPosition backgroundPositionX backgroundPositionY backgroundRepeat
line 126:     syntax keyword javaScriptCssStyles      contained clear clip clipBottom clipLeft clipRight clipTop content counterIncrement counterReset cssFloat cursor direction display filter layoutGrid layoutGridChar layoutGridLine layoutGridMode layoutGridType 
line 127:     syntax keyword javaScriptCssStyles      contained marks maxHeight maxWidth minHeight minWidth opacity MozOpacity overflow overflowX overflowY verticalAlign visibility zoom cssText 
line 128:     syntax keyword javaScriptCssStyles      contained scrollbar3dLightColor scrollbarArrowColor scrollbarBaseColor scrollbarDarkShadowColor scrollbarFaceColor scrollbarHighlightColor scrollbarShadowColor scrollbarTrackColor
line 129: 
line 130:     " Highlight ways
line 131:     syntax match javaScriptDotNotation      "\." nextgroup=javaScriptPrototype,javaScriptDomElemAttrs,javaScriptDomElemFuncs,javaScriptHtmlElemAttrs,javaScriptHtmlElemFuncs
line 132:     syntax match javaScriptDotNotation      "\.style\." nextgroup=javaScriptCssStyles
line 133:     
line 134: endif "DOM/HTML/CSS
line 135: 
line 136: "" end DOM/HTML/CSS specified things
line 137: 
line 138: 
line 139: "" Code blocks
line 140: syntax cluster javaScriptAll       contains=javaScriptComment,javaScriptLineComment,javaScriptDocComment,javaScriptStringD,javaScriptStringS,javaScriptRegexpString,javaScriptNumber,javaScriptFloat,javaScriptLabel,javaScriptSource,javaScriptType,javaScriptOperator,javaScriptBoolean,javaScriptNull,javaScriptFunction,javaScriptConditional,javaScriptRepeat,javaScriptBranch,javaScriptStatement,javaScriptGlobalObjects,javaScriptExceptions,javaScriptFutureKeys,javaScriptDomErrNo,javaScriptDomNodeConsts,javaScriptHtmlEvents,javaScriptDotNotation
line 141: syntax region  javaScriptBracket   matchgroup=javaScriptBracket transparent start="\[" end="\]" contains=@javaScriptAll,javaScriptParensErrB,javaScriptParensErrC,javaScriptBracket,javaScriptParen,javaScriptBlock,@htmlPreproc
line 142: syntax region  javaScriptParen     matchgroup=javaScriptParen   transparent start="("  end=")"  contains=@javaScriptAll,javaScriptParensErrA,javaScriptParensErrC,javaScriptParen,javaScriptBracket,javaScriptBlock,@htmlPreproc
line 143: syntax region  javaScriptBlock     matchgroup=javaScriptBlock   transparent start="{"  end="}"  contains=@javaScriptAll,javaScriptParensErrA,javaScriptParensErrB,javaScriptParen,javaScriptBracket,javaScriptBlock,@htmlPreproc
line 144: 
line 145: "" catch errors caused by wrong parenthesis
line 146: syntax match   javaScriptParensError    ")\|}\|\]"
line 147: syntax match   javaScriptParensErrA     contained "\]"
line 148: syntax match   javaScriptParensErrB     contained ")"
line 149: syntax match   javaScriptParensErrC     contained "}"
line 150: 
line 151: if main_syntax == "javascript"
line 152:   syntax sync ccomment javaScriptComment
line 153: endif
line 154: 
line 155: "" Fold control
line 156: if exists("javaScript_fold")
line 157:     syntax match   javaScriptFunction       /\<function\>/ nextgroup=javaScriptFuncName skipwhite 
line 158:     syntax region  javaScriptFuncName       contained matchgroup=javaScriptFuncName start=/\%(\$\|\w\)*\s*(/ end=/)/ contains=javaScriptLineComment,javaScriptComment nextgroup=javaScriptFuncBlock skipwhite skipempty
line 159:     syntax region  javaScriptFuncBlock      contained matchgroup=javaScriptFuncBlock start="{" end="}" contains=@javaScriptAll,javaScriptParensErrA,javaScriptParensErrB,javaScriptParen,javaScriptBracket,javaScriptBlock fold
line 160: 
line 161:     "" Fold setting
line 162:     setlocal foldlevel=0
line 163:     setlocal foldmethod=syntax
line 164: 
line 165:     setlocal foldtext=FT_JavaScriptDoc()
line 166: 
line 167:     "" Default fold text for JavaScript JSDoc and Function
line 168:     function! FT_JavaScriptDoc()
line 181: 
line 182: else
line 183:     syntax keyword javaScriptFunction       function
line 184: endif
line 185: 
line 186: " Define the default highlighting.
line 187: " For version 5.7 and earlier: only when not done already
line 188: " For version 5.8 and later: only when an item doesn't have highlighting yet
line 189: if version >= 508 || !exists("did_javascript_syn_inits")
line 190:   if version < 508
line 191:     let did_javascript_syn_inits = 1
line 192:     command -nargs=+ HiLink hi link <args>
line 193:   else
line 194:     command -nargs=+ HiLink hi def link <args>
line 195:   endif
line 196:   HiLink javaScriptComment              Comment
line 196: hi def link javaScriptComment              Comment
line 197:   HiLink javaScriptLineComment          Comment
line 197: hi def link javaScriptLineComment          Comment
line 198:   HiLink javaScriptDocComment           Comment
line 198: hi def link javaScriptDocComment           Comment
line 199:   HiLink javaScriptCommentTodo          Todo
line 199: hi def link javaScriptCommentTodo          Todo
line 200:   HiLink javaScriptCvsTag               Function
line 200: hi def link javaScriptCvsTag               Function
line 201:   HiLink javaScriptDocTags              Special
line 201: hi def link javaScriptDocTags              Special
line 202:   HiLink javaScriptDocSeeTag            Function
line 202: hi def link javaScriptDocSeeTag            Function
line 203:   HiLink javaScriptDocParam             Function
line 203: hi def link javaScriptDocParam             Function
line 204:   HiLink javaScriptStringS              String
line 204: hi def link javaScriptStringS              String
line 205:   HiLink javaScriptStringD              String
line 205: hi def link javaScriptStringD              String
line 206:   HiLink javaScriptRegexpString         String
line 206: hi def link javaScriptRegexpString         String
line 207:   HiLink javaScriptCharacter            Character
line 207: hi def link javaScriptCharacter            Character
line 208:   HiLink javaScriptPrototype            Type
line 208: hi def link javaScriptPrototype            Type
line 209:   HiLink javaScriptConditional          Conditional
line 209: hi def link javaScriptConditional          Conditional
line 210:   HiLink javaScriptBranch               Conditional
line 210: hi def link javaScriptBranch               Conditional
line 211:   HiLink javaScriptRepeat               Repeat
line 211: hi def link javaScriptRepeat               Repeat
line 212:   HiLink javaScriptStatement            Statement
line 212: hi def link javaScriptStatement            Statement
line 213:   HiLink javaScriptFunction             Function
line 213: hi def link javaScriptFunction             Function
line 214:   HiLink javaScriptError                Error
line 214: hi def link javaScriptError                Error
line 215:   HiLink javaScriptParensError          Error
line 215: hi def link javaScriptParensError          Error
line 216:   HiLink javaScriptParensErrA           Error
line 216: hi def link javaScriptParensErrA           Error
line 217:   HiLink javaScriptParensErrB           Error
line 217: hi def link javaScriptParensErrB           Error
line 218:   HiLink javaScriptParensErrC           Error
line 218: hi def link javaScriptParensErrC           Error
line 219:   HiLink javaScriptOperator             Operator
line 219: hi def link javaScriptOperator             Operator
line 220:   HiLink javaScriptType                 Type
line 220: hi def link javaScriptType                 Type
line 221:   HiLink javaScriptNull                 Type
line 221: hi def link javaScriptNull                 Type
line 222:   HiLink javaScriptNumber               Number
line 222: hi def link javaScriptNumber               Number
line 223:   HiLink javaScriptFloat                Number
line 223: hi def link javaScriptFloat                Number
line 224:   HiLink javaScriptBoolean              Boolean
line 224: hi def link javaScriptBoolean              Boolean
line 225:   HiLink javaScriptLabel                Label
line 225: hi def link javaScriptLabel                Label
line 226:   HiLink javaScriptSpecial              Special
line 226: hi def link javaScriptSpecial              Special
line 227:   HiLink javaScriptSource               Special
line 227: hi def link javaScriptSource               Special
line 228:   HiLink javaScriptGlobalObjects        Special
line 228: hi def link javaScriptGlobalObjects        Special
line 229:   HiLink javaScriptExceptions           Special
line 229: hi def link javaScriptExceptions           Special
line 230: 
line 231:   HiLink javaScriptDomErrNo             Constant
line 231: hi def link javaScriptDomErrNo             Constant
line 232:   HiLink javaScriptDomNodeConsts        Constant
line 232: hi def link javaScriptDomNodeConsts        Constant
line 233:   HiLink javaScriptDomElemAttrs         Label
line 233: hi def link javaScriptDomElemAttrs         Label
line 234:   HiLink javaScriptDomElemFuncs         PreProc
line 234: hi def link javaScriptDomElemFuncs         PreProc
line 235: 
line 236:   HiLink javaScriptHtmlEvents           Special
line 236: hi def link javaScriptHtmlEvents           Special
line 237:   HiLink javaScriptHtmlElemAttrs        Label
line 237: hi def link javaScriptHtmlElemAttrs        Label
line 238:   HiLink javaScriptHtmlElemFuncs        PreProc
line 238: hi def link javaScriptHtmlElemFuncs        PreProc
line 239: 
line 240:   HiLink javaScriptCssStyles            Label
line 240: hi def link javaScriptCssStyles            Label
line 241: 
line 242:   delcommand HiLink
line 243: endif
line 244: 
line 245: " Define the htmlJavaScript for HTML syntax html.vim
line 246: "syntax clear htmlJavaScript
line 247: "syntax clear javaScriptExpression
line 248: syntax cluster  htmlJavaScript contains=@javaScriptAll,javaScriptBracket,javaScriptParen,javaScriptBlock,javaScriptParenError
line 249: syntax cluster  javaScriptExpression contains=@javaScriptAll,javaScriptBracket,javaScriptParen,javaScriptBlock,javaScriptParenError,@htmlPreproc
line 250: 
line 251: let b:current_syntax = "javascript"
line 252: if main_syntax == 'javascript'
line 253:   unlet main_syntax
line 254: endif
line 255: 
line 256: " vim: ts=4
finished sourcing /home/kguest/.vim/syntax/javascript.vim
continuing in /usr/share/vim/vim74/syntax/html.vim
Searching for "/var/lib/vim/addons/syntax/javascript.vim"
Searching for "/usr/share/vim/vimfiles/syntax/javascript.vim"
Searching for "/usr/share/vim/vim74/syntax/javascript.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 169: sourcing "/usr/share/vim/vim74/syntax/javascript.vim"
line 1: " Vim syntax file
line 2: " Language:^IJavaScript
line 3: " Maintainer:^IClaudio Fleiner <claudio@fleiner.com>
line 4: " Updaters:^IScott Shattuck (ss) <ss@technicalpursuit.com>
line 5: " URL:^I^Ihttp://www.fleiner.com/vim/syntax/javascript.vim
line 6: " Changes:^I(ss) added keywords, reserved words, and other identifiers
line 7: "^I^I(ss) repaired several quoting and grouping glitches
line 8: "^I^I(ss) fixed regex parsing issue with multiple qualifiers [gi]
line 9: "^I^I(ss) additional factoring of keywords, globals, and members
line 10: " Last Change:^I2012 Oct 05
line 11: " ^I^I2013 Jun 12: adjusted javaScriptRegexpString (Kevin Locke)
line 12: 
line 13: " For version 5.x: Clear all syntax items
line 14: " For version 6.x: Quit when a syntax file was already loaded
line 15: " tuning parameters:
line 16: " unlet javaScript_fold
line 17: 
line 18: if !exists("main_syntax")
line 19:   if version < 600
line 20:     syntax clear
line 21:   elseif exists("b:current_syntax")
line 22:     finish
line 23:   endif
line 24:   let main_syntax = 'javascript'
line 25: elseif exists("b:current_syntax") && b:current_syntax == "javascript"
line 26:   finish
finished sourcing /usr/share/vim/vim74/syntax/javascript.vim
continuing in /usr/share/vim/vim74/syntax/html.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/javascript.vim"
Searching for "/var/lib/vim/addons/after/syntax/javascript.vim"
Searching for "/home/kguest/.vim/after/syntax/javascript.vim"
line 170:   unlet b:current_syntax
line 171:   syn region  javaScript start=+<script\_[^>]*>+ keepend end=+</script>+me=s-1 contains=@htmlJavaScript,htmlCssStyleComment,htmlScriptTag,@htmlPreproc
line 172:   syn region  htmlScriptTag     contained start=+<script+ end=+>+ fold contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent
line 173:   HtmlHiLink htmlScriptTag htmlTag
line 173: hi def link htmlScriptTag htmlTag
line 174: 
line 175:   " html events (i.e. arguments that include javascript commands)
line 176:   if exists("html_extended_events")
line 177:     syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*'+ end=+'+ contains=htmlEventSQ
line 178:     syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*"+ end=+"+ contains=htmlEventDQ
line 179:   else
line 180:     syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*'+ end=+'+ keepend contains=htmlEventSQ
line 181:     syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*"+ end=+"+ keepend contains=htmlEventDQ
line 182:   endif
line 183:   syn region htmlEventSQ        contained start=+'+ms=s+1 end=+'+me=s-1 contains=@htmlJavaScript
line 184:   syn region htmlEventDQ        contained start=+"+ms=s+1 end=+"+me=s-1 contains=@htmlJavaScript
line 185:   HtmlHiLink htmlEventSQ htmlEvent
line 185: hi def link htmlEventSQ htmlEvent
line 186:   HtmlHiLink htmlEventDQ htmlEvent
line 186: hi def link htmlEventDQ htmlEvent
line 187: 
line 188:   " a javascript expression is used as an arg value
line 189:   syn region  javaScriptExpression contained start=+&{+ keepend end=+};+ contains=@htmlJavaScript,@htmlPreproc
line 190: endif
line 191: 
line 192: if main_syntax != 'java' || exists("java_vb")
line 193:   " VB SCRIPT
line 194:   syn include @htmlVbScript syntax/vb.vim
Searching for "syntax/vb.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/syntax/vb.vim"
Searching for "/home/kguest/.vim/syntax/vb.vim"
Searching for "/var/lib/vim/addons/syntax/vb.vim"
Searching for "/usr/share/vim/vimfiles/syntax/vb.vim"
Searching for "/usr/share/vim/vim74/syntax/vb.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 194: sourcing "/usr/share/vim/vim74/syntax/vb.vim"
line 1: " Vim syntax file
line 2: " Language:^IVisual Basic
line 3: " Maintainer:^ITim Chase <vb.vim@tim.thechases.com>
line 4: " Former Maintainer:^IRobert M. Cortopassi <cortopar@mindspring.com>
line 5: "^I(tried multiple times to contact, but email bounced)
line 6: " Last Change:
line 7: "   2005 May 25  Synched with work by Thomas Barthel
line 8: "   2004 May 30  Added a few keywords
line 9: 
line 10: " This was thrown together after seeing numerous requests on the
line 11: " VIM and VIM-DEV mailing lists.  It is by no means complete.
line 12: " Send comments, suggestions and requests to the maintainer.
line 13: 
line 14: " For version 5.x: Clear all syntax items
line 15: " For version 6.x: Quit when a syntax file was already loaded
line 16: if version < 600
line 17: ^Isyntax clear
line 18: elseif exists("b:current_syntax")
line 19: ^Ifinish
line 20: endif
line 21: 
line 22: " VB is case insensitive
line 23: syn case ignore
line 24: 
line 25: syn keyword vbConditional If Then ElseIf Else Select Case
line 26: 
line 27: syn keyword vbOperator AddressOf And ByRef ByVal Eqv Imp In
line 28: syn keyword vbOperator Is Like Mod Not Or To Xor
line 29: 
line 30: syn match vbOperator "[()+.,\-/*=&]"
line 31: syn match vbOperator "[<>]=\="
line 32: syn match vbOperator "<>"
line 33: syn match vbOperator "\s\+_$"
line 34: 
line 35: syn keyword vbBoolean  True False
line 36: syn keyword vbConst Null Nothing
line 37: 
line 38: syn keyword vbRepeat Do For ForEach Loop Next
line 39: syn keyword vbRepeat Step To Until Wend While
line 40: 
line 41: syn keyword vbEvents AccessKeyPress Activate ActiveRowChanged
line 42: syn keyword vbEvents AfterAddFile AfterChangeFileName AfterCloseFile
line 43: syn keyword vbEvents AfterColEdit AfterColUpdate AfterDelete
line 44: syn keyword vbEvents AfterInsert AfterLabelEdit AfterRemoveFile
line 45: syn keyword vbEvents AfterUpdate AfterWriteFile AmbientChanged
line 46: syn keyword vbEvents ApplyChanges Associate AsyncProgress
line 47: syn keyword vbEvents AsyncReadComplete AsyncReadProgress AxisActivated
line 48: syn keyword vbEvents AxisLabelActivated AxisLabelSelected
line 49: syn keyword vbEvents AxisLabelUpdated AxisSelected AxisTitleActivated
line 50: syn keyword vbEvents AxisTitleSelected AxisTitleUpdated AxisUpdated
line 51: syn keyword vbEvents BeforeClick BeforeColEdit BeforeColUpdate
line 52: syn keyword vbEvents BeforeConnect BeforeDelete BeforeInsert
line 53: syn keyword vbEvents BeforeLabelEdit BeforeLoadFile BeforeUpdate
line 54: syn keyword vbEvents BeginRequest BeginTrans ButtonClick
line 55: syn keyword vbEvents ButtonCompleted ButtonDropDown ButtonGotFocus
line 56: syn keyword vbEvents ButtonLostFocus CallbackKeyDown Change Changed
line 57: syn keyword vbEvents ChartActivated ChartSelected ChartUpdated Click
line 58: syn keyword vbEvents Close CloseQuery CloseUp ColEdit ColResize
line 59: syn keyword vbEvents Collapse ColumnClick CommitTrans Compare
line 60: syn keyword vbEvents ConfigChageCancelled ConfigChanged
line 61: syn keyword vbEvents ConfigChangedCancelled Connect ConnectionRequest
line 62: syn keyword vbEvents CurrentRecordChanged DECommandAdded
line 63: syn keyword vbEvents DECommandPropertyChanged DECommandRemoved
line 64: syn keyword vbEvents DEConnectionAdded DEConnectionPropertyChanged
line 65: syn keyword vbEvents DEConnectionRemoved DataArrival DataChanged
line 66: syn keyword vbEvents DataUpdated DateClicked DblClick Deactivate
line 67: syn keyword vbEvents DevModeChange DeviceArrival DeviceOtherEvent
line 68: syn keyword vbEvents DeviceQueryRemove DeviceQueryRemoveFailed
line 69: syn keyword vbEvents DeviceRemoveComplete DeviceRemovePending
line 70: syn keyword vbEvents Disconnect DisplayChanged Dissociate
line 71: syn keyword vbEvents DoGetNewFileName Done DonePainting DownClick
line 72: syn keyword vbEvents DragDrop DragOver DropDown EditProperty EditQuery
line 73: syn keyword vbEvents EndRequest EnterCell EnterFocus ExitFocus Expand
line 74: syn keyword vbEvents FontChanged FootnoteActivated FootnoteSelected
line 75: syn keyword vbEvents FootnoteUpdated Format FormatSize GotFocus
line 76: syn keyword vbEvents HeadClick HeightChanged Hide InfoMessage
line 77: syn keyword vbEvents IniProperties InitProperties Initialize
line 78: syn keyword vbEvents ItemActivated ItemAdded ItemCheck ItemClick
line 79: syn keyword vbEvents ItemReloaded ItemRemoved ItemRenamed
line 80: syn keyword vbEvents ItemSeletected KeyDown KeyPress KeyUp LeaveCell
line 81: syn keyword vbEvents LegendActivated LegendSelected LegendUpdated
line 82: syn keyword vbEvents LinkClose LinkError LinkExecute LinkNotify
line 83: syn keyword vbEvents LinkOpen Load LostFocus MouseDown MouseMove
line 84: syn keyword vbEvents MouseUp NodeCheck NodeClick OLECompleteDrag
line 85: syn keyword vbEvents OLEDragDrop OLEDragOver OLEGiveFeedback OLESetData
line 86: syn keyword vbEvents OLEStartDrag ObjectEvent ObjectMove OnAddNew
line 87: syn keyword vbEvents OnComm Paint PanelClick PanelDblClick PathChange
line 88: syn keyword vbEvents PatternChange PlotActivated PlotSelected
line 89: syn keyword vbEvents PlotUpdated PointActivated PointLabelActivated
line 90: syn keyword vbEvents PointLabelSelected PointLabelUpdated PointSelected
line 91: syn keyword vbEvents PointUpdated PowerQuerySuspend PowerResume
line 92: syn keyword vbEvents PowerStatusChanged PowerSuspend ProcessTag
line 93: syn keyword vbEvents ProcessingTimeout QueryChangeConfig QueryClose
line 94: syn keyword vbEvents QueryComplete QueryCompleted QueryTimeout
line 95: syn keyword vbEvents QueryUnload ReadProperties RepeatedControlLoaded
line 96: syn keyword vbEvents RepeatedControlUnloaded Reposition
line 97: syn keyword vbEvents RequestChangeFileName RequestWriteFile Resize
line 98: syn keyword vbEvents ResultsChanged RetainedProject RollbackTrans
line 99: syn keyword vbEvents RowColChange RowCurrencyChange RowResize
line 100: syn keyword vbEvents RowStatusChanged Scroll SelChange SelectionChanged
line 101: syn keyword vbEvents SendComplete SendProgress SeriesActivated
line 102: syn keyword vbEvents SeriesSelected SeriesUpdated SettingChanged Show
line 103: syn keyword vbEvents SplitChange Start StateChanged StatusUpdate
line 104: syn keyword vbEvents SysColorsChanged Terminate TimeChanged Timer
line 105: syn keyword vbEvents TitleActivated TitleSelected TitleUpdated
line 106: syn keyword vbEvents UnboundAddData UnboundDeleteRow
line 107: syn keyword vbEvents UnboundGetRelativeBookmark UnboundReadData
line 108: syn keyword vbEvents UnboundWriteData Unformat Unload UpClick Updated
line 109: syn keyword vbEvents UserEvent Validate ValidationError
line 110: syn keyword vbEvents VisibleRecordChanged WillAssociate WillChangeData
line 111: syn keyword vbEvents WillDissociate WillExecute WillUpdateRows
line 112: syn keyword vbEvents WriteProperties
line 113: 
line 114: 
line 115: syn keyword vbFunction Abs Array Asc AscB AscW Atn Avg BOF CBool CByte
line 116: syn keyword vbFunction CCur CDate CDbl CInt CLng CSng CStr CVDate CVErr
line 117: syn keyword vbFunction CVar CallByName Cdec Choose Chr ChrB ChrW Command
line 118: syn keyword vbFunction Cos Count CreateObject CurDir DDB Date DateAdd
line 119: syn keyword vbFunction DateDiff DatePart DateSerial DateValue Day Dir
line 120: syn keyword vbFunction DoEvents EOF Environ Error Exp FV FileAttr
line 121: syn keyword vbFunction FileDateTime FileLen FilterFix Fix Format
line 122: syn keyword vbFunction FormatCurrency FormatDateTime FormatNumber
line 123: syn keyword vbFunction FormatPercent FreeFile GetAllStrings GetAttr
line 124: syn keyword vbFunction GetAutoServerSettings GetObject GetSetting Hex
line 125: syn keyword vbFunction Hour IIf IMEStatus IPmt InStr Input InputB
line 126: syn keyword vbFunction InputBox InstrB Int IsArray IsDate IsEmpty IsError
line 127: syn keyword vbFunction IsMissing IsNull IsNumeric IsObject Join LBound
line 128: syn keyword vbFunction LCase LOF LTrim Left LeftB Len LenB LoadPicture
line 129: syn keyword vbFunction LoadResData LoadResPicture LoadResString Loc Log
line 130: syn keyword vbFunction MIRR Max Mid MidB Min Minute Month MonthName
line 131: syn keyword vbFunction MsgBox NPV NPer Now Oct PPmt PV Partition Pmt
line 132: syn keyword vbFunction QBColor RGB RTrim Rate Replace Right RightB Rnd
line 133: syn keyword vbFunction Round SLN SYD Second Seek Sgn Shell Sin Space Spc
line 134: syn keyword vbFunction Split Sqr StDev StDevP Str StrComp StrConv
line 135: syn keyword vbFunction StrReverse String Sum Switch Tab Tan Time
line 136: syn keyword vbFunction TimeSerial TimeValue Timer Trim TypeName UBound
line 137: syn keyword vbFunction UCase Val Var VarP VarType Weekday WeekdayName
line 138: syn keyword vbFunction Year
line 139: 
line 140: syn keyword vbMethods AboutBox Accept Activate Add AddCustom AddFile
line 141: syn keyword vbMethods AddFromFile AddFromGuid AddFromString
line 142: syn keyword vbMethods AddFromTemplate AddItem AddNew AddToAddInToolbar
line 143: syn keyword vbMethods AddToolboxProgID Append AppendAppendChunk
line 144: syn keyword vbMethods AppendChunk Arrange Assert AsyncRead BatchUpdate
line 145: syn keyword vbMethods BeginQueryEdit BeginTrans Bind BuildPath
line 146: syn keyword vbMethods CanPropertyChange Cancel CancelAsyncRead
line 147: syn keyword vbMethods CancelBatch CancelUpdate CaptureImage CellText
line 148: syn keyword vbMethods CellValue Circle Clear ClearFields ClearSel
line 149: syn keyword vbMethods ClearSelCols ClearStructure Clone Close Cls
line 150: syn keyword vbMethods ColContaining CollapseAll ColumnSize CommitTrans
line 151: syn keyword vbMethods CompactDatabase Compose Connect Copy CopyFile
line 152: syn keyword vbMethods CopyFolder CopyQueryDef Count CreateDatabase
line 153: syn keyword vbMethods CreateDragImage CreateEmbed CreateField
line 154: syn keyword vbMethods CreateFolder CreateGroup CreateIndex CreateLink
line 155: syn keyword vbMethods CreatePreparedStatement CreatePropery CreateQuery
line 156: syn keyword vbMethods CreateQueryDef CreateRelation CreateTableDef
line 157: syn keyword vbMethods CreateTextFile CreateToolWindow CreateUser
line 158: syn keyword vbMethods CreateWorkspace Customize Cut Delete
line 159: syn keyword vbMethods DeleteColumnLabels DeleteColumns DeleteFile
line 160: syn keyword vbMethods DeleteFolder DeleteLines DeleteRowLabels
line 161: syn keyword vbMethods DeleteRows DeselectAll DesignerWindow DoVerb Drag
line 162: syn keyword vbMethods Draw DriveExists Edit EditCopy EditPaste EndDoc
line 163: syn keyword vbMethods EnsureVisible EstablishConnection Execute Exists
line 164: syn keyword vbMethods Expand Export ExportReport ExtractIcon Fetch
line 165: syn keyword vbMethods FetchVerbs FileExists Files FillCache Find
line 166: syn keyword vbMethods FindFirst FindItem FindLast FindNext FindPrevious
line 167: syn keyword vbMethods FolderExists Forward GetAbsolutePathName
line 168: syn keyword vbMethods GetBaseName GetBookmark GetChunk GetClipString
line 169: syn keyword vbMethods GetData GetDrive GetDriveName GetFile GetFileName
line 170: syn keyword vbMethods GetFirstVisible GetFolder GetFormat GetHeader
line 171: syn keyword vbMethods GetLineFromChar GetNumTicks GetParentFolderName
line 172: syn keyword vbMethods GetRows GetSelectedPart GetSelection
line 173: syn keyword vbMethods GetSpecialFolder GetTempName GetText
line 174: syn keyword vbMethods GetVisibleCount GoBack GoForward Hide HitTest
line 175: syn keyword vbMethods HoldFields Idle Import InitializeLabels Insert
line 176: syn keyword vbMethods InsertColumnLabels InsertColumns InsertFile
line 177: syn keyword vbMethods InsertLines InsertObjDlg InsertRowLabels
line 178: syn keyword vbMethods InsertRows Item Keys KillDoc Layout Line Lines
line 179: syn keyword vbMethods LinkExecute LinkPoke LinkRequest LinkSend Listen
line 180: syn keyword vbMethods LoadFile LoadResData LoadResPicture LoadResString
line 181: syn keyword vbMethods LogEvent MakeCompileFile MakeCompiledFile
line 182: syn keyword vbMethods MakeReplica MoreResults Move MoveData MoveFile
line 183: syn keyword vbMethods MoveFirst MoveFolder MoveLast MoveNext
line 184: syn keyword vbMethods MovePrevious NavigateTo NewPage NewPassword
line 185: syn keyword vbMethods NextRecordset OLEDrag OnAddinsUpdate OnConnection
line 186: syn keyword vbMethods OnDisconnection OnStartupComplete Open
line 187: syn keyword vbMethods OpenAsTextStream OpenConnection OpenDatabase
line 188: syn keyword vbMethods OpenQueryDef OpenRecordset OpenResultset OpenURL
line 189: syn keyword vbMethods Overlay PSet PaintPicture PastSpecialDlg Paste
line 190: syn keyword vbMethods PeekData Play Point PopulatePartial PopupMenu
line 191: syn keyword vbMethods Print PrintForm PrintReport PropertyChanged Quit
line 192: syn keyword vbMethods Raise RandomDataFill RandomFillColumns
line 193: syn keyword vbMethods RandomFillRows ReFill Read ReadAll ReadFromFile
line 194: syn keyword vbMethods ReadLine ReadProperty Rebind Refresh RefreshLink
line 195: syn keyword vbMethods RegisterDatabase ReleaseInstance Reload Remove
line 196: syn keyword vbMethods RemoveAddInFromToolbar RemoveAll RemoveItem Render
line 197: syn keyword vbMethods RepairDatabase ReplaceLine Reply ReplyAll Requery
line 198: syn keyword vbMethods ResetCustom ResetCustomLabel ResolveName
line 199: syn keyword vbMethods RestoreToolbar Resync Rollback RollbackTrans
line 200: syn keyword vbMethods RowBookmark RowContaining RowTop Save SaveAs
line 201: syn keyword vbMethods SaveFile SaveToFile SaveToOle1File SaveToolbar
line 202: syn keyword vbMethods Scale ScaleX ScaleY Scroll SelPrint SelectAll
line 203: syn keyword vbMethods SelectPart Send SendData Set SetAutoServerSettings
line 204: syn keyword vbMethods SetData SetFocus SetOption SetSelection SetSize
line 205: syn keyword vbMethods SetText SetViewport Show ShowColor ShowFont
line 206: syn keyword vbMethods ShowHelp ShowOpen ShowPrinter ShowSave
line 207: syn keyword vbMethods ShowWhatsThis SignOff SignOn Size Skip SkipLine
line 208: syn keyword vbMethods Span Split SplitContaining StartLabelEdit
line 209: syn keyword vbMethods StartLogging Stop Synchronize Tag TextHeight
line 210: syn keyword vbMethods TextWidth ToDefaults Trace TwipsToChartPart
line 211: syn keyword vbMethods TypeByChartType URLFor Update UpdateControls
line 212: syn keyword vbMethods UpdateRecord UpdateRow Upto ValidateControls Value
line 213: syn keyword vbMethods WhatsThisMode Write WriteBlankLines WriteLine
line 214: syn keyword vbMethods WriteProperty WriteTemplate ZOrder
line 215: syn keyword vbMethods rdoCreateEnvironment rdoRegisterDataSource
line 216: 
line 217: syn keyword vbStatement Alias AppActivate As Base Beep Begin Call ChDir
line 218: syn keyword vbStatement ChDrive Close Const Date Declare DefBool DefByte
line 219: syn keyword vbStatement DefCur DefDate DefDbl DefDec DefInt DefLng DefObj
line 220: syn keyword vbStatement DefSng DefStr DefVar Deftype DeleteSetting Dim Do
line 221: syn keyword vbStatement Each ElseIf End Enum Erase Error Event Exit
line 222: syn keyword vbStatement Explicit FileCopy For ForEach Function Get GoSub
line 223: syn keyword vbStatement GoTo Gosub Implements Kill LSet Let Lib LineInput
line 224: syn keyword vbStatement Load Lock Loop Mid MkDir Name Next On OnError Open
line 225: syn keyword vbStatement Option Preserve Private Property Public Put RSet
line 226: syn keyword vbStatement RaiseEvent Randomize ReDim Redim Rem Reset Resume
line 227: syn keyword vbStatement Return RmDir SavePicture SaveSetting Seek SendKeys
line 228: syn keyword vbStatement Sendkeys Set SetAttr Static Step Stop Sub Time
line 229: syn keyword vbStatement Type Unload Unlock Until Wend While Width With
line 230: syn keyword vbStatement Write
line 231: 
line 232: syn keyword vbKeyword As Binary ByRef ByVal Date Empty Error Friend Get
line 233: syn keyword vbKeyword Input Is Len Lock Me Mid New Nothing Null On
line 234: syn keyword vbKeyword Option Optional ParamArray Print Private Property
line 235: syn keyword vbKeyword Public PublicNotCreateable OnNewProcessSingleUse
line 236: syn keyword vbKeyword InSameProcessMultiUse GlobalMultiUse Resume Seek
line 237: syn keyword vbKeyword Set Static Step String Time WithEvents
line 238: 
line 239: syn keyword vbTodo contained^ITODO
line 240: 
line 241: "Datatypes
line 242: syn keyword vbTypes Boolean Byte Currency Date Decimal Double Empty
line 243: syn keyword vbTypes Integer Long Object Single String Variant
line 244: 
line 245: "VB defined values
line 246: syn keyword vbDefine dbBigInt dbBinary dbBoolean dbByte dbChar
line 247: syn keyword vbDefine dbCurrency dbDate dbDecimal dbDouble dbFloat
line 248: syn keyword vbDefine dbGUID dbInteger dbLong dbLongBinary dbMemo
line 249: syn keyword vbDefine dbNumeric dbSingle dbText dbTime dbTimeStamp
line 250: syn keyword vbDefine dbVarBinary
line 251: 
line 252: "VB defined values
line 253: syn keyword vbDefine vb3DDKShadow vb3DFace vb3DHighlight vb3DLight
line 254: syn keyword vbDefine vb3DShadow vbAbort vbAbortRetryIgnore
line 255: syn keyword vbDefine vbActiveBorder vbActiveTitleBar vbAlias
line 256: syn keyword vbDefine vbApplicationModal vbApplicationWorkspace
line 257: syn keyword vbDefine vbAppTaskManager vbAppWindows vbArchive vbArray
line 258: syn keyword vbDefine vbBack vbBinaryCompare vbBlack vbBlue vbBoolean
line 259: syn keyword vbDefine vbButtonFace vbButtonShadow vbButtonText vbByte
line 260: syn keyword vbDefine vbCalGreg vbCalHijri vbCancel vbCr vbCritical
line 261: syn keyword vbDefine vbCrLf vbCurrency vbCyan vbDatabaseCompare
line 262: syn keyword vbDefine vbDataObject vbDate vbDecimal vbDefaultButton1
line 263: syn keyword vbDefine vbDefaultButton2 vbDefaultButton3 vbDefaultButton4
line 264: syn keyword vbDefine vbDesktop vbDirectory vbDouble vbEmpty vbError
line 265: syn keyword vbDefine vbExclamation vbFirstFourDays vbFirstFullWeek
line 266: syn keyword vbDefine vbFirstJan1 vbFormCode vbFormControlMenu
line 267: syn keyword vbDefine vbFormFeed vbFormMDIForm vbFriday vbFromUnicode
line 268: syn keyword vbDefine vbGrayText vbGreen vbHidden vbHide vbHighlight
line 269: syn keyword vbDefine vbHighlightText vbHiragana vbIgnore vbIMEAlphaDbl
line 270: syn keyword vbDefine vbIMEAlphaSng vbIMEDisable vbIMEHiragana
line 271: syn keyword vbDefine vbIMEKatakanaDbl vbIMEKatakanaSng vbIMEModeAlpha
line 272: syn keyword vbDefine vbIMEModeAlphaFull vbIMEModeDisable
line 273: syn keyword vbDefine vbIMEModeHangul vbIMEModeHangulFull
line 274: syn keyword vbDefine vbIMEModeHiragana vbIMEModeKatakana
line 275: syn keyword vbDefine vbIMEModeKatakanaHalf vbIMEModeNoControl
line 276: syn keyword vbDefine vbIMEModeOff vbIMEModeOn vbIMENoOp vbIMEOff
line 277: syn keyword vbDefine vbIMEOn vbInactiveBorder vbInactiveCaptionText
line 278: syn keyword vbDefine vbInactiveTitleBar vbInfoBackground vbInformation
line 279: syn keyword vbDefine vbInfoText vbInteger vbKatakana vbKey0 vbKey1
line 280: syn keyword vbDefine vbKey2 vbKey3 vbKey4 vbKey5 vbKey6 vbKey7 vbKey8
line 281: syn keyword vbDefine vbKey9 vbKeyA vbKeyAdd vbKeyB vbKeyBack vbKeyC
line 282: syn keyword vbDefine vbKeyCancel vbKeyCapital vbKeyClear vbKeyControl
line 283: syn keyword vbDefine vbKeyD vbKeyDecimal vbKeyDelete vbKeyDivide
line 284: syn keyword vbDefine vbKeyDown vbKeyE vbKeyEnd vbKeyEscape vbKeyExecute
line 285: syn keyword vbDefine vbKeyF vbKeyF1 vbKeyF10 vbKeyF11 vbKeyF12 vbKeyF13
line 286: syn keyword vbDefine vbKeyF14 vbKeyF15 vbKeyF16 vbKeyF2 vbKeyF3 vbKeyF4
line 287: syn keyword vbDefine vbKeyF5 vbKeyF6 vbKeyF7 vbKeyF8 vbKeyF9 vbKeyG
line 288: syn keyword vbDefine vbKeyH vbKeyHelp vbKeyHome vbKeyI vbKeyInsert
line 289: syn keyword vbDefine vbKeyJ vbKeyK vbKeyL vbKeyLButton vbKeyLeft vbKeyM
line 290: syn keyword vbDefine vbKeyMButton vbKeyMenu vbKeyMultiply vbKeyN
line 291: syn keyword vbDefine vbKeyNumlock vbKeyNumpad0 vbKeyNumpad1
line 292: syn keyword vbDefine vbKeyNumpad2 vbKeyNumpad3 vbKeyNumpad4
line 293: syn keyword vbDefine vbKeyNumpad5 vbKeyNumpad6 vbKeyNumpad7
line 294: syn keyword vbDefine vbKeyNumpad8 vbKeyNumpad9 vbKeyO vbKeyP
line 295: syn keyword vbDefine vbKeyPageDown vbKeyPageUp vbKeyPause vbKeyPrint
line 296: syn keyword vbDefine vbKeyQ vbKeyR vbKeyRButton vbKeyReturn vbKeyRight
line 297: syn keyword vbDefine vbKeyS vbKeySelect vbKeySeparator vbKeyShift
line 298: syn keyword vbDefine vbKeySnapshot vbKeySpace vbKeySubtract vbKeyT
line 299: syn keyword vbDefine vbKeyTab vbKeyU vbKeyUp vbKeyV vbKeyW vbKeyX
line 300: syn keyword vbDefine vbKeyY vbKeyZ vbLf vbLong vbLowerCase vbMagenta
line 301: syn keyword vbDefine vbMaximizedFocus vbMenuBar vbMenuText
line 302: syn keyword vbDefine vbMinimizedFocus vbMinimizedNoFocus vbMonday
line 303: syn keyword vbDefine vbMsgBox vbMsgBoxHelpButton vbMsgBoxRight
line 304: syn keyword vbDefine vbMsgBoxRtlReading vbMsgBoxSetForeground
line 305: syn keyword vbDefine vbMsgBoxText vbNarrow vbNewLine vbNo vbNormal
line 306: syn keyword vbDefine vbNormalFocus vbNormalNoFocus vbNull vbNullChar
line 307: syn keyword vbDefine vbNullString vbObject vbObjectError vbOK
line 308: syn keyword vbDefine vbOKCancel vbOKOnly vbProperCase vbQuestion
line 309: syn keyword vbDefine vbReadOnly vbRed vbRetry vbRetryCancel vbSaturday
line 310: syn keyword vbDefine vbScrollBars vbSingle vbString vbSunday vbSystem
line 311: syn keyword vbDefine vbSystemModal vbTab vbTextCompare vbThursday
line 312: syn keyword vbDefine vbTitleBarText vbTuesday vbUnicode vbUpperCase
line 313: syn keyword vbDefine vbUseSystem vbUseSystemDayOfWeek vbVariant
line 314: syn keyword vbDefine vbVerticalTab vbVolume vbWednesday vbWhite vbWide
line 315: syn keyword vbDefine vbWindowBackground vbWindowFrame vbWindowText
line 316: syn keyword vbDefine vbYellow vbYes vbYesNo vbYesNoCancel
line 317: 
line 318: "Numbers
line 319: "integer number, or floating point number without a dot.
line 320: syn match vbNumber "\<\d\+\>"
line 321: "floating point number, with dot
line 322: syn match vbNumber "\<\d\+\.\d*\>"
line 323: "floating point number, starting with a dot
line 324: syn match vbNumber "\.\d\+\>"
line 325: "syn match  vbNumber^I^I"{[[:xdigit:]-]\+}\|&[hH][[:xdigit:]]\+&"
line 326: "syn match  vbNumber^I^I":[[:xdigit:]]\+"
line 327: "syn match  vbNumber^I^I"[-+]\=\<\d\+\>"
line 328: syn match  vbFloat^I^I"[-+]\=\<\d\+[eE][\-+]\=\d\+"
line 329: syn match  vbFloat^I^I"[-+]\=\<\d\+\.\d*\([eE][\-+]\=\d\+\)\="
line 330: syn match  vbFloat^I^I"[-+]\=\<\.\d\+\([eE][\-+]\=\d\+\)\="
line 331: 
line 332: " String and Character contstants
line 333: syn region  vbString^I^Istart=+"+  end=+"\|$+
line 334: syn region  vbComment^I^Istart="\(^\|\s\)REM\s" end="$" contains=vbTodo
line 335: syn region  vbComment^I^Istart="\(^\|\s\)\'"   end="$" contains=vbTodo
line 336: syn match   vbLineNumber^I"^\d\+\(\s\|$\)"
line 337: syn match   vbTypeSpecifier  "[a-zA-Z0-9][\$%&!#]"ms=s+1
line 338: syn match   vbTypeSpecifier  "#[a-zA-Z0-9]"me=e-1
line 339: 
line 340: " Define the default highlighting.
line 341: " For version 5.7 and earlier: only when not done already
line 342: " For version 5.8 and later: only when an item doesn't have highlighting yet
line 343: if version >= 508 || !exists("did_vb_syntax_inits")
line 344: ^Iif version < 508
line 345: ^I^Ilet did_vb_syntax_inits = 1
line 346: ^I^Icommand -nargs=+ HiLink hi link <args>
line 347: ^Ielse
line 348: ^I^Icommand -nargs=+ HiLink hi def link <args>
line 349: ^Iendif
line 350: 
line 351: ^IHiLink vbBoolean^I^IBoolean
line 351: hi def link vbBoolean^I^IBoolean
line 352: ^IHiLink vbLineNumber^I^IComment
line 352: hi def link vbLineNumber^I^IComment
line 353: ^IHiLink vbComment^I^IComment
line 353: hi def link vbComment^I^IComment
line 354: ^IHiLink vbConditional^IConditional
line 354: hi def link vbConditional^IConditional
line 355: ^IHiLink vbConst^I^I^IConstant
line 355: hi def link vbConst^I^I^IConstant
line 356: ^IHiLink vbDefine^I^I^IConstant
line 356: hi def link vbDefine^I^I^IConstant
line 357: ^IHiLink vbError^I^I^IError
line 357: hi def link vbError^I^I^IError
line 358: ^IHiLink vbFunction^I^IIdentifier
line 358: hi def link vbFunction^I^IIdentifier
line 359: ^IHiLink vbIdentifier^I^IIdentifier
line 359: hi def link vbIdentifier^I^IIdentifier
line 360: ^IHiLink vbNumber^I^I^INumber
line 360: hi def link vbNumber^I^I^INumber
line 361: ^IHiLink vbFloat^I^I^IFloat
line 361: hi def link vbFloat^I^I^IFloat
line 362: ^IHiLink vbMethods^I^IPreProc
line 362: hi def link vbMethods^I^IPreProc
line 363: ^IHiLink vbOperator^I^IOperator
line 363: hi def link vbOperator^I^IOperator
line 364: ^IHiLink vbRepeat^I^I^IRepeat
line 364: hi def link vbRepeat^I^I^IRepeat
line 365: ^IHiLink vbString^I^I^IString
line 365: hi def link vbString^I^I^IString
line 366: ^IHiLink vbStatement^I^IStatement
line 366: hi def link vbStatement^I^IStatement
line 367: ^IHiLink vbKeyword^I^IStatement
line 367: hi def link vbKeyword^I^IStatement
line 368: ^IHiLink vbEvents^I^I^ISpecial
line 368: hi def link vbEvents^I^I^ISpecial
line 369: ^IHiLink vbTodo^I^I^ITodo
line 369: hi def link vbTodo^I^I^ITodo
line 370: ^IHiLink vbTypes^I^I^IType
line 370: hi def link vbTypes^I^I^IType
line 371: ^IHiLink vbTypeSpecifier^IType
line 371: hi def link vbTypeSpecifier^IType
line 372: 
line 373: ^Idelcommand HiLink
line 374: endif
line 375: 
line 376: let b:current_syntax = "vb"
line 377: 
line 378: " vim: ts=8
finished sourcing /usr/share/vim/vim74/syntax/vb.vim
continuing in /usr/share/vim/vim74/syntax/html.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/vb.vim"
Searching for "/var/lib/vim/addons/after/syntax/vb.vim"
Searching for "/home/kguest/.vim/after/syntax/vb.vim"
line 195:   unlet b:current_syntax
line 196:   syn region  javaScript start=+<script \_[^>]*language *=\_[^>]*vbscript\_[^>]*>+ keepend end=+</script>+me=s-1 contains=@htmlVbScript,htmlCssStyleComment,htmlScriptTag,@htmlPreproc
line 197: endif
line 198: 
line 199: syn cluster htmlJavaScript      add=@htmlPreproc
line 200: 
line 201: if main_syntax != 'java' || exists("java_css")
line 202:   " embedded style sheets
line 203:   syn keyword htmlArg           contained media
line 204:   syn include @htmlCss syntax/css.vim
Searching for "syntax/css.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/syntax/css.vim"
Searching for "/home/kguest/.vim/syntax/css.vim"
Searching for "/var/lib/vim/addons/syntax/css.vim"
Searching for "/usr/share/vim/vimfiles/syntax/css.vim"
Searching for "/usr/share/vim/vim74/syntax/css.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 204: sourcing "/usr/share/vim/vim74/syntax/css.vim"
line 1: " Vim syntax file
line 2: " Language:     Cascading Style Sheets
line 3: " Previous Contributor List:
line 4: "               Claudio Fleiner <claudio@fleiner.com> (Maintainer)
line 5: "               Yeti            (Add full CSS2, HTML4 support)
line 6: "               Nikolai Weibull (Add CSS2 support)
line 7: " Maintainer:   Jules Wang      <w.jq0722@gmail.com>
line 8: " URL:          https://github.com/JulesWang/css.vim
line 9: " Last Change:  2013 Jul 23
line 10: 
line 11: " For version 5.x: Clear all syntax items
line 12: " For version 6.x: Quit when a syntax file was already loaded
line 13: if !exists("main_syntax")
line 14:   if version < 600
line 15:     syntax clear
line 16:   elseif exists("b:current_syntax")
line 17:     finish
line 18:   endif
line 19:   let main_syntax = 'css'
line 20: elseif exists("b:current_syntax") && b:current_syntax == "css"
line 21:   finish
line 22: endif
line 23: 
line 24: let s:cpo_save = &cpo
line 25: set cpo&vim
line 26: 
line 27: syn case ignore
line 28: 
line 29: " All HTML4 tags
line 30: syn keyword cssTagName abbr acronym address applet area a b base
line 31: syn keyword cssTagName basefont bdo big blockquote body br button
line 32: syn keyword cssTagName caption center cite code col colgroup dd del
line 33: syn keyword cssTagName dfn dir div dl dt em fieldset font form frame
line 34: syn keyword cssTagName frameset h1 h2 h3 h4 h5 h6 head hr html img i
line 35: syn keyword cssTagName iframe img input ins isindex kbd label legend li
line 36: syn keyword cssTagName link map menu meta noframes noscript ol optgroup
line 37: syn keyword cssTagName option p param pre q s samp script select small
line 38: syn keyword cssTagName span strike strong style sub sup table tbody td
line 39: syn keyword cssTagName textarea tfoot th thead title tr tt ul u var
line 40: syn keyword cssTagName object
line 41: 
line 42: " HTML5 new tags 5*6=30
line 43: syn keyword cssTagName article aside audio bdi canvas command
line 44: syn keyword cssTagName datalist details embed figcaption figure footer
line 45: syn keyword cssTagName header hgroup keygen mark meter nav
line 46: syn keyword cssTagName output progress rt rp ruby section
line 47: syn keyword cssTagName source summary time track video wbr
line 48: 
line 49: " Tags not supported in HTML5
line 50: syn keyword cssDeprecated acronym applet basefont big center dir
line 51: syn keyword cssDeprecated font frame frameset noframes strike tt
line 52: 
line 53: "syn match cssTagName "\<table\>"
line 54: syn match cssTagName "\*"
line 55: 
line 56: " selectors
line 57: syn match cssSelectorOp "[,>+]"
line 58: syn match cssSelectorOp2 "[~|^$*]\?=" contained
line 59: " FIXME: add HTML5 attribute
line 60: syn region cssAttributeSelector matchgroup=cssSelectorOp start="\[" end="]" transparent contains=cssUnicodeEscape,cssSelectorOp2,cssStringQ,cssStringQQ
line 61: 
line 62: " .class and #id
line 63: syn match cssClassName "\.[A-Za-z][A-Za-z0-9_-]\+"
line 64: 
line 65: try
line 66: syn match cssIdentifier "#[A-Za-z<c0>-<ff>_@][A-Za-z<c0>-<ff>0-9_@-]*"
line 67: catch /^.*/
line 68: syn match cssIdentifier "#[A-Za-z_@][A-Za-z0-9_@-]*"
line 69: endtry
line 70: 
line 71: syn match cssTagName "@page\>" nextgroup=cssDefinition
line 72: " FIXME: use cssVendor here
line 73: syn match cssTagName "@\(-\(webkit\|moz\|o\|ms\)-\)\=keyframes\>" nextgroup=cssDefinition
line 74: 
line 75: syn match cssMedia "@media\>" nextgroup=cssMediaType skipwhite skipnl
line 76: syn keyword cssMediaType contained screen print aural braile embosed handheld projection ty tv all nextgroup=cssMediaComma,cssMediaBlock skipwhite skipnl
line 77: "syn match cssMediaComma "," nextgroup=cssMediaType skipwhite skipnl
line 78: syn region cssMediaBlock transparent matchgroup=cssBraces start='{' end='}' contains=cssTagName,cssError,cssComment,cssDefinition,cssURL,cssUnicodeEscape,cssIdentifier
line 79: 
line 80: syn match cssValueInteger contained "[-+]\=\d\+"
line 81: syn match cssValueNumber contained "[-+]\=\d\+\(\.\d*\)\="
line 82: syn match cssValueLength contained "[-+]\=\d\+\(\.\d*\)\=\(%\|mm\|cm\|in\|pt\|pc\|em\|ex\|px\|rem\)"
line 83: syn match cssValueAngle contained "[-+]\=\d\+\(\.\d*\)\=\(deg\|grad\|rad\)"
line 84: syn match cssValueTime contained "+\=\d\+\(\.\d*\)\=\(ms\|s\)"
line 85: syn match cssValueFrequency contained "+\=\d\+\(\.\d*\)\=\(Hz\|kHz\)"
line 86: 
line 87: syn match cssFontDescriptor "@font-face\>" nextgroup=cssFontDescriptorBlock skipwhite skipnl
line 88: syn region cssFontDescriptorBlock contained transparent matchgroup=cssBraces start="{" end="}" contains=cssComment,cssError,cssUnicodeEscape,cssFontProp,cssFontAttr,cssCommonAttr,cssStringQ,cssStringQQ,cssFontDescriptorProp,cssValue.*,cssFontDescriptorFunction,cssUnicodeRange,cssFontDescriptorAttr
line 89: syn match cssFontDescriptorProp contained "\<\(unicode-range\|unit-per-em\|panose-1\|cap-height\|x-height\|definition-src\)\>"
line 90: syn keyword cssFontDescriptorProp contained src stemv stemh slope ascent descent widths bbox baseline centerline mathline topline
line 91: syn keyword cssFontDescriptorAttr contained all
line 92: syn region cssFontDescriptorFunction contained matchgroup=cssFunctionName start="\<\(uri\|url\|local\|format\)\s*(" end=")" contains=cssStringQ,cssStringQQ oneline keepend
line 93: syn match cssUnicodeRange contained "U+[0-9A-Fa-f?]\+"
line 94: syn match cssUnicodeRange contained "U+\x\+-\x\+"
line 95: 
line 96: " The 16 basic color names
line 97: syn keyword cssColor contained aqua black blue fuchsia gray green lime maroon navy olive purple red silver teal yellow
line 98: 
line 99: " 130 more color names
line 100: syn keyword cssColor contained aliceblue antiquewhite aquamarine azure
line 101: syn keyword cssColor contained beige bisque blanchedalmond blueviolet brown burlywood
line 102: syn keyword cssColor contained cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan
line 103: syn match cssColor contained /dark\(blue\|cyan\|goldenrod\|gray\|green\|grey\|khaki\)/
line 104: syn match cssColor contained /dark\(magenta\|olivegreen\|orange\|orchid\|red\|salmon\|seagreen\)/
line 105: syn match cssColor contained /darkslate\(blue\|gray\|grey\)/
line 106: syn match cssColor contained /dark\(turquoise\|violet\)/
line 107: syn keyword cssColor contained deeppink deepskyblue dimgray dimgrey dodgerblue firebrick
line 108: syn keyword cssColor contained floralwhite forestgreen gainsboro ghostwhite gold
line 109: syn keyword cssColor contained goldenrod greenyellow grey honeydew hotpink
line 110: syn keyword cssColor contained indianred indigo ivory khaki lavender lavenderblush lawngreen
line 111: syn keyword cssColor contained lemonchiffon limegreen linen magenta
line 112: syn match cssColor contained /light\(blue\|coral\|cyan\|goldenrodyellow\|gray\|green\)/
line 113: syn match cssColor contained /light\(grey\|pink\|salmon\|seagreen\|skyblue\|yellow\)/
line 114: syn match cssColor contained /light\(slategray\|slategrey\|steelblue\)/
line 115: syn match cssColor contained /medium\(aquamarine\|blue\|orchid\|purple\|seagreen\)/
line 116: syn match cssColor contained /medium\(slateblue\|springgreen\|turquoise\|violetred\)/
line 117: syn keyword cssColor contained midnightblue mintcream mistyrose moccasin navajowhite
line 118: syn keyword cssColor contained oldlace olivedrab orange orangered orchid
line 119: syn match cssColor contained /pale\(goldenrod\|green\|turquoise\|violetred\)/
line 120: syn keyword cssColor contained papayawhip peachpuff peru pink plum powderblue
line 121: syn keyword cssColor contained rosybrown royalblue saddlebrown salmon sandybrown
line 122: syn keyword cssColor contained seagreen seashell sienna skyblue slateblue
line 123: syn keyword cssColor contained slategray slategrey snow springgreen steelblue tan
line 124: syn keyword cssColor contained thistle tomato turquoise violet wheat
line 125: syn keyword cssColor contained whitesmoke yellowgreen
line 126: 
line 127: " FIXME: These are actually case-insentivie too, but (a) specs recommend using
line 128: " mixed-case (b) it's hard to highlight the word `Background' correctly in
line 129: " all situations
line 130: syn case match
line 131: syn keyword cssColor contained ActiveBorder ActiveCaption AppWorkspace ButtonFace ButtonHighlight ButtonShadow ButtonText CaptionText GrayText Highlight HighlightText InactiveBorder InactiveCaption InactiveCaptionText InfoBackground InfoText Menu MenuText Scrollbar ThreeDDarkShadow ThreeDFace ThreeDHighlight ThreeDLightShadow ThreeDShadow Window WindowFrame WindowText Background
line 132: syn case ignore
line 133: 
line 134: syn match cssImportant contained "!\s*important\>"
line 135: 
line 136: syn match cssColor contained "\<transparent\>"
line 137: syn match cssColor contained "\<white\>"
line 138: syn match cssColor contained "#[0-9A-Fa-f]\{3\}\>"
line 139: syn match cssColor contained "#[0-9A-Fa-f]\{6\}\>"
line 140: 
line 141: syn region cssURL contained matchgroup=cssFunctionName start="\<url\s*(" end=")" oneline keepend
line 142: syn region cssFunction contained matchgroup=cssFunctionName start="\<\(rgb\|clip\|attr\|counter\|rect\|cubic-bezier\)\s*(" end=")" oneline keepend
line 143: syn region cssFunction contained matchgroup=cssFunctionName start="\<\(rgba\|hsl\|hsla\)\s*(" end=")" oneline keepend
line 144: syn region cssFunction contained matchgroup=cssFunctionName start="\<\(linear\|radial\)-gradient\s*(" end=")" oneline keepend
line 145: syn region cssFunction contained matchgroup=cssFunctionName start="\<\(matrix\(3d\)\=\|scale\(3d\|X\|Y|\Z\)\=\|translate\(3d\|X\|Y|\Z\)\=\|skew\(X\|Y\)\=\|rotate\(3d\|X\|Y|\Z\)\=\|perspective\)\s*(" end=")" oneline keepend
line 146: 
line 147: " Prop and Attr
line 148: " Reference: http://www.w3schools.com/cssref/default.asp
line 149: syn keyword cssCommonAttr contained auto none inherit all
line 150: syn keyword cssCommonAttr contained top bottom
line 151: syn keyword cssCommonAttr contained medium normal
line 152: 
line 153: 
line 154: syn match cssAnimationProp contained "\<animation\(-\(name\|duration\|timing-function\|delay\|iteration-cout\|play-state\)\)\=\>"
line 155: 
line 156: 
line 157: syn keyword cssAnimationAttr contained infinite alternate paused running
line 158: " bugfix: escape linear-gradient
line 159: syn match cssAnimationAttr contained "\<linear\(-gradient\)\@!\>"
line 160: syn match cssAnimationAttr contained "\<ease\(-\(in-out\|out\|in\)\)\=\>"
line 161: 
line 162: syn match cssBackgroundProp contained "\<background\(-\(color\|image\|attachment\|position\|clip\|origin\|size\)\)\=\>"
line 163: syn keyword cssBackgroundAttr contained center fixed over contain
line 164: syn match cssBackgroundAttr contained "\<no-repeat\>"
line 165: syn match cssBackgroundAttr contained "\<repeat\(-[xy]\)\=\>"
line 166: syn match cssBackgroundAttr contained "\<\(border\|content\|padding\)-box\>"
line 167: 
line 168: 
line 169: syn match cssBorderOutlineProp contained "\<border\(-\(top\|right\|bottom\|left\)\)\=\(-\(width\|color\|style\)\)\=\>"
line 170: syn match cssBorderOutlineProp contained "\<outline\(-\(width\|style\|color\)\)\=\>"
line 171: syn match cssBorderOutlineProp contained "\<border-\(top\|bottom\)-\(left\|right\)\(-radius\)\=\>"
line 172: syn match cssBorderOutlineProp contained "\<border-image\(-\(outset\|repeat\|slice\|source\|width\)\)\=\>"
line 173: syn match cssBorderOutlineProp contained "\<border-radius\>"
line 174: syn keyword cssBorderOutlineAttr contained thin thick medium
line 175: syn keyword cssBorderOutlineAttr contained dotted dashed solid double groove ridge inset outset
line 176: syn keyword cssBorderOutlineAttr contained hidden visible scroll collapse
line 177: syn keyword cssBorderOutlineAttr contained stretch round
line 178: 
line 179: 
line 180: syn match cssBoxProp contained "\<overflow\(-\(x\|y\|style\)\)\=\>"
line 181: syn match cssBoxProp contained "\<rotation\(-point\)=\>"
line 182: syn keyword cssBoxAttr contained visible hidden scroll auto
line 183: syn match cssBoxAttr contained "\<no-\(display\|content\)\>"
line 184: 
line 185: syn keyword cssColorProp contained opacity
line 186: syn match cssColorProp contained "\<color-profile\>"
line 187: syn match cssColorProp contained "\<rendering-intent\>"
line 188: 
line 189: 
line 190: syn match cssDimensionProp contained "\<\(min\|max\)-\(width\|height\)\>"
line 191: syn keyword cssDimensionProp contained height
line 192: syn keyword cssDimensionProp contained width
line 193: 
line 194: " shadow and sizing are in other property groups
line 195: syn match cssFlexibleBoxProp contained "\<box-\(align\|direction\|flex\|ordinal-group\|orient\|pack\|shadow\|sizing\)\>"
line 196: syn keyword cssFlexibleBoxAttr contained start end center baseline stretch
line 197: syn keyword cssFlexibleBoxAttr contained normal reverse
line 198: syn keyword cssFlexibleBoxAttr contained single mulitple
line 199: syn keyword cssFlexibleBoxAttr contained horizontal
line 200: " bugfix: escape vertial-align
line 201: syn match cssFlexibleBoxAttr contained "\<vertical\(-align\)\@!\>"
line 202: syn match cssFlexibleBoxAttr contained "\<\(inline\|block\)-axis\>"
line 203: 
line 204: 
line 205: syn match cssFontProp contained "\<font\(-\(family\|style\|variant\|weight\|size\(-adjust\)\=\|stretch\)\)\=\>"
line 206: syn match cssFontAttr contained "\<\(sans-\)\=\<serif\>"
line 207: syn match cssFontAttr contained "\<small\(-\(caps\|caption\)\)\=\>"
line 208: syn match cssFontAttr contained "\<x\{1,2\}-\(large\|small\)\>"
line 209: syn match cssFontAttr contained "\<message-box\>"
line 210: syn match cssFontAttr contained "\<status-bar\>"
line 211: syn match cssFontAttr contained "\<\(\(ultra\|extra\|semi\|status-bar\)-\)\=\(condensed\|expanded\)\>"
line 212: syn keyword cssFontAttr contained cursive fantasy monospace italic oblique
line 213: syn keyword cssFontAttr contained bold bolder light lighter larger smaller
line 214: syn keyword cssFontAttr contained icon menu caption
line 215: syn keyword cssFontAttr contained large smaller larger narrower wider
line 216: syn keyword cssFontAttr contained Courier Arial Georgia Times
line 217: 
line 218: 
line 219: syn keyword cssGeneratedContentProp contained content quotes crop
line 220: syn match cssGeneratedContentProp contained "\<counter-\(reset\|increment\)\>"
line 221: syn match cssGeneratedContentProp contained "\<move-to\>"
line 222: syn match cssGeneratedContentProp contained "\<page-policy\>"
line 223: syn match cssGeneratedContentAttr contained "\<\(no-\)\=\(open\|close\)-quote\>"
line 224: 
line 225: 
line 226: syn match cssGridProp contained "\<grid-\(columns\|rows\)\>"
line 227: 
line 228: syn match cssHyerlinkProp contained "\<target\(-\(name\|new\|position\)\)\=\>"
line 229: 
line 230: syn match cssListProp contained "\<list-style\(-\(type\|position\|image\)\)\=\>"
line 231: syn match cssListAttr contained "\<\(lower\|upper\)-\(roman\|alpha\|greek\|latin\)\>"
line 232: syn match cssListAttr contained "\<\(hiragana\|katakana\)\(-iroha\)\=\>"
line 233: syn match cssListAttr contained "\<\(decimal\(-leading-zero\)\=\|cjk-ideographic\)\>"
line 234: syn keyword cssListAttr contained disc circle square hebrew armenian georgian
line 235: syn keyword cssListAttr contained inside outside
line 236: 
line 237: 
line 238: syn match cssMarginProp contained "\<margin\(-\(top\|right\|bottom\|left\)\)\=\>"
line 239: 
line 240: syn match cssMultiColumnProp contained "\<column\(-\(\break-\(after\|before\)\|count\|gap\|rule\(-\(color\|style\|width\)\)\=\)\|span\|width\)\=\>"
line 241: 
line 242: 
line 243: syn match cssPaddingProp contained "\<padding\(-\(top\|right\|bottom\|left\)\)\=\>"
line 244: 
line 245: syn keyword cssPositioningProp contained bottom clear clip display float left
line 246: syn keyword cssPositioningProp contained position right top visibility
line 247: syn match cssPositioningProp contained "\<z-index\>"
line 248: syn keyword cssPositioningAttr contained block inline compact
line 249: syn match cssPositioningAttr contained "\<table\(-\(row-gorup\|\(header\|footer\)-group\|row\|column\(-group\)\=\|cell\|caption\)\)\=\>"
line 250: syn keyword cssPositioningAttr contained left right both
line 251: syn match cssPositioningAttr contained "\<list-item\>"
line 252: syn match cssPositioningAttr contained "\<inline-\(block\|table\)\>"
line 253: syn keyword cssPositioningAttr contained static relative absolute fixed
line 254: 
line 255: syn match cssPrintProp contained "\<page\(-break-\(before\|after\|inside\)\)\=\>"
line 256: syn keyword cssPrintProp contained orphans widows
line 257: syn keyword cssPrintAttr contained landscape portrait crop cross always avoid
line 258: 
line 259: syn match cssTableProp contained "\<\(caption-side\|table-layout\|border-collapse\|border-spacing\|empty-cells\)\>"
line 260: syn keyword cssTableAttr contained fixed collapse separate show hide once always
line 261: 
line 262: 
line 263: syn keyword cssTextProp contained color direction
line 264: syn match cssTextProp "\<\(\(word\|letter\)-spacing\|text\(-\(decoration\|transform\|align\|index\|shadow\)\)\=\|vertical-align\|unicode-bidi\|line-height\)\>"
line 265: syn match cssTextProp contained "\<text-\(justify\|\outline\|overflow\|warp\|align-last\)\>"
line 266: syn match cssTextProp contained "\<word-\(break\|\wrap\)\>"
line 267: syn match cssTextProp contained "\<white-space\>"
line 268: syn match cssTextProp contained "\<hanging-punctuation\>"
line 269: syn match cssTextProp contained "\<punctuation-trim\>"
line 270: syn match cssTextAttr contained "\<line-through\>"
line 271: syn match cssTextAttr contained "\<text-indent\>"
line 272: syn match cssTextAttr contained "\<\(text-\)\=\(top\|bottom\)\>"
line 273: syn keyword cssTextAttr contained ltr rtl embed nowrap
line 274: syn keyword cssTextAttr contained underline overline blink sub super middle
line 275: syn keyword cssTextAttr contained capitalize uppercase lowercase
line 276: syn keyword cssTextAttr contained center justify baseline sub super
line 277: syn match cssTextAttr contained "\<pre\(-\(line\|wrap\)\)\=\>"
line 278: syn match cssTextAttr contained "\<\(allow\|force\)-end\>"
line 279: syn keyword cssTextAttr contained start end adjacent
line 280: syn match cssTextAttr contained "\<inter-\(word\|ideographic\|cluster\)\>"
line 281: syn keyword cssTextAttr contained distribute kashida first last
line 282: syn keyword cssTextAttr contained clip ellipsis unrestricted suppress
line 283: syn match cssTextAttr contained "\<break-all\>"
line 284: syn match cssTextAttr contained "\<break-word\>"
line 285: syn keyword cssTextAttr contained hyphenate
line 286: 
line 287: 
line 288: syn match cssTransformProp contained "\<transform\(-\(origin\|style\)\)\=\>"
line 289: syn match cssTransformProp contained "\<perspective\(-origin\)\=\>"
line 290: syn match cssTransformProp contained "\<backface-visibility\>"
line 291: 
line 292: syn match cssTransitionProp contained "\<transition\(-\(delay\|duration\|property\|timing-function\)\)\=\>"
line 293: 
line 294: syn match cssUIProp contained "\<nav-\(down\|index\|left\|right\|up\)\=\>"
line 295: syn match cssUIProp contained "\<outline-offset\>"
line 296: syn match cssUIProp contained "\<box-sizing\>"
line 297: syn keyword cssUIProp contained appearance icon resize
line 298: syn keyword cssUIAttr contained window button menu field
line 299: 
line 300: syn match cssAuralProp contained "\<\(pause\|cue\)\(-\(before\|after\)\)\=\>"
line 301: syn match cssAuralProp contained "\<\(play-during\|speech-rate\|voice-family\|pitch\(-range\)\=\|speak\(-\(punctuation\|numerals\)\)\=\)\>"
line 302: syn keyword cssAuralProp contained volume during azimuth elevation stress richness
line 303: syn match cssAuralAttr contained "\<\(x-\)\=\(soft\|loud\)\>"
line 304: syn keyword cssAuralAttr contained silent
line 305: syn match cssAuralAttr contained "\<spell-out\>"
line 306: syn keyword cssAuralAttr contained non mix
line 307: syn match cssAuralAttr contained "\<\(left\|right\)-side\>"
line 308: syn match cssAuralAttr contained "\<\(far\|center\)-\(left\|center\|right\)\>"
line 309: syn keyword cssAuralAttr contained leftwards rightwards behind
line 310: syn keyword cssAuralAttr contained below level above higher
line 311: syn match cssAuralAttr contained "\<\(x-\)\=\(slow\|fast\)\>"
line 312: syn keyword cssAuralAttr contained faster slower
line 313: syn keyword cssAuralAttr contained male female child code digits continuous
line 314: syn match cssAuralAttr contained "\<lower\>"
line 315: 
line 316: " cursor
line 317: syn keyword cssUIProp contained cursor
line 318: syn match cssUIAttr contained "\<[ns]\=[ew]\=-resize\>"
line 319: syn keyword cssUIAttr contained crosshair default help move pointer
line 320: syn keyword cssUIAttr contained progress wait
line 321: 
line 322: " FIXME: I could not find them in reference
line 323: syn keyword cssUIAttr contained invert maker size zoom
line 324: syn match cssRenderAttr contained "\<run-in\>"
line 325: syn match cssRenderAttr contained "\<text-rendering\>"
line 326: syn match cssRenderAttr contained "\<font-smoothing\>"
line 327: syn match cssRenderProp contained "\<marker-offset\>"
line 328: syn match cssRenderAttr contained "\<bidi-override\>"
line 329: 
line 330: 
line 331: " FIXME: This allows cssMediaBlock before the semicolon, which is wrong.
line 332: syn region cssInclude start="@import" end=";" contains=cssComment,cssURL,cssUnicodeEscape,cssMediaType
line 333: syn match cssBraces contained "[{}]"
line 334: syn match cssError contained "{@<>"
line 335: syn region cssDefinition transparent matchgroup=cssBraces start='{' end='}' contains=css.*Attr,css.*Prop,cssComment,cssValue.*,cssColor,cssURL,cssImportant,cssError,cssStringQ,cssStringQQ,cssFunction,cssUnicodeEscape,cssVendor,cssDefinition
line 336: syn match cssBraceError "}"
line 337: 
line 338: " Pseudo class
line 339: syn match cssPseudoClass ":[A-Za-z0-9_-]*" contains=cssPseudoClassId,cssUnicodeEscape
line 340: syn keyword cssPseudoClassId link visited active hover focus before after left right lang
line 341: syn match cssPseudoClassId contained "\<first\(-\(line\|letter\|child\)\)\=\>"
line 342: " FIXME: handle functions.
line 343: "syn region cssPseudoClassLang matchgroup=cssPseudoClassId start="lang(" end=")"
line 344: syn match cssPseudoClassId contained "\<\(last\|only\|nth\|nth-last\)-child\>"
line 345: syn match cssPseudoClassId contained "\<\(first\|last\|only\|nth\|nth-last\)-of-type\>"
line 346: syn keyword cssPseudoClassId root empty target enable disabled checked not invalid
line 347: syn match cssPseudoClassId contained  "::\(-moz-\)\=selection"
line 348: 
line 349: " Comment
line 350: syn region cssComment start="/\*" end="\*/" contains=@Spell
line 351: syn region cssComment start="//" skip="\\$" end="$" keepend contains=@Spell
line 352: 
line 353: syn match cssUnicodeEscape "\\\x\{1,6}\s\?"
line 354: syn match cssSpecialCharQQ +\\"+ contained
line 355: syn match cssSpecialCharQ +\\'+ contained
line 356: syn region cssStringQQ start=+"+ skip=+\\\\\|\\"+ end=+"+ contains=cssUnicodeEscape,cssSpecialCharQQ
line 357: syn region cssStringQ start=+'+ skip=+\\\\\|\\'+ end=+'+ contains=cssUnicodeEscape,cssSpecialCharQ
line 358: 
line 359: " Vendor Prefix
line 360: syn match cssVendor contained "\(-\(webkit\|moz\|o\|ms\)-\)"
line 361: 
line 362: 
line 363: if main_syntax == "css"
line 364:   syn sync minlines=10
line 365: endif
line 366: 
line 367: " Define the default highlighting.
line 368: " For version 5.7 and earlier: only when not done already
line 369: " For version 5.8 and later: only when an item doesn't have highlighting yet
line 370: if version >= 508 || !exists("did_css_syn_inits")
line 371:   if version < 508
line 372:     let did_css_syn_inits = 1
line 373:     command -nargs=+ HiLink hi link <args>
line 374:   else
line 375:     command -nargs=+ HiLink hi def link <args>
line 376:   endif
line 377: 
line 378:   HiLink cssComment Comment
line 378: hi def link cssComment Comment
line 379:   HiLink cssVendor Comment
line 379: hi def link cssVendor Comment
line 380:   HiLink cssTagName Statement
line 380: hi def link cssTagName Statement
line 381:   HiLink cssDeprecated Error
line 381: hi def link cssDeprecated Error
line 382:   HiLink cssSelectorOp Special
line 382: hi def link cssSelectorOp Special
line 383:   HiLink cssSelectorOp2 Special
line 383: hi def link cssSelectorOp2 Special
line 384: 
line 385:   HiLink cssAnimationProp StorageClass
line 385: hi def link cssAnimationProp StorageClass
line 386:   HiLink cssBackgroundProp StorageClass
line 386: hi def link cssBackgroundProp StorageClass
line 387:   HiLink cssBorderOutlineProp StorageClass
line 387: hi def link cssBorderOutlineProp StorageClass
line 388:   HiLink cssBoxProp StorageClass
line 388: hi def link cssBoxProp StorageClass
line 389:   HiLink cssColorProp StorageClass
line 389: hi def link cssColorProp StorageClass
line 390:   HiLink cssContentForPagedMediaProp StorageClass
line 390: hi def link cssContentForPagedMediaProp StorageClass
line 391:   HiLink cssDimensionProp StorageClass
line 391: hi def link cssDimensionProp StorageClass
line 392:   HiLink cssFlexibleBoxProp StorageClass
line 392: hi def link cssFlexibleBoxProp StorageClass
line 393:   HiLink cssFontProp StorageClass
line 393: hi def link cssFontProp StorageClass
line 394:   HiLink cssGeneratedContentProp StorageClass
line 394: hi def link cssGeneratedContentProp StorageClass
line 395:   HiLink cssGridProp StorageClass
line 395: hi def link cssGridProp StorageClass
line 396:   HiLink cssHyerlinkProp StorageClass
line 396: hi def link cssHyerlinkProp StorageClass
line 397:   HiLink cssLineboxProp StorageClass
line 397: hi def link cssLineboxProp StorageClass
line 398:   HiLink cssListProp StorageClass
line 398: hi def link cssListProp StorageClass
line 399:   HiLink cssMarginProp StorageClass
line 399: hi def link cssMarginProp StorageClass
line 400:   HiLink cssMarqueeProp StorageClass
line 400: hi def link cssMarqueeProp StorageClass
line 401:   HiLink cssMultiColumnProp StorageClass
line 401: hi def link cssMultiColumnProp StorageClass
line 402:   HiLink cssPaddingProp StorageClass
line 402: hi def link cssPaddingProp StorageClass
line 403:   HiLink cssPagedMediaProp StorageClass
line 403: hi def link cssPagedMediaProp StorageClass
line 404:   HiLink cssPositioningProp StorageClass
line 404: hi def link cssPositioningProp StorageClass
line 405:   HiLink cssPrintProp StorageClass
line 405: hi def link cssPrintProp StorageClass
line 406:   HiLink cssRubyProp StorageClass
line 406: hi def link cssRubyProp StorageClass
line 407:   HiLink cssSpeechProp StorageClass
line 407: hi def link cssSpeechProp StorageClass
line 408:   HiLink cssTableProp StorageClass
line 408: hi def link cssTableProp StorageClass
line 409:   HiLink cssTextProp StorageClass
line 409: hi def link cssTextProp StorageClass
line 410:   HiLink cssTransformProp StorageClass
line 410: hi def link cssTransformProp StorageClass
line 411:   HiLink cssTransitionProp StorageClass
line 411: hi def link cssTransitionProp StorageClass
line 412:   HiLink cssUIProp StorageClass
line 412: hi def link cssUIProp StorageClass
line 413:   HiLink cssAuralProp StorageClass
line 413: hi def link cssAuralProp StorageClass
line 414:   HiLink cssRenderProp StorageClass
line 414: hi def link cssRenderProp StorageClass
line 415: 
line 416:   HiLink cssAnimationAttr Type
line 416: hi def link cssAnimationAttr Type
line 417:   HiLink cssBackgroundAttr Type
line 417: hi def link cssBackgroundAttr Type
line 418:   HiLink cssBorderOutlineAttr Type
line 418: hi def link cssBorderOutlineAttr Type
line 419:   HiLink cssBoxAttr Type
line 419: hi def link cssBoxAttr Type
line 420:   HiLink cssColorAttr Type
line 420: hi def link cssColorAttr Type
line 421:   HiLink cssContentForPagedMediaAttr Type
line 421: hi def link cssContentForPagedMediaAttr Type
line 422:   HiLink cssDimensionAttr Type
line 422: hi def link cssDimensionAttr Type
line 423:   HiLink cssFlexibleBoxAttr Type
line 423: hi def link cssFlexibleBoxAttr Type
line 424:   HiLink cssFontAttr Type
line 424: hi def link cssFontAttr Type
line 425:   HiLink cssGeneratedContentAttr Type
line 425: hi def link cssGeneratedContentAttr Type
line 426:   HiLink cssGridAttr Type
line 426: hi def link cssGridAttr Type
line 427:   HiLink cssHyerlinkAttr Type
line 427: hi def link cssHyerlinkAttr Type
line 428:   HiLink cssLineboxAttr Type
line 428: hi def link cssLineboxAttr Type
line 429:   HiLink cssListAttr Type
line 429: hi def link cssListAttr Type
line 430:   HiLink cssMarginAttr Type
line 430: hi def link cssMarginAttr Type
line 431:   HiLink cssMarqueeAttr Type
line 431: hi def link cssMarqueeAttr Type
line 432:   HiLink cssMultiColumnAttr Type
line 432: hi def link cssMultiColumnAttr Type
line 433:   HiLink cssPaddingAttr Type
line 433: hi def link cssPaddingAttr Type
line 434:   HiLink cssPagedMediaAttr Type
line 434: hi def link cssPagedMediaAttr Type
line 435:   HiLink cssPositioningAttr Type
line 435: hi def link cssPositioningAttr Type
line 436:   HiLink cssPrintAttr Type
line 436: hi def link cssPrintAttr Type
line 437:   HiLink cssRubyAttr Type
line 437: hi def link cssRubyAttr Type
line 438:   HiLink cssSpeechAttr Type
line 438: hi def link cssSpeechAttr Type
line 439:   HiLink cssTableAttr Type
line 439: hi def link cssTableAttr Type
line 440:   HiLink cssTextAttr Type
line 440: hi def link cssTextAttr Type
line 441:   HiLink cssTransformAttr Type
line 441: hi def link cssTransformAttr Type
line 442:   HiLink cssTransitionAttr Type
line 442: hi def link cssTransitionAttr Type
line 443:   HiLink cssUIAttr Type
line 443: hi def link cssUIAttr Type
line 444:   HiLink cssAuralAttr Type
line 444: hi def link cssAuralAttr Type
line 445:   HiLink cssRenderAttr Type
line 445: hi def link cssRenderAttr Type
line 446:   HiLink cssCommonAttr Type
line 446: hi def link cssCommonAttr Type
line 447: 
line 448:   HiLink cssPseudoClassId PreProc
line 448: hi def link cssPseudoClassId PreProc
line 449:   HiLink cssPseudoClassLang Constant
line 449: hi def link cssPseudoClassLang Constant
line 450:   HiLink cssValueLength Number
line 450: hi def link cssValueLength Number
line 451:   HiLink cssValueInteger Number
line 451: hi def link cssValueInteger Number
line 452:   HiLink cssValueNumber Number
line 452: hi def link cssValueNumber Number
line 453:   HiLink cssValueAngle Number
line 453: hi def link cssValueAngle Number
line 454:   HiLink cssValueTime Number
line 454: hi def link cssValueTime Number
line 455:   HiLink cssValueFrequency Number
line 455: hi def link cssValueFrequency Number
line 456:   HiLink cssFunction Constant
line 456: hi def link cssFunction Constant
line 457:   HiLink cssURL String
line 457: hi def link cssURL String
line 458:   HiLink cssFunctionName Function
line 458: hi def link cssFunctionName Function
line 459:   HiLink cssColor Constant
line 459: hi def link cssColor Constant
line 460:   HiLink cssIdentifier Function
line 460: hi def link cssIdentifier Function
line 461:   HiLink cssInclude Include
line 461: hi def link cssInclude Include
line 462:   HiLink cssImportant Special
line 462: hi def link cssImportant Special
line 463:   HiLink cssBraces Function
line 463: hi def link cssBraces Function
line 464:   HiLink cssBraceError Error
line 464: hi def link cssBraceError Error
line 465:   HiLink cssError Error
line 465: hi def link cssError Error
line 466:   HiLink cssInclude Include
line 466: hi def link cssInclude Include
line 467:   HiLink cssUnicodeEscape Special
line 467: hi def link cssUnicodeEscape Special
line 468:   HiLink cssStringQQ String
line 468: hi def link cssStringQQ String
line 469:   HiLink cssStringQ String
line 469: hi def link cssStringQ String
line 470:   HiLink cssMedia Special
line 470: hi def link cssMedia Special
line 471:   HiLink cssMediaType Special
line 471: hi def link cssMediaType Special
line 472:   HiLink cssMediaComma Normal
line 472: hi def link cssMediaComma Normal
line 473:   HiLink cssFontDescriptor Special
line 473: hi def link cssFontDescriptor Special
line 474:   HiLink cssFontDescriptorFunction Constant
line 474: hi def link cssFontDescriptorFunction Constant
line 475:   HiLink cssFontDescriptorProp StorageClass
line 475: hi def link cssFontDescriptorProp StorageClass
line 476:   HiLink cssFontDescriptorAttr Type
line 476: hi def link cssFontDescriptorAttr Type
line 477:   HiLink cssUnicodeRange Constant
line 477: hi def link cssUnicodeRange Constant
line 478:   HiLink cssClassName Function
line 478: hi def link cssClassName Function
line 479:   delcommand HiLink
line 480: endif
line 481: 
line 482: let b:current_syntax = "css"
line 483: 
line 484: if main_syntax == 'css'
line 485:   unlet main_syntax
line 486: endif
line 487: 
line 488: let &cpo = s:cpo_save
line 489: unlet s:cpo_save
line 490: " vim: ts=8
line 491: 
finished sourcing /usr/share/vim/vim74/syntax/css.vim
continuing in /usr/share/vim/vim74/syntax/html.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/css.vim"
Searching for "/var/lib/vim/addons/after/syntax/css.vim"
Searching for "/home/kguest/.vim/after/syntax/css.vim"
line 205:   unlet b:current_syntax
line 206:   syn region cssStyle start=+<style+ keepend end=+</style>+ contains=@htmlCss,htmlTag,htmlEndTag,htmlCssStyleComment,@htmlPreproc
line 207:   syn match htmlCssStyleComment contained "\(<!--\|-->\)"
line 208:   syn region htmlCssDefinition matchgroup=htmlArg start='style="' keepend matchgroup=htmlString end='"' contains=css.*Attr,css.*Prop,cssComment,cssLength,cssColor,cssURL,cssImportant,cssError,cssString,@htmlPreproc
line 209:   HtmlHiLink htmlStyleArg htmlString
line 209: hi def link htmlStyleArg htmlString
line 210: endif
line 211: 
line 212: if main_syntax == "html"
line 213:   " synchronizing (does not always work if a comment includes legal
line 214:   " html tags, but doing it right would mean to always start
line 215:   " at the first line, which is too slow)
line 216:   syn sync match htmlHighlight groupthere NONE "<[/a-zA-Z]"
line 217:   syn sync match htmlHighlight groupthere javaScript "<script"
line 218:   syn sync match htmlHighlightSkip "^.*['\"].*$"
line 219:   syn sync minlines=10
line 220: endif
line 221: 
line 222: " The default highlighting.
line 223: if version >= 508 || !exists("did_html_syn_inits")
line 224:   if version < 508
line 225:     let did_html_syn_inits = 1
line 226:   endif
line 227:   HtmlHiLink htmlTag                     Function
line 227: hi def link htmlTag                     Function
line 228:   HtmlHiLink htmlEndTag                  Identifier
line 228: hi def link htmlEndTag                  Identifier
line 229:   HtmlHiLink htmlArg                     Type
line 229: hi def link htmlArg                     Type
line 230:   HtmlHiLink htmlTagName                 htmlStatement
line 230: hi def link htmlTagName                 htmlStatement
line 231:   HtmlHiLink htmlSpecialTagName          Exception
line 231: hi def link htmlSpecialTagName          Exception
line 232:   HtmlHiLink htmlValue                     String
line 232: hi def link htmlValue                     String
line 233:   HtmlHiLink htmlSpecialChar             Special
line 233: hi def link htmlSpecialChar             Special
line 234:   
line 235:   if !exists("html_no_rendering")
line 236:     HtmlHiLink htmlH1                      Title
line 236: hi def link htmlH1                      Title
line 237:     HtmlHiLink htmlH2                      htmlH1
line 237: hi def link htmlH2                      htmlH1
line 238:     HtmlHiLink htmlH3                      htmlH2
line 238: hi def link htmlH3                      htmlH2
line 239:     HtmlHiLink htmlH4                      htmlH3
line 239: hi def link htmlH4                      htmlH3
line 240:     HtmlHiLink htmlH5                      htmlH4
line 240: hi def link htmlH5                      htmlH4
line 241:     HtmlHiLink htmlH6                      htmlH5
line 241: hi def link htmlH6                      htmlH5
line 242:     HtmlHiLink htmlHead                    PreProc
line 242: hi def link htmlHead                    PreProc
line 243:     HtmlHiLink htmlTitle                   Title
line 243: hi def link htmlTitle                   Title
line 244:     HtmlHiLink htmlBoldItalicUnderline     htmlBoldUnderlineItalic
line 244: hi def link htmlBoldItalicUnderline     htmlBoldUnderlineItalic
line 245:     HtmlHiLink htmlUnderlineBold           htmlBoldUnderline
line 245: hi def link htmlUnderlineBold           htmlBoldUnderline
line 246:     HtmlHiLink htmlUnderlineItalicBold     htmlBoldUnderlineItalic
line 246: hi def link htmlUnderlineItalicBold     htmlBoldUnderlineItalic
line 247:     HtmlHiLink htmlUnderlineBoldItalic     htmlBoldUnderlineItalic
line 247: hi def link htmlUnderlineBoldItalic     htmlBoldUnderlineItalic
line 248:     HtmlHiLink htmlItalicUnderline         htmlUnderlineItalic
line 248: hi def link htmlItalicUnderline         htmlUnderlineItalic
line 249:     HtmlHiLink htmlItalicBold              htmlBoldItalic
line 249: hi def link htmlItalicBold              htmlBoldItalic
line 250:     HtmlHiLink htmlItalicBoldUnderline     htmlBoldUnderlineItalic
line 250: hi def link htmlItalicBoldUnderline     htmlBoldUnderlineItalic
line 251:     HtmlHiLink htmlItalicUnderlineBold     htmlBoldUnderlineItalic
line 251: hi def link htmlItalicUnderlineBold     htmlBoldUnderlineItalic
line 252:     HtmlHiLink htmlLink                    Underlined
line 252: hi def link htmlLink                    Underlined
line 253:     HtmlHiLink htmlLeadingSpace            None
line 253: hi def link htmlLeadingSpace            None
line 254:     if !exists("html_my_rendering")
line 255:       hi def htmlBold                term=bold cterm=bold gui=bold
line 256:       hi def htmlBoldUnderline       term=bold,underline cterm=bold,underline gui=bold,underline
line 257:       hi def htmlBoldItalic          term=bold,italic cterm=bold,italic gui=bold,italic
line 258:       hi def htmlBoldUnderlineItalic term=bold,italic,underline cterm=bold,italic,underline gui=bold,italic,underline
line 259:       hi def htmlUnderline           term=underline cterm=underline gui=underline
line 260:       hi def htmlUnderlineItalic     term=italic,underline cterm=italic,underline gui=italic,underline
line 261:       hi def htmlItalic              term=italic cterm=italic gui=italic
line 262:     endif
line 263:   endif
line 264:   
line 265:   HtmlHiLink htmlPreStmt            PreProc
line 265: hi def link htmlPreStmt            PreProc
line 266:   HtmlHiLink htmlPreError           Error
line 266: hi def link htmlPreError           Error
line 267:   HtmlHiLink htmlPreProc            PreProc
line 267: hi def link htmlPreProc            PreProc
line 268:   HtmlHiLink htmlPreAttr            String
line 268: hi def link htmlPreAttr            String
line 269:   HtmlHiLink htmlPreProcAttrName    PreProc
line 269: hi def link htmlPreProcAttrName    PreProc
line 270:   HtmlHiLink htmlPreProcAttrError   Error
line 270: hi def link htmlPreProcAttrError   Error
line 271:   HtmlHiLink htmlSpecial            Special
line 271: hi def link htmlSpecial            Special
line 272:   HtmlHiLink htmlSpecialChar        Special
line 272: hi def link htmlSpecialChar        Special
line 273:   HtmlHiLink htmlString             String
line 273: hi def link htmlString             String
line 274:   HtmlHiLink htmlStatement          Statement
line 274: hi def link htmlStatement          Statement
line 275:   HtmlHiLink htmlComment            Comment
line 275: hi def link htmlComment            Comment
line 276:   HtmlHiLink htmlCommentPart        Comment
line 276: hi def link htmlCommentPart        Comment
line 277:   HtmlHiLink htmlValue              String
line 277: hi def link htmlValue              String
line 278:   HtmlHiLink htmlCommentError       htmlError
line 278: hi def link htmlCommentError       htmlError
line 279:   HtmlHiLink htmlTagError           htmlError
line 279: hi def link htmlTagError           htmlError
line 280:   HtmlHiLink htmlEvent              javaScript
line 280: hi def link htmlEvent              javaScript
line 281:   HtmlHiLink htmlError              Error
line 281: hi def link htmlError              Error
line 282:   
line 283:   HtmlHiLink javaScript             Special
line 283: hi def link javaScript             Special
line 284:   HtmlHiLink javaScriptExpression   javaScript
line 284: hi def link javaScriptExpression   javaScript
line 285:   HtmlHiLink htmlCssStyleComment    Comment
line 285: hi def link htmlCssStyleComment    Comment
line 286:   HtmlHiLink htmlCssDefinition      Special
line 286: hi def link htmlCssDefinition      Special
line 287: endif
line 288: 
line 289: delcommand HtmlHiLink
line 290: 
line 291: let b:current_syntax = "html"
line 292: 
line 293: if main_syntax == 'html'
line 294:   unlet main_syntax
line 295: endif
line 296: 
line 297: let &cpo = s:cpo_save
line 298: unlet s:cpo_save
line 299: " vim: ts=8
finished sourcing /usr/share/vim/vim74/syntax/html.vim
continuing in /home/kguest/My-.vim-files/syntax/php.vim
line 63: unlet b:current_syntax
line 64: 
line 65: " Set sync method if none declared
line 66: if !exists("php_sync_method")
line 67:   if exists("php_minlines")
line 68:     let php_sync_method=php_minlines
line 69:   else
line 70:     let php_sync_method=-1
line 71:   endif
line 72: endif
line 73: 
line 74: syn cluster htmlPreproc add=phpRegion
line 75: 
line 76: syn include @sqlTop syntax/sql.vim
Searching for "syntax/sql.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/syntax/sql.vim"
Searching for "/home/kguest/.vim/syntax/sql.vim"
Searching for "/var/lib/vim/addons/syntax/sql.vim"
Searching for "/usr/share/vim/vimfiles/syntax/sql.vim"
Searching for "/usr/share/vim/vim74/syntax/sql.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 76: sourcing "/usr/share/vim/vim74/syntax/sql.vim"
line 1: " Vim syntax file loader
line 2: " Language:    SQL
line 3: " Maintainer:  David Fishburn <fishburn at ianywhere dot com>
line 4: " Last Change: Thu Sep 15 2005 10:30:02 AM
line 5: " Version:     1.0
line 6: 
line 7: " Description: Checks for a:
line 8: "                  buffer local variable,
line 9: "                  global variable,
line 10: "              If the above exist, it will source the type specified.
line 11: "              If none exist, it will source the default sql.vim file.
line 12: "
line 13: " For version 5.x: Clear all syntax items
line 14: " For version 6.x: Quit when a syntax file was already loaded
line 15: if version < 600
line 16:     syntax clear
line 17: elseif exists("b:current_syntax")
line 18:     finish
line 19: endif
line 20: 
line 21: " Default to the standard Vim distribution file
line 22: let filename = 'sqloracle'
line 23: 
line 24: " Check for overrides.  Buffer variables have the highest priority.
line 25: if exists("b:sql_type_override")
line 26:     " Check the runtimepath to see if the file exists
line 27:     if globpath(&runtimepath, 'syntax/'.b:sql_type_override.'.vim') != ''
line 28:         let filename = b:sql_type_override
line 29:     endif
line 30: elseif exists("g:sql_type_default")
line 31:     if globpath(&runtimepath, 'syntax/'.g:sql_type_default.'.vim') != ''
line 32:         let filename = g:sql_type_default
line 33:     endif
line 34: endif
line 35: 
line 36: " Source the appropriate file
line 37: exec 'runtime syntax/'.filename.'.vim'
line 37: runtime syntax/sqloracle.vim
Searching for "syntax/sqloracle.vim" in "/home/kguest/.vim/bundle/ctrlp.vim,/home/kguest/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/kguest/.vim/after"
Searching for "/home/kguest/.vim/bundle/ctrlp.vim/syntax/sqloracle.vim"
Searching for "/home/kguest/.vim/syntax/sqloracle.vim"
Searching for "/var/lib/vim/addons/syntax/sqloracle.vim"
Searching for "/usr/share/vim/vimfiles/syntax/sqloracle.vim"
Searching for "/usr/share/vim/vim74/syntax/sqloracle.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 37: sourcing "/usr/share/vim/vim74/syntax/sqloracle.vim"
line 1: " Vim syntax file
line 2: " Language:^ISQL, PL/SQL (Oracle 8i)
line 3: " Maintainer:^IPaul Moore <pf_moore AT yahoo.co.uk>
line 4: " Last Change:^I2005 Dec 23
line 5: 
line 6: " For version 5.x: Clear all syntax items
line 7: " For version 6.x: Quit when a syntax file was already loaded
line 8: if version < 600
line 9:   syntax clear
line 10: elseif exists("b:current_syntax")
line 11:   finish
line 12: endif
line 13: 
line 14: syn case ignore
line 15: 
line 16: " The SQL reserved words, defined as keywords.
line 17: 
line 18: syn keyword sqlSpecial  false null true
line 19: 
line 20: syn keyword sqlKeyword^Iaccess add as asc begin by check cluster column
line 21: syn keyword sqlKeyword^Icompress connect current cursor decimal default desc
line 22: syn keyword sqlKeyword^Ielse elsif end exception exclusive file for from
line 23: syn keyword sqlKeyword^Ifunction group having identified if immediate increment
line 24: syn keyword sqlKeyword^Iindex initial into is level loop maxextents mode modify
line 25: syn keyword sqlKeyword^Inocompress nowait of offline on online start
line 26: syn keyword sqlKeyword^Isuccessful synonym table then to trigger uid
line 27: syn keyword sqlKeyword^Iunique user validate values view whenever
line 28: syn keyword sqlKeyword^Iwhere with option order pctfree privileges procedure
line 29: syn keyword sqlKeyword^Ipublic resource return row rowlabel rownum rows
line 30: syn keyword sqlKeyword^Isession share size smallint type using
line 31: 
line 32: syn keyword sqlOperator^Inot and or
line 33: syn keyword sqlOperator^Iin any some all between exists
line 34: syn keyword sqlOperator^Ilike escape
line 35: syn keyword sqlOperator union intersect minus
line 36: syn keyword sqlOperator prior distinct
line 37: syn keyword sqlOperator^Isysdate out
line 38: 
line 39: syn keyword sqlStatement alter analyze audit comment commit create
line 40: syn keyword sqlStatement delete drop execute explain grant insert lock noaudit
line 41: syn keyword sqlStatement rename revoke rollback savepoint select set
line 42: syn keyword sqlStatement truncate update
line 43: 
line 44: syn keyword sqlType^Iboolean char character date float integer long
line 45: syn keyword sqlType^Imlslabel number raw rowid varchar varchar2 varray
line 46: 
line 47: " Strings and characters:
line 48: syn region sqlString^I^Istart=+"+  skip=+\\\\\|\\"+  end=+"+
line 49: syn region sqlString^I^Istart=+'+  skip=+\\\\\|\\'+  end=+'+
line 50: 
line 51: " Numbers:
line 52: syn match sqlNumber^I^I"-\=\<\d*\.\=[0-9_]\>"
line 53: 
line 54: " Comments:
line 55: syn region sqlComment    start="/\*"  end="\*/" contains=sqlTodo
line 56: syn match sqlComment^I"--.*$" contains=sqlTodo
line 57: 
line 58: syn sync ccomment sqlComment
line 59: 
line 60: " Todo.
line 61: syn keyword sqlTodo contained TODO FIXME XXX DEBUG NOTE
line 62: 
line 63: " Define the default highlighting.
line 64: " For version 5.7 and earlier: only when not done already
line 65: " For version 5.8 and later: only when an item doesn't have highlighting yet
line 66: if version >= 508 || !exists("did_sql_syn_inits")
line 67:   if version < 508
line 68:     let did_sql_syn_inits = 1
line 69:     command -nargs=+ HiLink hi link <args>
line 70:   else
line 71:     command -nargs=+ HiLink hi def link <args>
line 72:   endif
line 73: 
line 74:   HiLink sqlComment^IComment
line 74: hi def link sqlComment^IComment
line 75:   HiLink sqlKeyword^IsqlSpecial
line 75: hi def link sqlKeyword^IsqlSpecial
line 76:   HiLink sqlNumber^INumber
line 76: hi def link sqlNumber^INumber
line 77:   HiLink sqlOperator^IsqlStatement
line 77: hi def link sqlOperator^IsqlStatement
line 78:   HiLink sqlSpecial^ISpecial
line 78: hi def link sqlSpecial^ISpecial
line 79:   HiLink sqlStatement^IStatement
line 79: hi def link sqlStatement^IStatement
line 80:   HiLink sqlString^IString
line 80: hi def link sqlString^IString
line 81:   HiLink sqlType^IType
line 81: hi def link sqlType^IType
line 82:   HiLink sqlTodo^ITodo
line 82: hi def link sqlTodo^ITodo
line 83: 
line 84:   delcommand HiLink
line 85: endif
line 86: 
line 87: let b:current_syntax = "sql"
line 88: 
line 89: " vim: ts=8
finished sourcing /usr/share/vim/vim74/syntax/sqloracle.vim
continuing in /usr/share/vim/vim74/syntax/sql.vim
line 38: 
line 39: " vim:sw=4:
finished sourcing /usr/share/vim/vim74/syntax/sql.vim
continuing in /home/kguest/My-.vim-files/syntax/php.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/sql.vim"
Searching for "/var/lib/vim/addons/after/syntax/sql.vim"
Searching for "/home/kguest/.vim/after/syntax/sql.vim"
line 77: 
line 78: syn sync clear
line 79: unlet b:current_syntax
line 80: syn cluster sqlTop remove=sqlString,sqlComment
line 81: if exists("php_sql_query")
line 82:   syn cluster phpAddStrings contains=@sqlTop
line 83: endif
line 84: 
line 85: if exists("php_html_in_strings")
line 86:   syn cluster phpAddStrings add=@htmlTop
line 87: endif
line 88: 
line 89: syn case match
line 90:  
line 91: " Superblobals
line 92: syn keyword phpSuperglobals GLOBALS _GET _POST _REQUEST _FILES _COOKIE _SERVER _SESSION _ENV HTTP_RAW_POST_DATA php_errormsg http_response_header argc argv contained
line 93: 
line 94: " Magic Constants
line 95: syn keyword phpMagicConstants __LINE__ __FILE__ __DIR__ __FUNCTION__ __CLASS__ __METHOD__ __NAMESPACE__ contained
line 96: 
line 97: " $_SERVER Variables
line 98: syn keyword phpServerVars GATEWAY_INTERFACE SERVER_NAME SERVER_SOFTWARE SERVER_PROTOCOL REQUEST_METHOD QUERY_STRING DOCUMENT_ROOT HTTP_ACCEPT HTTP_ACCEPT_CHARSET HTTP_ENCODING HTTP_ACCEPT_LANGUAGE HTTP_CONNECTION HTTP_HOST HTTP_REFERER HTTP_USER_AGENT REMOTE_ADDR REMOTE_PORT SCRIPT_FILENAME SERVER_ADMIN SERVER_PORT SERVER_SIGNATURE PATH_TRANSLATED SCRIPT_NAME REQUEST_URI PHP_SELF contained
line 99: 
line 100: " === BEGIN BUILTIN FUNCTIONS, CLASSES, AND CONSTANTS ===================================
line 101: 
line 102: " Core
line 103: syn keyword phpConstants E_ERROR E_RECOVERABLE_ERROR E_WARNING E_PARSE E_NOTICE E_STRICT E_DEPRECATED E_CORE_ERROR E_CORE_WARNING E_COMPILE_ERROR E_COMPILE_WARNING E_USER_ERROR E_USER_WARNING E_USER_NOTICE E_USER_DEPRECATED E_ALL TRUE FALSE NULL ZEND_THREAD_SAFE ZEND_DEBUG_BUILD PHP_VERSION PHP_MAJOR_VERSION PHP_MINOR_VERSION PHP_RELEASE_VERSION PHP_EXTRA_VERSION PHP_VERSION_ID PHP_ZTS PHP_DEBUG PHP_OS PHP_SAPI DEFAULT_INCLUDE_PATH PEAR_INSTALL_DIR PEAR_EXTENSION_DIR PHP_EXTENSION_DIR PHP_PREFIX PHP_BINDIR PHP_LIBDIR PHP_DATADIR PHP_SYSCONFDIR PHP_LOCALSTATEDIR PHP_CONFIG_FILE_PATH PHP_CONFIG_FILE_SCAN_DIR PHP_SHLIB_SUFFIX PHP_EOL PHP_MAXPATHLEN PHP_INT_MAX PHP_INT_SIZE PHP_WINDOWS_VERSION_MAJOR PHP_WINDOWS_VERSION_MINOR PHP_WINDOWS_VERSION_BUILD PHP_WINDOWS_VERSION_PLATFORM PHP_WINDOWS_VERSION_SP_MAJOR PHP_WINDOWS_VERSION_SP_MINOR PHP_WINDOWS_VERSION_SUITEMASK PHP_WINDOWS_VERSION_PRODUCTTYPE PHP_WINDOWS_NT_DOMAIN_CONTROLLER PHP_WINDOWS_NT_SERVER PHP_WINDOWS_NT_WORKSTATION PHP_OUTPUT_HANDLER_START P
line 104: 
line 105: " calendar
line 106: syn keyword phpConstants CAL_GREGORIAN CAL_JULIAN CAL_JEWISH CAL_FRENCH CAL_NUM_CALS CAL_DOW_DAYNO CAL_DOW_SHORT CAL_DOW_LONG CAL_MONTH_GREGORIAN_SHORT CAL_MONTH_GREGORIAN_LONG CAL_MONTH_JULIAN_SHORT CAL_MONTH_JULIAN_LONG CAL_MONTH_JEWISH CAL_MONTH_FRENCH CAL_EASTER_DEFAULT CAL_EASTER_ROMAN CAL_EASTER_ALWAYS_GREGORIAN CAL_EASTER_ALWAYS_JULIAN CAL_JEWISH_ADD_ALAFIM_GERESH CAL_JEWISH_ADD_ALAFIM CAL_JEWISH_ADD_GERESHAYIM contained
line 107: 
line 108: " com_dotnet
line 109: syn keyword phpConstants CLSCTX_INPROC_SERVER CLSCTX_INPROC_HANDLER CLSCTX_LOCAL_SERVER CLSCTX_REMOTE_SERVER CLSCTX_SERVER CLSCTX_ALL VT_NULL VT_EMPTY VT_UI1 VT_I1 VT_UI2 VT_I2 VT_UI4 VT_I4 VT_R4 VT_R8 VT_BOOL VT_ERROR VT_CY VT_DATE VT_BSTR VT_DECIMAL VT_UNKNOWN VT_DISPATCH VT_VARIANT VT_INT VT_UINT VT_ARRAY VT_BYREF CP_ACP CP_MACCP CP_OEMCP CP_UTF7 CP_UTF8 CP_SYMBOL CP_THREAD_ACP VARCMP_LT VARCMP_EQ VARCMP_GT VARCMP_NULL NORM_IGNORECASE NORM_IGNORENONSPACE NORM_IGNORESYMBOLS NORM_IGNOREWIDTH NORM_IGNOREKANATYPE DISP_E_DIVBYZERO DISP_E_OVERFLOW DISP_E_BADINDEX MK_E_UNAVAILABLE contained
line 110: 
line 111: " curl
line 112: syn keyword phpConstants CURLOPT_IPRESOLVE CURL_IPRESOLVE_WHATEVER CURL_IPRESOLVE_V4 CURL_IPRESOLVE_V6 CURLOPT_DNS_USE_GLOBAL_CACHE CURLOPT_DNS_CACHE_TIMEOUT CURLOPT_PORT CURLOPT_FILE CURLOPT_READDATA CURLOPT_INFILE CURLOPT_INFILESIZE CURLOPT_URL CURLOPT_PROXY CURLOPT_VERBOSE CURLOPT_HEADER CURLOPT_HTTPHEADER CURLOPT_NOPROGRESS CURLOPT_PROGRESSFUNCTION CURLOPT_NOBODY CURLOPT_FAILONERROR CURLOPT_UPLOAD CURLOPT_POST CURLOPT_FTPLISTONLY CURLOPT_FTPAPPEND CURLOPT_NETRC CURLOPT_FOLLOWLOCATION CURLOPT_PUT CURLOPT_USERPWD CURLOPT_PROXYUSERPWD CURLOPT_RANGE CURLOPT_TIMEOUT CURLOPT_TIMEOUT_MS CURLOPT_POSTFIELDS CURLOPT_REFERER CURLOPT_USERAGENT CURLOPT_FTPPORT CURLOPT_FTP_USE_EPSV CURLOPT_LOW_SPEED_LIMIT CURLOPT_LOW_SPEED_TIME CURLOPT_RESUME_FROM CURLOPT_COOKIE CURLOPT_COOKIESESSION CURLOPT_AUTOREFERER CURLOPT_SSLCERT CURLOPT_SSLCERTPASSWD CURLOPT_WRITEHEADER CURLOPT_SSL_VERIFYHOST CURLOPT_COOKIEFILE CURLOPT_SSLVERSION CURLOPT_TIMECONDITION CURLOPT_TIMEVALUE CURLOPT_CUSTOMREQUEST CURLOPT_STDERR CURLOPT_TRANS
line 113: 
line 114: " date
line 115: syn keyword phpConstants  DATE_ATOM DATE_COOKIE DATE_ISO8601 DATE_RFC822 DATE_RFC850 DATE_RFC1036 DATE_RFC1123 DATE_RFC2822 DATE_RFC3339 DATE_RSS DATE_W3C SUNFUNCS_RET_TIMESTAMP SUNFUNCS_RET_STRING SUNFUNCS_RET_DOUBLE ATOM COOKIE ISO8601 RFC822 RFC850 RFC1036 RFC1123 RFC2822 RFC3339 RSS W3C AFRICA AMERICA ANTARCTICA ARCTIC ASIA ATLANTIC AUSTRALIA EUROPE INDIAN PACIFIC UTC ALL ALL_WITH_BC PER_COUNTRY EXCLUDE_START_DATE contained
line 116: 
line 117: " dom
line 118: syn keyword phpConstants XML_ELEMENT_NODE XML_ATTRIBUTE_NODE XML_TEXT_NODE XML_CDATA_SECTION_NODE XML_ENTITY_REF_NODE XML_ENTITY_NODE XML_PI_NODE XML_COMMENT_NODE XML_DOCUMENT_NODE XML_DOCUMENT_TYPE_NODE XML_DOCUMENT_FRAG_NODE XML_NOTATION_NODE XML_HTML_DOCUMENT_NODE XML_DTD_NODE XML_ELEMENT_DECL_NODE XML_ATTRIBUTE_DECL_NODE XML_ENTITY_DECL_NODE XML_NAMESPACE_DECL_NODE XML_LOCAL_NAMESPACE XML_ATTRIBUTE_CDATA XML_ATTRIBUTE_ID XML_ATTRIBUTE_IDREF XML_ATTRIBUTE_IDREFS XML_ATTRIBUTE_ENTITY XML_ATTRIBUTE_NMTOKEN XML_ATTRIBUTE_NMTOKENS XML_ATTRIBUTE_ENUMERATION XML_ATTRIBUTE_NOTATION DOM_PHP_ERR DOM_INDEX_SIZE_ERR DOMSTRING_SIZE_ERR DOM_HIERARCHY_REQUEST_ERR DOM_WRONG_DOCUMENT_ERR DOM_INVALID_CHARACTER_ERR DOM_NO_DATA_ALLOWED_ERR DOM_NO_MODIFICATION_ALLOWED_ERR DOM_NOT_FOUND_ERR DOM_NOT_SUPPORTED_ERR DOM_INUSE_ATTRIBUTE_ERR DOM_INVALID_STATE_ERR DOM_SYNTAX_ERR DOM_INVALID_MODIFICATION_ERR DOM_NAMESPACE_ERR DOM_INVALID_ACCESS_ERR DOM_VALIDATION_ERR contained
line 119: 
line 120: " exif
line 121: syn keyword phpConstants EXIF_USE_MBSTRING contained
line 122: 
line 123: " fileinfo
line 124: syn keyword phpConstants FILEINFO_NONE FILEINFO_SYMLINK FILEINFO_MIME FILEINFO_MIME_TYPE FILEINFO_MIME_ENCODING FILEINFO_DEVICES FILEINFO_CONTINUE FILEINFO_PRESERVE_ATIME FILEINFO_RAW contained
line 125: 
line 126: " filter
line 127: syn keyword phpConstants INPUT_POST INPUT_GET INPUT_COOKIE INPUT_ENV INPUT_SERVER INPUT_SESSION INPUT_REQUEST FILTER_FLAG_NONE FILTER_REQUIRE_SCALAR FILTER_REQUIRE_ARRAY FILTER_FORCE_ARRAY FILTER_NULL_ON_FAILURE FILTER_VALIDATE_INT FILTER_VALIDATE_BOOLEAN FILTER_VALIDATE_FLOAT FILTER_VALIDATE_REGEXP FILTER_VALIDATE_URL FILTER_VALIDATE_EMAIL FILTER_VALIDATE_IP FILTER_DEFAULT FILTER_UNSAFE_RAW FILTER_SANITIZE_STRING FILTER_SANITIZE_STRIPPED FILTER_SANITIZE_ENCODED FILTER_SANITIZE_SPECIAL_CHARS FILTER_SANITIZE_EMAIL FILTER_SANITIZE_URL FILTER_SANITIZE_NUMBER_INT FILTER_SANITIZE_NUMBER_FLOAT FILTER_SANITIZE_MAGIC_QUOTES FILTER_CALLBACK FILTER_FLAG_ALLOW_OCTAL FILTER_FLAG_ALLOW_HEX FILTER_FLAG_STRIP_LOW FILTER_FLAG_STRIP_HIGH FILTER_FLAG_ENCODE_LOW FILTER_FLAG_ENCODE_HIGH FILTER_FLAG_ENCODE_AMP FILTER_FLAG_NO_ENCODE_QUOTES FILTER_FLAG_EMPTY_STRING_NULL FILTER_FLAG_ALLOW_FRACTION FILTER_FLAG_ALLOW_THOUSAND FILTER_FLAG_ALLOW_SCIENTIFIC FILTER_FLAG_SCHEME_REQUIRED FILTER_FLAG_HOST_REQUIRED FILTER_FLAG_PATH_
line 128: 
line 129: " ftp
line 130: syn keyword phpConstants FTP_ASCII FTP_TEXT FTP_BINARY FTP_IMAGE FTP_AUTORESUME FTP_TIMEOUT_SEC FTP_AUTOSEEK FTP_FAILED FTP_FINISHED FTP_MOREDATA contained
line 131: 
line 132: " gd
line 133: syn keyword phpConstants IMG_GIF IMG_JPG IMG_JPEG IMG_PNG IMG_WBMP IMG_XPM IMG_COLOR_TILED IMG_COLOR_STYLED IMG_COLOR_BRUSHED IMG_COLOR_STYLEDBRUSHED IMG_COLOR_TRANSPARENT IMG_ARC_ROUNDED IMG_ARC_PIE IMG_ARC_CHORD IMG_ARC_NOFILL IMG_ARC_EDGED IMG_GD2_RAW IMG_GD2_COMPRESSED IMG_EFFECT_REPLACE IMG_EFFECT_ALPHABLEND IMG_EFFECT_NORMAL IMG_EFFECT_OVERLAY GD_BUNDLED IMG_FILTER_NEGATE IMG_FILTER_GRAYSCALE IMG_FILTER_BRIGHTNESS IMG_FILTER_CONTRAST IMG_FILTER_COLORIZE IMG_FILTER_EDGEDETECT IMG_FILTER_GAUSSIAN_BLUR IMG_FILTER_SELECTIVE_BLUR IMG_FILTER_EMBOSS IMG_FILTER_MEAN_REMOVAL IMG_FILTER_SMOOTH IMG_FILTER_PIXELATE GD_VERSION GD_MAJOR_VERSION GD_MINOR_VERSION GD_RELEASE_VERSION GD_EXTRA_VERSION PNG_NO_FILTER PNG_FILTER_NONE PNG_FILTER_SUB PNG_FILTER_UP PNG_FILTER_AVG PNG_FILTER_PAETH PNG_ALL_FILTERS contained
line 134: 
line 135: " gmp
line 136: syn keyword phpConstants GMP_ROUND_ZERO GMP_ROUND_PLUSINF GMP_ROUND_MINUSINF GMP_VERSION contained
line 137: 
line 138: " hash
line 139: syn keyword phpConstants HASH_HMAC MHASH_CRC32 MHASH_MD5 MHASH_SHA1 MHASH_HAVAL256 MHASH_RIPEMD160 MHASH_TIGER MHASH_GOST MHASH_CRC32B MHASH_HAVAL224 MHASH_HAVAL192 MHASH_HAVAL160 MHASH_HAVAL128 MHASH_TIGER128 MHASH_TIGER160 MHASH_MD4 MHASH_SHA256 MHASH_ADLER32 MHASH_SHA224 MHASH_SHA512 MHASH_SHA384 MHASH_WHIRLPOOL MHASH_RIPEMD128 MHASH_RIPEMD256 MHASH_RIPEMD320 MHASH_SNEFRU256 MHASH_MD2 contained
line 140: 
line 141: " iconv
line 142: syn keyword phpConstants ICONV_IMPL ICONV_VERSION ICONV_MIME_DECODE_STRICT ICONV_MIME_DECODE_CONTINUE_ON_ERROR contained
line 143: 
line 144: " imap
line 145: syn keyword phpConstants NIL IMAP_OPENTIMEOUT IMAP_READTIMEOUT IMAP_WRITETIMEOUT IMAP_CLOSETIMEOUT OP_DEBUG OP_READONLY OP_ANONYMOUS OP_SHORTCACHE OP_SILENT OP_PROTOTYPE OP_HALFOPEN OP_EXPUNGE OP_SECURE CL_EXPUNGE FT_UID FT_PEEK FT_NOT FT_INTERNAL FT_PREFETCHTEXT ST_UID ST_SILENT ST_SET CP_UID CP_MOVE SE_UID SE_FREE SE_NOPREFETCH SO_FREE SO_NOSERVER SA_MESSAGES SA_RECENT SA_UNSEEN SA_UIDNEXT SA_UIDVALIDITY SA_ALL LATT_NOINFERIORS LATT_NOSELECT LATT_MARKED LATT_UNMARKED LATT_REFERRAL LATT_HASCHILDREN LATT_HASNOCHILDREN SORTDATE SORTARRIVAL SORTFROM SORTSUBJECT SORTTO SORTCC SORTSIZE TYPETEXT TYPEMULTIPART TYPEMESSAGE TYPEAPPLICATION TYPEAUDIO TYPEIMAGE TYPEVIDEO TYPEMODEL TYPEOTHER ENC7BIT ENC8BIT ENCBINARY ENCBASE64 ENCQUOTEDPRINTABLE ENCOTHER IMAP_GC_ELT IMAP_GC_ENV IMAP_GC_TEXTS contained
line 146: 
line 147: " intl
line 148: syn keyword phpConstants INTL_MAX_LOCALE_LEN ULOC_ACTUAL_LOCALE ULOC_VALID_LOCALE GRAPHEME_EXTR_COUNT GRAPHEME_EXTR_MAXBYTES GRAPHEME_EXTR_MAXCHARS U_USING_FALLBACK_WARNING U_ERROR_WARNING_START U_USING_DEFAULT_WARNING U_SAFECLONE_ALLOCATED_WARNING U_STATE_OLD_WARNING U_STRING_NOT_TERMINATED_WARNING U_SORT_KEY_TOO_SHORT_WARNING U_AMBIGUOUS_ALIAS_WARNING U_DIFFERENT_UCA_VERSION U_ERROR_WARNING_LIMIT U_ZERO_ERROR U_ILLEGAL_ARGUMENT_ERROR U_MISSING_RESOURCE_ERROR U_INVALID_FORMAT_ERROR U_FILE_ACCESS_ERROR U_INTERNAL_PROGRAM_ERROR U_MESSAGE_PARSE_ERROR U_MEMORY_ALLOCATION_ERROR U_INDEX_OUTOFBOUNDS_ERROR U_PARSE_ERROR U_INVALID_CHAR_FOUND U_TRUNCATED_CHAR_FOUND U_ILLEGAL_CHAR_FOUND U_INVALID_TABLE_FORMAT U_INVALID_TABLE_FILE U_BUFFER_OVERFLOW_ERROR U_UNSUPPORTED_ERROR U_RESOURCE_TYPE_MISMATCH U_ILLEGAL_ESCAPE_SEQUENCE U_UNSUPPORTED_ESCAPE_SEQUENCE U_NO_SPACE_AVAILABLE U_CE_NOT_FOUND_ERROR U_PRIMARY_TOO_LONG_ERROR U_STATE_TOO_OLD_ERROR U_TOO_MANY_ALIASES_ERROR U_ENUM_OUT_OF_SYNC_ERROR U_INVARIANT_CONVERSI
line 149: 
line 150: " json
line 151: syn keyword phpConstants JSON_HEX_TAG JSON_HEX_AMP JSON_HEX_APOS JSON_HEX_QUOT JSON_FORCE_OBJECT JSON_ERROR_NONE JSON_ERROR_DEPTH JSON_ERROR_STATE_MISMATCH JSON_ERROR_CTRL_CHAR JSON_ERROR_SYNTAX contained
line 152: 
line 153: " ldap
line 154: syn keyword phpConstants LDAP_DEREF_NEVER LDAP_DEREF_SEARCHING LDAP_DEREF_FINDING LDAP_DEREF_ALWAYS LDAP_OPT_DEREF LDAP_OPT_SIZELIMIT LDAP_OPT_TIMELIMIT LDAP_OPT_NETWORK_TIMEOUT LDAP_OPT_PROTOCOL_VERSION LDAP_OPT_ERROR_NUMBER LDAP_OPT_REFERRALS LDAP_OPT_RESTART LDAP_OPT_HOST_NAME LDAP_OPT_ERROR_STRING LDAP_OPT_MATCHED_DN LDAP_OPT_SERVER_CONTROLS LDAP_OPT_CLIENT_CONTROLS LDAP_OPT_DEBUG_LEVEL contained
line 155: 
line 156: " libxml
line 157: syn keyword phpConstants LIBXML_VERSION LIBXML_DOTTED_VERSION LIBXML_LOADED_VERSION LIBXML_NOENT LIBXML_DTDLOAD LIBXML_DTDATTR LIBXML_DTDVALID LIBXML_NOERROR LIBXML_NOWARNING LIBXML_NOBLANKS LIBXML_XINCLUDE LIBXML_NSCLEAN LIBXML_NOCDATA LIBXML_NONET LIBXML_COMPACT LIBXML_NOXMLDECL LIBXML_NOEMPTYTAG LIBXML_ERR_NONE LIBXML_ERR_WARNING LIBXML_ERR_ERROR LIBXML_ERR_FATAL contained
line 158: 
line 159: " mbstring
line 160: syn keyword phpConstants MB_OVERLOAD_MAIL MB_OVERLOAD_STRING MB_OVERLOAD_REGEX MB_CASE_UPPER MB_CASE_LOWER MB_CASE_TITLE contained
line 161: 
line 162: " mcrypt
line 163: syn keyword phpConstants  MCRYPT_ENCRYPT MCRYPT_DECRYPT MCRYPT_DEV_RANDOM MCRYPT_DEV_URANDOM MCRYPT_RAND MCRYPT_3DES MCRYPT_ARCFOUR_IV MCRYPT_ARCFOUR MCRYPT_BLOWFISH MCRYPT_BLOWFISH_COMPAT MCRYPT_CAST_128 MCRYPT_CAST_256 MCRYPT_CRYPT MCRYPT_DES MCRYPT_ENIGNA MCRYPT_GOST MCRYPT_LOKI97 MCRYPT_PANAMA MCRYPT_RC2 MCRYPT_RIJNDAEL_128 MCRYPT_RIJNDAEL_192 MCRYPT_RIJNDAEL_256 MCRYPT_SAFER64 MCRYPT_SAFER128 MCRYPT_SAFERPLUS MCRYPT_SERPENT MCRYPT_THREEWAY MCRYPT_TRIPLEDES MCRYPT_TWOFISH MCRYPT_WAKE MCRYPT_XTEA MCRYPT_IDEA MCRYPT_MARS MCRYPT_RC6 MCRYPT_SKIPJACK MCRYPT_MODE_CBC MCRYPT_MODE_CFB MCRYPT_MODE_ECB MCRYPT_MODE_NOFB MCRYPT_MODE_OFB MCRYPT_MODE_STREAM contained
line 164: 
line 165: " mysql
line 166: syn keyword phpConstants MYSQL_ASSOC MYSQL_NUM MYSQL_BOTH MYSQL_CLIENT_COMPRESS MYSQL_CLIENT_SSL MYSQL_CLIENT_INTERACTIVE MYSQL_CLIENT_IGNORE_SPACE contained
line 167: 
line 168: " mysqli
line 169: syn keyword phpConstants MYSQLI_READ_DEFAULT_GROUP MYSQLI_READ_DEFAULT_FILE MYSQLI_OPT_CONNECT_TIMEOUT MYSQLI_OPT_LOCAL_INFILE MYSQLI_INIT_COMMAND MYSQLI_OPT_NET_CMD_BUFFER_SIZE MYSQLI_OPT_NET_READ_BUFFER_SIZE MYSQLI_OPT_INT_AND_FLOAT_NATIVE MYSQLI_CLIENT_SSL MYSQLI_CLIENT_COMPRESS MYSQLI_CLIENT_INTERACTIVE MYSQLI_CLIENT_IGNORE_SPACE MYSQLI_CLIENT_NO_SCHEMA MYSQLI_CLIENT_FOUND_ROWS MYSQLI_STORE_RESULT MYSQLI_USE_RESULT MYSQLI_ASYNC MYSQLI_ASSOC MYSQLI_NUM MYSQLI_BOTH MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH MYSQLI_STMT_ATTR_CURSOR_TYPE MYSQLI_CURSOR_TYPE_NO_CURSOR MYSQLI_CURSOR_TYPE_READ_ONLY MYSQLI_CURSOR_TYPE_FOR_UPDATE MYSQLI_CURSOR_TYPE_SCROLLABLE MYSQLI_STMT_ATTR_PREFETCH_ROWS MYSQLI_NOT_NULL_FLAG MYSQLI_PRI_KEY_FLAG MYSQLI_UNIQUE_KEY_FLAG MYSQLI_MULTIPLE_KEY_FLAG MYSQLI_BLOB_FLAG MYSQLI_UNSIGNED_FLAG MYSQLI_ZEROFILL_FLAG MYSQLI_AUTO_INCREMENT_FLAG MYSQLI_TIMESTAMP_FLAG MYSQLI_SET_FLAG MYSQLI_NUM_FLAG MYSQLI_PART_KEY_FLAG MYSQLI_GROUP_FLAG MYSQLI_ENUM_FLAG MYSQLI_BINARY_FLAG MYSQLI_NO_DEFAULT_VALUE_F
line 170: 
line 171: " odbc
line 172: syn keyword phpConstants ODBC_TYPE ODBC_BINMODE_PASSTHRU ODBC_BINMODE_RETURN ODBC_BINMODE_CONVERT SQL_ODBC_CURSORS SQL_CUR_USE_DRIVER SQL_CUR_USE_IF_NEEDED SQL_CUR_USE_ODBC SQL_CONCURRENCY SQL_CONCUR_READ_ONLY SQL_CONCUR_LOCK SQL_CONCUR_ROWVER SQL_CONCUR_VALUES SQL_CURSOR_TYPE SQL_CURSOR_FORWARD_ONLY SQL_CURSOR_KEYSET_DRIVEN SQL_CURSOR_DYNAMIC SQL_CURSOR_STATIC SQL_KEYSET_SIZE SQL_FETCH_FIRST SQL_FETCH_NEXT SQL_CHAR SQL_VARCHAR SQL_LONGVARCHAR SQL_DECIMAL SQL_NUMERIC SQL_BIT SQL_TINYINT SQL_SMALLINT SQL_INTEGER SQL_BIGINT SQL_REAL SQL_FLOAT SQL_DOUBLE SQL_BINARY SQL_VARBINARY SQL_LONGVARBINARY SQL_DATE SQL_TIME SQL_TIMESTAMP contained
line 173: 
line 174: " openssl
line 175: syn keyword phpConstants OPENSSL_VERSION_TEXT OPENSSL_VERSION_NUMBER X509_PURPOSE_SSL_CLIENT X509_PURPOSE_SSL_SERVER X509_PURPOSE_NS_SSL_SERVER X509_PURPOSE_SMIME_SIGN X509_PURPOSE_SMIME_ENCRYPT X509_PURPOSE_CRL_SIGN X509_PURPOSE_ANY OPENSSL_ALGO_SHA1 OPENSSL_ALGO_MD5 OPENSSL_ALGO_MD4 OPENSSL_ALGO_MD2 OPENSSL_ALGO_DSS1 PKCS7_DETACHED PKCS7_TEXT PKCS7_NOINTERN PKCS7_NOVERIFY PKCS7_NOCHAIN PKCS7_NOCERTS PKCS7_NOATTR PKCS7_BINARY PKCS7_NOSIGS OPENSSL_PKCS1_PADDING OPENSSL_SSLV23_PADDING OPENSSL_NO_PADDING OPENSSL_PKCS1_OAEP_PADDING OPENSSL_CIPHER_RC2_40 OPENSSL_CIPHER_RC2_128 OPENSSL_CIPHER_RC2_64 OPENSSL_CIPHER_DES OPENSSL_CIPHER_3DES OPENSSL_KEYTYPE_RSA OPENSSL_KEYTYPE_DSA OPENSSL_KEYTYPE_DH OPENSSL_KEYTYPE_EC contained
line 176: 
line 177: " pcre
line 178: syn keyword phpConstants PREG_PATTERN_ORDER PREG_SET_ORDER PREG_OFFSET_CAPTURE PREG_SPLIT_NO_EMPTY PREG_SPLIT_DELIM_CAPTURE PREG_SPLIT_OFFSET_CAPTURE PREG_GREP_INVERT PREG_NO_ERROR PREG_INTERNAL_ERROR PREG_BACKTRACK_LIMIT_ERROR PREG_RECURSION_LIMIT_ERROR PREG_BAD_UTF8_ERROR PREG_BAD_UTF8_OFFSET_ERROR PCRE_VERSION contained
line 179: 
line 180: " PDO
line 181: syn keyword phpConstants PARAM_BOOL PARAM_NULL PARAM_INT PARAM_STR PARAM_LOB PARAM_STMT PARAM_INPUT_OUTPUT PARAM_EVT_ALLOC PARAM_EVT_FREE PARAM_EVT_EXEC_PRE PARAM_EVT_EXEC_POST PARAM_EVT_FETCH_PRE PARAM_EVT_FETCH_POST PARAM_EVT_NORMALIZE FETCH_LAZY FETCH_ASSOC FETCH_NUM FETCH_BOTH FETCH_OBJ FETCH_BOUND FETCH_COLUMN FETCH_CLASS FETCH_INTO FETCH_FUNC FETCH_GROUP FETCH_UNIQUE FETCH_KEY_PAIR FETCH_CLASSTYPE FETCH_SERIALIZE FETCH_PROPS_LATE FETCH_NAMED ATTR_AUTOCOMMIT ATTR_PREFETCH ATTR_TIMEOUT ATTR_ERRMODE ATTR_SERVER_VERSION ATTR_CLIENT_VERSION ATTR_SERVER_INFO ATTR_CONNECTION_STATUS ATTR_CASE ATTR_CURSOR_NAME ATTR_CURSOR ATTR_ORACLE_NULLS ATTR_PERSISTENT ATTR_STATEMENT_CLASS ATTR_FETCH_TABLE_NAMES ATTR_FETCH_CATALOG_NAMES ATTR_DRIVER_NAME ATTR_STRINGIFY_FETCHES ATTR_MAX_COLUMN_LEN ATTR_EMULATE_PREPARES ATTR_DEFAULT_FETCH_MODE ERRMODE_SILENT ERRMODE_WARNING ERRMODE_EXCEPTION CASE_NATURAL CASE_LOWER CASE_UPPER NULL_NATURAL NULL_EMPTY_STRING NULL_TO_STRING ERR_NONE FETCH_ORI_NEXT FETCH_ORI_PRIOR FETCH_OR
line 182: 
line 183: " pgsql
line 184: syn keyword phpConstants PGSQL_CONNECT_FORCE_NEW PGSQL_ASSOC PGSQL_NUM PGSQL_BOTH PGSQL_CONNECTION_BAD PGSQL_CONNECTION_OK PGSQL_TRANSACTION_IDLE PGSQL_TRANSACTION_ACTIVE PGSQL_TRANSACTION_INTRANS PGSQL_TRANSACTION_INERROR PGSQL_TRANSACTION_UNKNOWN PGSQL_ERRORS_TERSE PGSQL_ERRORS_DEFAULT PGSQL_ERRORS_VERBOSE PGSQL_SEEK_SET PGSQL_SEEK_CUR PGSQL_SEEK_END PGSQL_STATUS_LONG PGSQL_STATUS_STRING PGSQL_EMPTY_QUERY PGSQL_COMMAND_OK PGSQL_TUPLES_OK PGSQL_COPY_OUT PGSQL_COPY_IN PGSQL_BAD_RESPONSE PGSQL_NONFATAL_ERROR PGSQL_FATAL_ERROR PGSQL_DIAG_SEVERITY PGSQL_DIAG_SQLSTATE PGSQL_DIAG_MESSAGE_PRIMARY PGSQL_DIAG_MESSAGE_DETAIL PGSQL_DIAG_MESSAGE_HINT PGSQL_DIAG_STATEMENT_POSITION PGSQL_DIAG_INTERNAL_POSITION PGSQL_DIAG_INTERNAL_QUERY PGSQL_DIAG_CONTEXT PGSQL_DIAG_SOURCE_FILE PGSQL_DIAG_SOURCE_LINE PGSQL_DIAG_SOURCE_FUNCTION PGSQL_CONV_IGNORE_DEFAULT PGSQL_CONV_FORCE_NULL PGSQL_CONV_IGNORE_NOT_NULL PGSQL_DML_NO_CONV PGSQL_DML_EXEC PGSQL_DML_ASYNC PGSQL_DML_STRING contained
line 185: 
line 186: " Phar
line 187: syn keyword phpConstants CURRENT_MODE_MASK CURRENT_AS_PATHNAME CURRENT_AS_FILEINFO CURRENT_AS_SELF KEY_MODE_MASK KEY_AS_PATHNAME KEY_AS_FILENAME NEW_CURRENT_AND_KEY SKIP_DOTS UNIX_PATHS BZ2 GZ NONE PHAR TAR ZIP COMPRESSED PHP PHPS MD5 OPENSSL SHA1 SHA256 SHA512 contained
line 188: 
line 189: " Reflection
line 190: syn keyword phpConstants IS_DEPRECATED IS_STATIC IS_PUBLIC IS_PROTECTED IS_PRIVATE IS_ABSTRACT IS_FINAL IS_IMPLICIT_ABSTRACT IS_EXPLICIT_ABSTRACT contained
line 191: 
line 192: " soap
line 193: syn keyword phpConstants SOAP_1_1 SOAP_1_2 SOAP_PERSISTENCE_SESSION SOAP_PERSISTENCE_REQUEST SOAP_FUNCTIONS_ALL SOAP_ENCODED SOAP_LITERAL SOAP_RPC SOAP_DOCUMENT SOAP_ACTOR_NEXT SOAP_ACTOR_NONE SOAP_ACTOR_UNLIMATERECEIVER SOAP_COMPRESSION_ACCEPT SOAP_COMPRESSION_GZIP SOAP_COMPRESSION_DEFLATE SOAP_AUTHENTICATION_BASIC SOAP_AUTHENTICATION_DIGEST UNKNOWN_TYPE XSD_STRING XSD_BOOLEAN XSD_DECIMAL XSD_FLOAT XSD_DOUBLE XSD_DURATION XSD_DATETIME XSD_TIME XSD_DATE XSD_GYEARMONTH XSD_GYEAR XSD_GMONTHDAY XSD_GDAY XSD_GMONTH XSD_HEXBINARY XSD_BASE64BINARY XSD_ANYURI XSD_QNAME XSD_NOTATION XSD_NORMALIZEDSTRING XSD_TOKEN XSD_LANGUAGE XSD_NMTOKEN XSD_NAME XSD_NCNAME XSD_ID XSD_IDREF XSD_IDREFS XSD_ENTITY XSD_ENTITIES XSD_INTEGER XSD_NONPOSITIVEINTEGER XSD_NEGATIVEINTEGER XSD_LONG XSD_INT XSD_SHORT XSD_BYTE XSD_NONNEGATIVEINTEGER XSD_UNSIGNEDLONG XSD_UNSIGNEDINT XSD_UNSIGNEDSHORT XSD_UNSIGNEDBYTE XSD_POSITIVEINTEGER XSD_NMTOKENS XSD_ANYTYPE XSD_ANYXML APACHE_MAP SOAP_ENC_OBJECT SOAP_ENC_ARRAY XSD_1999_TIMEINSTANT XSD
line 194: 
line 195: " sockets
line 196: syn keyword phpConstants AF_UNIX AF_INET AF_INET6 SOCK_STREAM SOCK_DGRAM SOCK_RAW SOCK_SEQPACKET SOCK_RDM MSG_OOB MSG_WAITALL MSG_PEEK MSG_DONTROUTE SO_DEBUG SO_REUSEADDR SO_KEEPALIVE SO_DONTROUTE SO_LINGER SO_BROADCAST SO_OOBINLINE SO_SNDBUF SO_RCVBUF SO_SNDLOWAT SO_RCVLOWAT SO_SNDTIMEO SO_RCVTIMEO SO_TYPE SO_ERROR SOL_SOCKET SOMAXCONN TCP_NODELAY PHP_NORMAL_READ PHP_BINARY_READ SOCKET_EINTR SOCKET_EBADF SOCKET_EACCES SOCKET_EFAULT SOCKET_EINVAL SOCKET_EMFILE SOCKET_EWOULDBLOCK SOCKET_EINPROGRESS SOCKET_EALREADY SOCKET_ENOTSOCK SOCKET_EDESTADDRREQ SOCKET_EMSGSIZE SOCKET_EPROTOTYPE SOCKET_ENOPROTOOPT SOCKET_EPROTONOSUPPORT SOCKET_ESOCKTNOSUPPORT SOCKET_EOPNOTSUPP SOCKET_EPFNOSUPPORT SOCKET_EAFNOSUPPORT SOCKET_EADDRINUSE SOCKET_EADDRNOTAVAIL SOCKET_ENETDOWN SOCKET_ENETUNREACH SOCKET_ENETRESET SOCKET_ECONNABORTED SOCKET_ECONNRESET SOCKET_ENOBUFS SOCKET_EISCONN SOCKET_ENOTCONN SOCKET_ESHUTDOWN SOCKET_ETOOMANYREFS SOCKET_ETIMEDOUT SOCKET_ECONNREFUSED SOCKET_ELOOP SOCKET_ENAMETOOLONG SOCKET_EHOSTDOWN SOC
line 197: 
line 198: " SPL
line 199: syn keyword phpConstants LEAVES_ONLY SELF_FIRST CHILD_FIRST CATCH_GET_CHILD CALL_TOSTRING TOSTRING_USE_KEY TOSTRING_USE_CURRENT TOSTRING_USE_INNER FULL_CACHE USE_KEY MATCH GET_MATCH ALL_MATCHES SPLIT REPLACE BYPASS_CURRENT BYPASS_KEY PREFIX_LEFT PREFIX_MID_HAS_NEXT PREFIX_MID_LAST PREFIX_END_HAS_NEXT PREFIX_END_LAST PREFIX_RIGHT STD_PROP_LIST ARRAY_AS_PROPS CHILD_ARRAYS_ONLY CURRENT_MODE_MASK CURRENT_AS_PATHNAME CURRENT_AS_FILEINFO CURRENT_AS_SELF KEY_MODE_MASK KEY_AS_PATHNAME KEY_AS_FILENAME NEW_CURRENT_AND_KEY SKIP_DOTS UNIX_PATHS DROP_NEW_LINE READ_AHEAD SKIP_EMPTY READ_CSV IT_MODE_LIFO IT_MODE_FIFO IT_MODE_DELETE IT_MODE_KEEP EXTR_BOTH EXTR_PRIORITY EXTR_DATA MIT_NEED_ANY MIT_NEED_ALL MIT_KEYS_NUMERIC MIT_KEYS_ASSOC contained
line 200: 
line 201: " standard
line 202: syn keyword phpConstants CONNECTION_ABORTED CONNECTION_NORMAL CONNECTION_TIMEOUT INI_USER INI_PERDIR INI_SYSTEM INI_ALL INI_SCANNER_NORMAL INI_SCANNER_RAW PHP_URL_SCHEME PHP_URL_HOST PHP_URL_PORT PHP_URL_USER PHP_URL_PASS PHP_URL_PATH PHP_URL_QUERY PHP_URL_FRAGMENT M_E M_LOG2E M_LOG10E M_LN2 M_LN10 M_PI M_PI_2 M_PI_4 M_1_PI M_2_PI M_SQRTPI M_2_SQRTPI M_LNPI M_EULER M_SQRT2 M_SQRT1_2 M_SQRT3 INF NAN PHP_ROUND_HALF_UP PHP_ROUND_HALF_DOWN PHP_ROUND_HALF_EVEN PHP_ROUND_HALF_ODD INFO_GENERAL INFO_CREDITS INFO_CONFIGURATION INFO_MODULES INFO_ENVIRONMENT INFO_VARIABLES INFO_LICENSE INFO_ALL CREDITS_GROUP CREDITS_GENERAL CREDITS_SAPI CREDITS_MODULES CREDITS_DOCS CREDITS_FULLPAGE CREDITS_QA CREDITS_ALL HTML_SPECIALCHARS HTML_ENTITIES ENT_COMPAT ENT_QUOTES ENT_NOQUOTES ENT_IGNORE STR_PAD_LEFT STR_PAD_RIGHT STR_PAD_BOTH PATHINFO_DIRNAME PATHINFO_BASENAME PATHINFO_EXTENSION PATHINFO_FILENAME CHAR_MAX LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_ALL SEEK_SET SEEK_CUR SEEK_END LOCK_SH LOCK_EX LOCK_UN LOC
line 203: 
line 204: " sqlite
line 205: syn keyword phpConstants SQLITE_BOTH SQLITE_NUM SQLITE_ASSOC SQLITE_OK SQLITE_ERROR SQLITE_INTERNAL SQLITE_PERM SQLITE_ABORT SQLITE_BUSY SQLITE_LOCKED SQLITE_NOMEM SQLITE_READONLY SQLITE_INTERRUPT SQLITE_IOERR SQLITE_CORRUPT SQLITE_NOTFOUND SQLITE_FULL SQLITE_CANTOPEN SQLITE_PROTOCOL SQLITE_EMPTY SQLITE_SCHEMA SQLITE_TOOBIG SQLITE_CONSTRAINT SQLITE_MISMATCH SQLITE_MISUSE SQLITE_NOLFS SQLITE_AUTH SQLITE_NOTADB SQLITE_FORMAT SQLITE_ROW SQLITE_DONE contained
line 206: 
line 207: " sqlite3
line 208: syn keyword phpConstants SQLITE3_ASSOC SQLITE3_NUM SQLITE3_BOTH SQLITE3_INTEGER SQLITE3_FLOAT SQLITE3_TEXT SQLITE3_BLOB SQLITE3_NULL SQLITE3_OPEN_READONLY SQLITE3_OPEN_READWRITE SQLITE3_OPEN_CREATE contained
line 209: 
line 210: " tidy
line 211: syn keyword phpConstants TIDY_TAG_UNKNOWN TIDY_TAG_A TIDY_TAG_ABBR TIDY_TAG_ACRONYM TIDY_TAG_ADDRESS TIDY_TAG_ALIGN TIDY_TAG_APPLET TIDY_TAG_AREA TIDY_TAG_B TIDY_TAG_BASE TIDY_TAG_BASEFONT TIDY_TAG_BDO TIDY_TAG_BGSOUND TIDY_TAG_BIG TIDY_TAG_BLINK TIDY_TAG_BLOCKQUOTE TIDY_TAG_BODY TIDY_TAG_BR TIDY_TAG_BUTTON TIDY_TAG_CAPTION TIDY_TAG_CENTER TIDY_TAG_CITE TIDY_TAG_CODE TIDY_TAG_COL TIDY_TAG_COLGROUP TIDY_TAG_COMMENT TIDY_TAG_DD TIDY_TAG_DEL TIDY_TAG_DFN TIDY_TAG_DIR TIDY_TAG_DIV TIDY_TAG_DL TIDY_TAG_DT TIDY_TAG_EM TIDY_TAG_EMBED TIDY_TAG_FIELDSET TIDY_TAG_FONT TIDY_TAG_FORM TIDY_TAG_FRAME TIDY_TAG_FRAMESET TIDY_TAG_H1 TIDY_TAG_H2 TIDY_TAG_H3 TIDY_TAG_H4 TIDY_TAG_H5 TIDY_TAG_H6 TIDY_TAG_HEAD TIDY_TAG_HR TIDY_TAG_HTML TIDY_TAG_I TIDY_TAG_IFRAME TIDY_TAG_ILAYER TIDY_TAG_IMG TIDY_TAG_INPUT TIDY_TAG_INS TIDY_TAG_ISINDEX TIDY_TAG_KBD TIDY_TAG_KEYGEN TIDY_TAG_LABEL TIDY_TAG_LAYER TIDY_TAG_LEGEND TIDY_TAG_LI TIDY_TAG_LINK TIDY_TAG_LISTING TIDY_TAG_MAP TIDY_TAG_MARQUEE TIDY_TAG_MENU TIDY_TAG_META TIDY_TAG_MULT
line 212: 
line 213: " tokenizer
line 214: syn keyword phpConstants T_REQUIRE_ONCE T_REQUIRE T_EVAL T_INCLUDE_ONCE T_INCLUDE T_LOGICAL_OR T_LOGICAL_XOR T_LOGICAL_AND T_PRINT T_SR_EQUAL T_SL_EQUAL T_XOR_EQUAL T_OR_EQUAL T_AND_EQUAL T_MOD_EQUAL T_CONCAT_EQUAL T_DIV_EQUAL T_MUL_EQUAL T_MINUS_EQUAL T_PLUS_EQUAL T_BOOLEAN_OR T_BOOLEAN_AND T_IS_NOT_IDENTICAL T_IS_IDENTICAL T_IS_NOT_EQUAL T_IS_EQUAL T_IS_GREATER_OR_EQUAL T_IS_SMALLER_OR_EQUAL T_SR T_SL T_INSTANCEOF T_UNSET_CAST T_BOOL_CAST T_OBJECT_CAST T_ARRAY_CAST T_STRING_CAST T_DOUBLE_CAST T_INT_CAST T_DEC T_INC T_CLONE T_NEW T_EXIT T_IF T_ELSEIF T_ELSE T_ENDIF T_LNUMBER T_DNUMBER T_STRING T_STRING_VARNAME T_VARIABLE T_NUM_STRING T_INLINE_HTML T_CHARACTER T_BAD_CHARACTER T_ENCAPSED_AND_WHITESPACE T_CONSTANT_ENCAPSED_STRING T_ECHO T_DO T_WHILE T_ENDWHILE T_FOR T_ENDFOR T_FOREACH T_ENDFOREACH T_DECLARE T_ENDDECLARE T_AS T_SWITCH T_ENDSWITCH T_CASE T_DEFAULT T_BREAK T_CONTINUE T_GOTO T_FUNCTION T_CONST T_RETURN T_TRY T_CATCH T_THROW T_USE T_GLOBAL T_PUBLIC T_PROTECTED T_PRIVATE T_FINAL T_ABSTRACT 
line 215: 
line 216: " xml
line 217: syn keyword phpConstants XML_ERROR_NONE XML_ERROR_NO_MEMORY XML_ERROR_SYNTAX XML_ERROR_NO_ELEMENTS XML_ERROR_INVALID_TOKEN XML_ERROR_UNCLOSED_TOKEN XML_ERROR_PARTIAL_CHAR XML_ERROR_TAG_MISMATCH XML_ERROR_DUPLICATE_ATTRIBUTE XML_ERROR_JUNK_AFTER_DOC_ELEMENT XML_ERROR_PARAM_ENTITY_REF XML_ERROR_UNDEFINED_ENTITY XML_ERROR_RECURSIVE_ENTITY_REF XML_ERROR_ASYNC_ENTITY XML_ERROR_BAD_CHAR_REF XML_ERROR_BINARY_ENTITY_REF XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF XML_ERROR_MISPLACED_XML_PI XML_ERROR_UNKNOWN_ENCODING XML_ERROR_INCORRECT_ENCODING XML_ERROR_UNCLOSED_CDATA_SECTION XML_ERROR_EXTERNAL_ENTITY_HANDLING XML_OPTION_CASE_FOLDING XML_OPTION_TARGET_ENCODING XML_OPTION_SKIP_TAGSTART XML_OPTION_SKIP_WHITE XML_SAX_IMPL contained
line 218: 
line 219: " xmlreader
line 220: syn keyword phpConstants NONE ELEMENT ATTRIBUTE TEXT CDATA ENTITY_REF ENTITY PI COMMENT DOC DOC_TYPE DOC_FRAGMENT NOTATION WHITESPACE SIGNIFICANT_WHITESPACE END_ELEMENT END_ENTITY XML_DECLARATION LOADDTD DEFAULTATTRS VALIDATE SUBST_ENTITIES contained
line 221: 
line 222: " xsl
line 223: syn keyword phpConstants XSL_CLONE_AUTO XSL_CLONE_NEVER XSL_CLONE_ALWAYS LIBXSLT_VERSION LIBXSLT_DOTTED_VERSION LIBEXSLT_VERSION LIBEXSLT_DOTTED_VERSION contained
line 224: 
line 225: " zip
line 226: syn keyword phpConstants CREATE EXCL CHECKCONS OVERWRITE FL_NOCASE FL_NODIR FL_COMPRESSED FL_UNCHANGED CM_DEFAULT CM_STORE CM_SHRINK CM_REDUCE_1 CM_REDUCE_2 CM_REDUCE_3 CM_REDUCE_4 CM_IMPLODE CM_DEFLATE CM_DEFLATE64 CM_PKWARE_IMPLODE ER_OK ER_MULTIDISK ER_RENAME ER_CLOSE ER_SEEK ER_READ ER_WRITE ER_CRC ER_ZIPCLOSED ER_NOENT ER_EXISTS ER_OPEN ER_TMPOPEN ER_ZLIB ER_MEMORY ER_CHANGED ER_COMPNOTSUPP ER_EOF ER_INVAL ER_NOZIP ER_INTERNAL ER_INCONS ER_REMOVE ER_DELETED contained
line 227: 
line 228: " zlib
line 229: syn keyword phpConstants FORCE_GZIP FORCE_DEFLATE contained
line 230: 
line 231: syn case ignore
line 232: 
line 233: " Core
line 234: syn keyword phpFunctions zend_version func_num_args func_get_arg func_get_args strlen strcmp strncmp strcasecmp strncasecmp each error_reporting define defined get_class get_called_class get_parent_class method_exists property_exists class_exists interface_exists function_exists class_alias get_included_files get_required_files is_subclass_of is_a get_class_vars get_object_vars get_class_methods trigger_error user_error set_error_handler restore_error_handler set_exception_handler restore_exception_handler get_declared_classes get_declared_interfaces get_defined_functions get_defined_vars create_function get_resource_type get_loaded_extensions extension_loaded get_extension_funcs get_defined_constants debug_backtrace debug_print_backtrace gc_collect_cycles gc_enabled gc_enable gc_disable contained
line 235: syn keyword phpClasses Traversable IteratorAggregate Iterator ArrayAccess Serializable Exception ErrorException Closure contained
line 236: 
line 237: " bcmath
line 238: syn keyword phpFunctions bcadd bcsub bcmul bcdiv bcmod bcpow bcsqrt bcscale bccomp bcpowmod contained
line 239: 
line 240: " bz2
line 241: syn keyword phpFunctions bzopen bzread bzwrite bzflush bzclose bzerrno bzerrstr bzerror bzcompress bzdecompress contained
line 242: 
line 243: " calendar
line 244: syn keyword phpFunctions jdtogregorian gregoriantojd jdtojulian juliantojd jdtojewish jewishtojd jdtofrench frenchtojd jddayofweek jdmonthname easter_date easter_days unixtojd jdtounix cal_to_jd cal_from_jd cal_days_in_month cal_info contained
line 245: 
line 246: " com_dotnet
line 247: syn keyword phpFunctions variant_set variant_add variant_cat variant_sub variant_mul variant_and variant_div variant_eqv variant_idiv variant_imp variant_mod variant_or variant_pow variant_xor variant_abs variant_fix variant_int variant_neg variant_not variant_round variant_cmp variant_date_to_timestamp variant_date_from_timestamp variant_get_type variant_set_type variant_cast com_create_guid com_event_sink com_print_typeinfo com_message_pump com_load_typelib com_get_active_object contained
line 248: syn keyword phpClasses COMPersistHelper com_exception com_safearray_proxy variant com dotnet contained
line 249: 
line 250: " ctype
line 251: syn keyword phpFunctions ctype_alnum ctype_alpha ctype_cntrl ctype_digit ctype_lower ctype_graph ctype_print ctype_punct ctype_space ctype_upper ctype_xdigit contained
line 252: 
line 253: " curl
line 254: syn keyword phpFunctions curl_init curl_copy_handle curl_version curl_setopt curl_setopt_array curl_exec curl_getinfo curl_error curl_errno curl_close curl_multi_init curl_multi_add_handle curl_multi_remove_handle curl_multi_select curl_multi_exec curl_multi_getcontent curl_multi_info_read curl_multi_close contained
line 255: 
line 256: " date
line 257: syn keyword phpFunctions strtotime date idate gmdate mktime gmmktime checkdate strftime gmstrftime time localtime getdate date_create date_create_from_format date_parse date_parse_from_format date_get_last_errors date_format date_modify date_add date_sub date_timezone_get date_timezone_set date_offset_get date_diff date_time_set date_date_set date_isodate_set date_timestamp_set date_timestamp_get timezone_open timezone_name_get timezone_name_from_abbr timezone_offset_get timezone_transitions_get timezone_location_get timezone_identifiers_list timezone_abbreviations_list timezone_version_get date_interval_create_from_date_string date_interval_format date_default_timezone_set date_default_timezone_get date_sunrise date_sunset date_sun_info contained
line 258: syn keyword phpClasses DateTime DateTimeZone DateInterval DatePeriod contained
line 259: 
line 260: " dba
line 261: syn keyword phpFunctions dba_close dba_delete dba_exists dba_fetch dba_firstkey dba_handlers dba_insert dba_key_split dba_list dba_nextkey dba_open dba_optimize dba_popen dba_replace dba_sync contained
line 262: 
line 263: " dom
line 264: syn keyword phpFunctions dom_import_simplexml contained
line 265: syn keyword phpClasses DOMException DOMStringList DOMNameList DOMImplementationList DOMImplementationSource DOMImplementation DOMNode DOMNameSpaceNode DOMDocumentFragment DOMDocument DOMNodeList DOMNamedNodeMap DOMCharacterData DOMAttr DOMElement DOMText DOMComment DOMTypeinfo DOMUserDataHandler DOMDomError DOMErrorHandler DOMLocator DOMConfiguration DOMCdataSection DOMDocumentType DOMNotation DOMEntity DOMEntityReference DOMProcessingInstruction DOMStringExtend DOMXPath contained
line 266: 
line 267: " enchant
line 268: syn keyword phpFunctions enchant_broker_describe enchant_broker_dict_exists enchant_broker_free_dictenchant_broker_free enchant_broker_get_error enchant_broker_init enchant_broker_list_dicts enchant_broker_request_dict enchant_broker_request_pwl_dict enchant_broker_set_ordering enchant_dict_add_to_personal enchant_dict_add_to_session enchant_dict_check enchant_dict_describe enchant_dict_get_error enchant_dict_is_in_session enchant_dict_quick_check enchant_dict_store_replacement enchant_dict_suggest contained
line 269: 
line 270: " ereg
line 271: syn keyword phpFunctions ereg ereg_replace eregi eregi_replace split spliti sql_regcase contained
line 272: 
line 273: " exif
line 274: syn keyword phpFunctions exif_imagetype exif_read_data exif_tagname exif_thumbnail read_exif_data contained
line 275: 
line 276: " fileinfo
line 277: syn keyword phpFunctions finfo_open finfo_close finfo_set_flags finfo_file finfo_buffer mime_content_type contained
line 278: syn keyword phpClasses finfo contained
line 279: 
line 280: " filter
line 281: syn keyword phpFunctions filter_input filter_var filter_input_array filter_var_array filter_list filter_has_var filter_id contained
line 282: 
line 283: " ftp
line 284: syn keyword phpFunctions ftp_connect ftp_login ftp_pwd ftp_cdup ftp_chdir ftp_exec ftp_raw ftp_mkdir ftp_rmdir ftp_chmod ftp_alloc ftp_nlist ftp_rawlist ftp_systype ftp_pasv ftp_get ftp_fget ftp_put ftp_fput ftp_size ftp_mdtm ftp_rename ftp_delete ftp_site ftp_close ftp_set_option ftp_get_option ftp_nb_fget ftp_nb_get ftp_nb_continue ftp_nb_put ftp_nb_fput ftp_quit contained
line 285: 
line 286: " gd
line 287: syn keyword phpFunctions gd_info imagearc imageellipse imagechar imagecharup imagecolorat imagecolorallocate imagepalettecopy imagecreatefromstring imagecolorclosest imagecolorclosesthwb imagecolordeallocate imagecolorresolve imagecolorexact imagecolorset imagecolortransparent imagecolorstotal imagecolorsforindex imagecopy imagecopymerge imagecopymergegray imagecopyresized imagecreate imagecreatetruecolor imageistruecolor imagetruecolortopalette imagesetthickness imagefilledarc imagefilledellipse imagealphablending imagesavealpha imagecolorallocatealpha imagecolorresolvealpha imagecolorclosestalpha imagecolorexactalpha imagecopyresampled imagerotate imageantialias imagesettile imagesetbrush imagesetstyle imagecreatefrompng imagecreatefromgif imagecreatefromwbmp imagecreatefromxbm imagecreatefromgd imagecreatefromgd2 imagecreatefromgd2part imagepng imagegif imagewbmp imagegd imagegd2 imagedestroy imagegammacorrect imagefill imagefilledpolygon imagefilledrectangle imagefilltoborder imagefontwidth imag
line 288: 
line 289: " gettext
line 290: syn keyword phpFunctions textdomain gettext dgettext dcgettext bindtextdomain ngettext dngettext dcngettext bind_textdomain_codeset contained
line 291: 
line 292: " gmp
line 293: syn keyword phpFunctions gmp_init gmp_intval gmp_strval gmp_add gmp_sub gmp_mul gmp_div_qr gmp_div_q gmp_div_r gmp_div gmp_mod gmp_divexact gmp_neg gmp_abs gmp_fact gmp_sqrt gmp_sqrtrem gmp_pow gmp_powm gmp_perfect_square gmp_prob_prime gmp_gcd gmp_gcdext gmp_invert gmp_jacobi gmp_legendre gmp_cmp gmp_sign gmp_random gmp_and gmp_or gmp_com gmp_xor gmp_setbit gmp_clrbit gmp_scan0 gmp_scan1 gmp_testbit gmp_popcount gmp_hamdist gmp_nextprime contained
line 294: 
line 295: " hash
line 296: syn keyword phpFunctions hash hash_file hash_hmac hash_hmac_file hash_init hash_update hash_update_stream hash_update_file hash_final hash_copy hash_algos mhash_keygen_s2k mhash_get_block_size mhash_get_hash_name mhash_count mhash contained
line 297: 
line 298: " iconv
line 299: syn keyword phpFunctions iconv ob_iconv_handler iconv_get_encoding iconv_set_encoding iconv_strlen iconv_substr iconv_strpos iconv_strrpos iconv_mime_encode iconv_mime_decode iconv_mime_decode_headers contained
line 300: 
line 301: " imap
line 302: syn keyword phpFunctions  imap_open imap_reopen imap_close imap_num_msg imap_num_recent imap_headers imap_headerinfo imap_rfc822_parse_headers imap_rfc822_write_address imap_rfc822_parse_adrlist imap_body imap_bodystruct imap_fetchbody imap_savebody imap_fetchheader imap_fetchstructure imap_gc imap_expunge imap_delete imap_undelete imap_check imap_mail_copy imap_mail_move imap_mail_compose imap_createmailbox imap_renamemailbox imap_deletemailbox imap_subscribe imap_unsubscribe imap_append imap_ping imap_base64 imap_qprint imap_8bit imap_binary imap_utf8 imap_status imap_mailboxmsginfo imap_setflag_full imap_clearflag_full imap_sort imap_uid imap_msgno imap_list imap_lsub imap_fetch_overview imap_alerts imap_errors imap_last_error imap_search imap_utf7_decode imap_utf7_encode imap_utf8_to_mutf7 imap_mutf7_to_utf8 imap_mime_header_decode imap_thread imap_timeout imap_get_quota imap_get_quotaroot imap_set_quota imap_setacl imap_getacl imap_mail imap_header imap_listmailbox imap_getmailboxes imap_scanma
line 303: 
line 304: " intl
line 305: syn keyword phpFunctions collator_create collator_compare collator_get_attribute collator_set_attribute collator_get_strength collator_set_strength collator_sort collator_sort_with_sort_keys collator_asort collator_get_locale collator_get_error_code collator_get_error_message numfmt_create numfmt_format numfmt_parse numfmt_format_currency numfmt_parse_currency numfmt_set_attribute numfmt_get_attribute numfmt_set_text_attribute numfmt_get_text_attribute numfmt_set_symbol numfmt_get_symbol numfmt_set_pattern numfmt_get_pattern numfmt_get_locale numfmt_get_error_code numfmt_get_error_message normalizer_normalize normalizer_is_normalized locale_get_default locale_set_default locale_get_primary_language locale_get_script locale_get_region locale_get_keywords locale_get_display_script locale_get_display_region locale_get_display_name locale_get_display_language locale_get_display_variant locale_compose locale_parse locale_get_all_variants locale_filter_matches locale_canonicalize locale_lookup locale_acce
line 306: syn keyword phpClasses Collator NumberFormatter Normalizer Locale MessageFormatter IntlDateFormatter contained
line 307: 
line 308: " json
line 309: syn keyword phpFunctions json_encode json_decode json_last_error contained
line 310: 
line 311: " ldap
line 312: syn keyword phpFunctions ldap_connect ldap_close ldap_bind ldap_unbind ldap_read ldap_list ldap_search ldap_free_result ldap_count_entries ldap_first_entry ldap_next_entry ldap_get_entries ldap_first_attribute ldap_next_attribute ldap_get_attributes ldap_get_values ldap_get_values_len ldap_get_dn ldap_explode_dn ldap_dn2ufn ldap_add ldap_delete ldap_modify ldap_mod_add ldap_mod_replace ldap_mod_del ldap_errno ldap_err2str ldap_error ldap_compare ldap_sort ldap_rename ldap_get_option ldap_set_option ldap_first_reference ldap_next_reference ldap_parse_reference ldap_parse_result ldap_start_tls contained
line 313: 
line 314: " libxml
line 315: syn keyword phpFunctions libxml_set_streams_context libxml_use_internal_errors libxml_get_last_error libxml_clear_errors libxml_get_errors libxml_disable_entity_loader contained
line 316: syn keyword phpClasses LibXMLError contained
line 317: 
line 318: " mbstring
line 319: syn keyword phpFunctions mb_convert_case mb_strtoupper mb_strtolower mb_language mb_internal_encoding mb_http_input mb_http_output mb_detect_order mb_substitute_character mb_parse_str mb_output_handler mb_preferred_mime_name mb_strlen mb_strpos mb_strrpos mb_stripos mb_strripos mb_strstr mb_strrchr mb_stristr mb_strrichr mb_substr_count mb_substr mb_strcut mb_strwidth mb_strimwidth mb_convert_encoding mb_detect_encoding mb_list_encodings mb_encoding_aliases mb_convert_kana mb_encode_mimeheader mb_decode_mimeheader mb_convert_variables mb_encode_numericentity mb_decode_numericentity mb_send_mail mb_get_info mb_check_encoding mb_regex_encoding mb_regex_set_options mb_ereg mb_eregi mb_ereg_replace mb_eregi_replace mb_split mb_ereg_match mb_ereg_search mb_ereg_search_pos mb_ereg_search_regs mb_ereg_search_init mb_ereg_search_getregs mb_ereg_search_getpos mb_ereg_search_setpos mbregex_encoding mbereg mberegi mbereg_replace mberegi_replace mbsplit mbereg_match mbereg_search mbereg_search_pos mbereg_search
line 320: 
line 321: " mcrypt
line 322: syn keyword phpFunctions mcrypt_ecb mcrypt_cbc mcrypt_cfb mcrypt_ofb mcrypt_get_key_size mcrypt_get_block_size mcrypt_get_cipher_name mcrypt_create_iv mcrypt_list_algorithms mcrypt_list_modes mcrypt_get_iv_size mcrypt_encrypt mcrypt_decrypt mcrypt_module_open mcrypt_generic_init mcrypt_generic mdecrypt_generic mcrypt_generic_end mcrypt_generic_deinit mcrypt_enc_self_test mcrypt_enc_is_block_algorithm_mode mcrypt_enc_is_block_algorithm mcrypt_enc_is_block_mode mcrypt_enc_get_block_size mcrypt_enc_get_key_size mcrypt_enc_get_supported_key_sizes mcrypt_enc_get_iv_size mcrypt_enc_get_algorithms_name mcrypt_enc_get_modes_name mcrypt_module_self_test mcrypt_module_is_block_algorithm_mode mcrypt_module_is_block_algorithm mcrypt_module_is_block_mode mcrypt_module_get_algo_block_size mcrypt_module_get_algo_key_size mcrypt_module_get_supported_key_sizes mcrypt_module_close contained
line 323: 
line 324: " mysql
line 325: syn keyword phpFunctions mysql_connect mysql_pconnect mysql_close mysql_select_db mysql_query mysql_unbuffered_query mysql_db_query mysql_list_dbs mysql_list_tables mysql_list_fields mysql_list_processes mysql_error mysql_errno mysql_affected_rows mysql_insert_id mysql_result mysql_num_rows mysql_num_fields mysql_fetch_row mysql_fetch_array mysql_fetch_assoc mysql_fetch_object mysql_data_seek mysql_fetch_lengths mysql_fetch_field mysql_field_seek mysql_free_result mysql_field_name mysql_field_table mysql_field_len mysql_field_type mysql_field_flags mysql_escape_string mysql_real_escape_string mysql_stat mysql_thread_id mysql_client_encoding mysql_ping mysql_get_client_info mysql_get_host_info mysql_get_proto_info mysql_get_server_info mysql_info mysql_set_charset mysql mysql_fieldname mysql_fieldtable mysql_fieldlen mysql_fieldtype mysql_fieldflags mysql_selectdb mysql_freeresult mysql_numfields mysql_numrows mysql_listdbs mysql_listtables mysql_listfields mysql_db_name mysql_dbname mysql_tablename 
line 326: 
line 327: " mysqli
line 328: syn keyword phpFunctions mysqli_affected_rows mysqli_autocommit mysqli_change_user mysqli_character_set_name mysqli_close mysqli_commit mysqli_connect mysqli_connect_errno mysqli_connect_error mysqli_data_seek mysqli_dump_debug_info mysqli_debug mysqli_errno mysqli_error mysqli_stmt_execute mysqli_execute mysqli_fetch_field mysqli_fetch_fields mysqli_fetch_field_direct mysqli_fetch_lengths mysqli_fetch_all mysqli_fetch_array mysqli_fetch_assoc mysqli_fetch_object mysqli_fetch_row mysqli_field_count mysqli_field_seek mysqli_field_tell mysqli_free_result mysqli_get_cache_stats mysqli_get_connection_stats mysqli_get_client_stats mysqli_get_charset mysqli_get_client_info mysqli_get_client_version mysqli_get_host_info mysqli_get_proto_info mysqli_get_server_info mysqli_get_server_version mysqli_get_warnings mysqli_init mysqli_info mysqli_insert_id mysqli_kill mysqli_more_results mysqli_multi_query mysqli_next_result mysqli_num_fields mysqli_num_rows mysqli_options mysqli_ping mysqli_poll mysqli_prepare m
line 329: syn keyword phpClasses mysqli_sql_exception mysqli_driver mysqli mysqli_warning mysqli_result mysqli_stmt contained
line 330: 
line 331: " odbc
line 332: syn keyword phpFunctions odbc_autocommit odbc_binmode odbc_close odbc_close_all odbc_columns odbc_commit odbc_connect odbc_cursor odbc_data_source odbc_execute odbc_error odbc_errormsg odbc_exec odbc_fetch_array odbc_fetch_object odbc_fetch_row odbc_fetch_into odbc_field_len odbc_field_scale odbc_field_name odbc_field_type odbc_field_num odbc_free_result odbc_gettypeinfo odbc_longreadlen odbc_next_result odbc_num_fields odbc_num_rows odbc_pconnect odbc_prepare odbc_result odbc_result_all odbc_rollback odbc_setoption odbc_specialcolumns odbc_statistics odbc_tables odbc_primarykeys odbc_columnprivileges odbc_tableprivileges odbc_foreignkeys odbc_procedures odbc_procedurecolumns odbc_do odbc_field_precision contained
line 333: 
line 334: " openssl
line 335: syn keyword phpFunctions openssl_pkey_free openssl_pkey_new openssl_pkey_export openssl_pkey_export_to_file openssl_pkey_get_private openssl_pkey_get_public openssl_pkey_get_details openssl_free_key openssl_get_privatekey openssl_get_publickey openssl_x509_read openssl_x509_free openssl_x509_parse openssl_x509_checkpurpose openssl_x509_check_private_key openssl_x509_export openssl_x509_export_to_file openssl_pkcs12_export openssl_pkcs12_export_to_file openssl_pkcs12_read openssl_csr_new openssl_csr_export openssl_csr_export_to_file openssl_csr_sign openssl_csr_get_subject openssl_csr_get_public_key openssl_digest openssl_encrypt openssl_decrypt openssl_sign openssl_verify openssl_seal openssl_open openssl_pkcs7_verify openssl_pkcs7_decrypt openssl_pkcs7_sign openssl_pkcs7_encrypt openssl_private_encrypt openssl_private_decrypt openssl_public_encrypt openssl_public_decrypt openssl_get_md_methods openssl_get_cipher_methods openssl_dh_compute_key openssl_random_pseudo_bytes openssl_error_string contain
line 336: 
line 337: " pcre
line 338: syn keyword phpFunctions preg_match preg_match_all preg_replace preg_replace_callback preg_filter preg_split preg_quote preg_grep preg_last_error contained
line 339: 
line 340: " PDO
line 341: syn keyword phpFunctions pdo_drivers contained
line 342: syn keyword phpClasses PDOException PDO PDOStatement PDORow contained
line 343: 
line 344: " pgsql
line 345: syn keyword phpFunctions pg_connect pg_pconnect pg_close pg_connection_status pg_connection_busy pg_connection_reset pg_host pg_dbname pg_port pg_tty pg_options pg_version pg_ping pg_parameter_status pg_transaction_status pg_query pg_query_params pg_prepare pg_execute pg_send_query pg_send_query_params pg_send_prepare pg_send_execute pg_cancel_query pg_fetch_result pg_fetch_row pg_fetch_assoc pg_fetch_array pg_fetch_object pg_fetch_all pg_fetch_all_columns pg_affected_rows pg_get_result pg_result_seek pg_result_status pg_free_result pg_last_oid pg_num_rows pg_num_fields pg_field_name pg_field_num pg_field_size pg_field_type pg_field_type_oid pg_field_prtlen pg_field_is_null pg_field_table pg_get_notify pg_get_pid pg_result_error pg_result_error_field pg_last_error pg_last_notice pg_put_line pg_end_copy pg_copy_to pg_copy_from pg_trace pg_untrace pg_lo_create pg_lo_unlink pg_lo_open pg_lo_close pg_lo_read pg_lo_write pg_lo_read_all pg_lo_import pg_lo_export pg_lo_seek pg_lo_tell pg_escape_string pg_e
line 346: 
line 347: " Phar
line 348: syn keyword phpClasses PharException Phar PharData PharFileInfo contained
line 349: 
line 350: " readline
line 351: syn keyword phpFunctions readline readline_add_history readline_callback_handler_install readline_callback_handler_remove readline_callback_read_char readline_clear_history readline_completion_function readline_info readline_list_history readline_on_new_line readline_read_history readline_redisplay readline_write_history contained
line 352: 
line 353: " recode
line 354: syn keyword phpFunctions recode recode_file recode_string contained
line 355: 
line 356: " Reflection
line 357: syn keyword phpClasses ReflectionException Reflection Reflector ReflectionFunctionAbstract ReflectionFunction ReflectionParameter ReflectionMethod ReflectionClass ReflectionObject ReflectionProperty ReflectionExtension contained
line 358: 
line 359: " session
line 360: syn keyword phpFunctions session_name session_module_name session_save_path session_id session_regenerate_id session_decode session_register session_unregister session_is_registered session_encode session_start session_destroy session_unset session_set_save_handler session_cache_limiter session_cache_expire session_set_cookie_params session_get_cookie_params session_write_close session_commit contained
line 361: 
line 362: " shmop
line 363: syn keyword phpFunctions shmop_open shmop_read shmop_close shmop_size shmop_write shmop_delete contained
line 364: 
line 365: " SimpleXML
line 366: syn keyword phpFunctions simplexml_load_file simplexml_load_string simplexml_import_dom contained
line 367: syn keyword phpClasses SimpleXMLElement SimpleXMLIterator contained
line 368: 
line 369: " soap
line 370: syn keyword phpFunctions use_soap_error_handler is_soap_fault contained
line 371: syn keyword phpClasses SoapClient SoapVar SoapServer SoapFault SoapParam SoapHeader contained
line 372: 
line 373: " sockets
line 374: syn keyword phpFunctions socket_select socket_create socket_create_listen socket_create_pair socket_accept socket_set_nonblock socket_set_block socket_listen socket_close socket_write socket_read socket_getsockname socket_getpeername socket_connect socket_strerror socket_bind socket_recv socket_send socket_recvfrom socket_sendto socket_get_option socket_set_option socket_shutdown socket_last_error socket_clear_error socket_getopt socket_setopt contained
line 375: 
line 376: " SPL
line 377: syn keyword phpFunctions spl_classes spl_autoload spl_autoload_extensions spl_autoload_register spl_autoload_unregister spl_autoload_functions spl_autoload_call class_parents class_implements spl_object_hash iterator_to_array iterator_count iterator_apply contained
line 378: syn keyword phpClasses LogicException BadFunctionCallException BadMethodCallException DomainException InvalidArgumentException LengthException OutOfRangeException RuntimeException OutOfBoundsException OverflowException RangeException UnderflowException UnexpectedValueException RecursiveIterator RecursiveIteratorIterator OuterIterator IteratorIterator FilterIterator RecursiveFilterIterator ParentIterator Countable SeekableIterator LimitIterator CachingIterator RecursiveCachingIterator NoRewindIterator AppendIterator InfiniteIterator RegexIterator RecursiveRegexIterator EmptyIterator RecursiveTreeIterator ArrayObject ArrayIterator RecursiveArrayIterator SplFileInfo DirectoryIterator FilesystemIterator RecursiveDirectoryIterator GlobIterator SplFileObject SplTempFileObject SplDoublyLinkedList SplQueue SplStack SplHeap SplMinHeap SplMaxHeap SplPriorityQueue SplFixedArray SplObserver SplSubject SplObjectStorage MultipleIterator contained
line 379: 
line 380: " standard
line 381: syn keyword phpFunctions constant bin2hex sleep usleep time_nanosleep time_sleep_until flush wordwrap htmlspecialchars htmlentities html_entity_decode htmlspecialchars_decode get_html_translation_table sha1 sha1_file md5 md5_file crc32 iptcparse iptcembed getimagesize image_type_to_mime_type image_type_to_extension phpinfo phpversion phpcredits php_logo_guid php_real_logo_guid php_egg_logo_guid zend_logo_guid php_sapi_name php_uname php_ini_scanned_files php_ini_loaded_file strnatcmp strnatcasecmp substr_count strspn strcspn strtok strtoupper strtolower strpos stripos strrpos strripos strrev hebrev hebrevc nl2br basename dirname pathinfo stripslashes stripcslashes strstr stristr strrchr str_shuffle str_word_count str_split strpbrk substr_compare strcoll substr substr_replace quotemeta ucfirst lcfirst ucwords strtr addslashes addcslashes rtrim str_replace str_ireplace str_repeat count_chars chunk_split trim ltrim strip_tags similar_text explode implode join setlocale localeconv soundex levenshtein ch
line 382: syn keyword phpClasses __PHP_Incomplete_Class php_user_filter Directory contained
line 383: 
line 384: " SQLite
line 385: syn keyword phpFunctions sqlite_open sqlite_popen sqlite_close sqlite_query sqlite_exec sqlite_array_query sqlite_single_query sqlite_fetch_array sqlite_fetch_object sqlite_fetch_single sqlite_fetch_string sqlite_fetch_all sqlite_current sqlite_column sqlite_libversion sqlite_libencoding sqlite_changes sqlite_last_insert_rowid sqlite_num_rows sqlite_num_fields sqlite_field_name sqlite_seek sqlite_rewind sqlite_next sqlite_prev sqlite_valid sqlite_has_more sqlite_has_prev sqlite_escape_string sqlite_busy_timeout sqlite_last_error sqlite_error_string sqlite_unbuffered_query sqlite_create_aggregate sqlite_create_function sqlite_factory sqlite_udf_encode_binary sqlite_udf_decode_binary sqlite_fetch_column_types contained
line 386: syn keyword phpClasses SQLiteDatabase SQLiteResult SQLiteUnbuffered SQLiteException contained
line 387: 
line 388: " sqlite3
line 389: syn keyword phpClasses SQLite3 SQLite3Stmt SQLite3Result contained
line 390: 
line 391: " tidy
line 392: syn keyword phpFunctions tidy_getopt tidy_parse_string tidy_parse_file tidy_get_output tidy_get_error_buffer tidy_clean_repair tidy_repair_string tidy_repair_file tidy_diagnose tidy_get_release tidy_get_config tidy_get_status tidy_get_html_ver tidy_is_xhtml tidy_is_xml tidy_error_count tidy_warning_count tidy_access_count tidy_config_count tidy_get_root tidy_get_head tidy_get_html tidy_get_body ob_tidyhandler contained
line 393: syn keyword phpClasses tidy tidyNode contained
line 394: 
line 395: " tokenizer
line 396: syn keyword phpFunctions token_get_all token_name contained
line 397: 
line 398: " xml
line 399: syn keyword phpFunctions  xml_parser_create xml_parser_create_ns xml_set_object xml_set_element_handler xml_set_character_data_handler xml_set_processing_instruction_handler xml_set_default_handler xml_set_unparsed_entity_decl_handler xml_set_notation_decl_handler xml_set_external_entity_ref_handler xml_set_start_namespace_decl_handler xml_set_end_namespace_decl_handler xml_parse xml_parse_into_struct xml_get_error_code xml_error_string xml_get_current_line_number xml_get_current_column_number xml_get_current_byte_index xml_parser_free xml_parser_set_option xml_parser_get_option utf8_encode utf8_decode contained
line 400: 
line 401: " xmlreader
line 402: syn keyword phpClasses XMLReader contained
line 403: 
line 404: " xmlwriter
line 405: syn keyword phpFunctions  xmlwriter_open_uri xmlwriter_open_memory xmlwriter_set_indent xmlwriter_set_indent_string xmlwriter_start_comment xmlwriter_end_comment xmlwriter_start_attribute xmlwriter_end_attribute xmlwriter_write_attribute xmlwriter_start_attribute_ns xmlwriter_write_attribute_ns xmlwriter_start_element xmlwriter_end_element xmlwriter_full_end_element xmlwriter_start_element_ns xmlwriter_write_element xmlwriter_write_element_ns xmlwriter_start_pi xmlwriter_end_pi xmlwriter_write_pi xmlwriter_start_cdata xmlwriter_end_cdata xmlwriter_write_cdata xmlwriter_text xmlwriter_write_raw xmlwriter_start_document xmlwriter_end_document xmlwriter_write_comment xmlwriter_start_dtd xmlwriter_end_dtd xmlwriter_write_dtd xmlwriter_start_dtd_element xmlwriter_end_dtd_element xmlwriter_write_dtd_element xmlwriter_start_dtd_attlist xmlwriter_end_dtd_attlist xmlwriter_write_dtd_attlist xmlwriter_start_dtd_entity xmlwriter_end_dtd_entity xmlwriter_write_dtd_entity xmlwriter_output_memory xmlwriter_flush 
line 406: syn keyword phpClasses XMLWriter contained
line 407: 
line 408: " xmlrpc
line 409: syn keyword phpFunctions xmlrpc_encode xmlrpc_decode xmlrpc_decode_request xmlrpc_encode_request xmlrpc_get_type xmlrpc_set_type xmlrpc_is_fault xmlrpc_server_create xmlrpc_server_destroy xmlrpc_server_register_method xmlrpc_server_call_method xmlrpc_parse_method_descriptions xmlrpc_server_add_introspection_data xmlrpc_server_register_introspection_callback contained
line 410: 
line 411: " xsl
line 412: syn keyword phpClasses XSLTProcessor contained
line 413: 
line 414: " zip
line 415: syn keyword phpFunctions zip_open zip_close zip_read zip_entry_open zip_entry_close zip_entry_read zip_entry_filesize zip_entry_name zip_entry_compressedsize zip_entry_compressionmethod contained
line 416: syn keyword phpClasses ZipArchive contained
line 417: 
line 418: " zlib
line 419: syn keyword phpFunctions readgzfile gzrewind gzclose gzeof gzgetc gzgets gzgetss gzread gzopen gzpassthru gzseek gztell gzwrite gzputs gzfile gzcompress gzuncompress gzdeflate gzinflate gzencode ob_gzhandler zlib_get_coding_type contained
line 420: 
line 421: " === END BUILTIN FUNCTIONS, CLASSES, AND CONSTANTS =====================================
line 422: 
line 423: " The following is needed afterall it seems.
line 424: syntax keyword phpClasses containedin=ALLBUT,phpComment,phpStringDouble,phpStringSingle,phpIdentifier,phpMethodsVar
line 425: 
line 426: " Control Structures
line 427: syn keyword phpStatement if else elseif while do for foreach break switch case default continue return goto as endif endwhile endfor endforeach endswitch declare endeclare contained
line 428: 
line 429: " Class Keywords
line 430: syn keyword phpType class abstract extends interface implements static final var public private protected const contained
line 431: 
line 432: " Magic Methods
line 433: syn keyword phpStatement __construct __destruct __call __callStatic __get __set __isset __unset __sleep __wakeup __toString __invoke __set_state __clone contained
line 434: 
line 435: " Exception Keywords
line 436: syn keyword phpStatement try catch throw contained
line 437: 
line 438: " Language Constructs
line 439: syn keyword phpStatement die exit eval empty isset unset list instanceof contained
line 440: 
line 441: " These special keywords have traditionally received special colors
line 442: syn keyword phpSpecial function echo print new clone contained
line 443: 
line 444: " Include & friends
line 445: syn keyword phpInclude include include_once require require_once namespace use contained
line 446: 
line 447: " Types
line 448: syn keyword phpType bool[ean] int[eger] real double float string array object null self parent global this stdClass contained
line 449: 
line 450: " Operator
line 451: syn match phpOperator       "[-=+%^&|*!.~?:]" contained display
line 452: syn match phpOperator       "[-+*/%^&|.]="  contained display
line 453: syn match phpOperator       "/[^*/]"me=e-1  contained display
line 454: syn match phpOperator       "\$"  contained display
line 455: syn match phpOperator       "&&\|\<and\>" contained display
line 456: syn match phpOperator       "||\|\<x\=or\>" contained display
line 457: syn match phpOperator       "[!=<>]=" contained display
line 458: syn match phpOperator       "[<>]"  contained display
line 459: syn match phpMemberSelector "->"  contained display
line 460: syn match phpVarSelector    "\$"  contained display
line 461: " highlight object variables inside strings
line 462: syn match phpMethodsVar     "->\h\w*" contained contains=phpMethods,phpMemberSelector display containedin=phpStringDouble
line 463: 
line 464: " Identifier
line 465: syn match  phpIdentifier         "$\h\w*"  contained contains=phpEnvVar,phpIntVar,phpVarSelector display
line 466: syn match  phpIdentifierSimply   "${\h\w*}"  contains=phpOperator,phpParent  contained display
line 467: syn region phpIdentifierComplex  matchgroup=phpParent start="{\$"rs=e-1 end="}"  contains=phpIdentifier,phpMemberSelector,phpVarSelector,phpIdentifierArray contained extend
line 468: syn region phpIdentifierArray    matchgroup=phpParent start="\[" end="]" contains=@phpClInside contained
line 469: 
line 470: " Boolean
line 471: syn keyword phpBoolean true false  contained
line 472: 
line 473: " Number
line 474: syn match phpNumber "-\=\<\d\+\>" contained display
line 475: syn match phpNumber "\<0x\x\{1,8}\>"  contained display
line 476: 
line 477: " Float
line 478: syn match phpNumber "\(-\=\<\d+\|-\=\)\.\d\+\>" contained display
line 479: 
line 480: " SpecialChar
line 481: syn match phpSpecialChar "\\[fnrtv\\]" contained display
line 482: syn match phpSpecialChar "\\\d\{3}"  contained contains=phpOctalError display
line 483: syn match phpSpecialChar "\\x\x\{2}" contained display
line 484: " corrected highlighting for an escaped '\$' inside a double-quoted string
line 485: syn match phpSpecialChar "\\\$"  contained display
line 486: syn match phpSpecialChar +\\"+   contained display
line 487: syn match phpStrEsc      "\\\\"  contained display
line 488: syn match phpStrEsc      "\\'"   contained display
line 489: 
line 490: " Error
line 491: syn match phpOctalError "[89]"  contained display
line 492: if exists("php_parent_error_close")
line 493:   syn match phpParentError "[)\]}]"  contained display
line 494: endif
line 495: 
line 496: " Todo
line 497: syn keyword phpTodo todo fixme xxx note contained
line 498: 
line 499: " Comment
line 500: if exists("php_parent_error_open")
line 501:   syn region phpComment start="/\*" end="\*/" contained contains=phpTodo
line 502: else
line 503:   syn region phpComment start="/\*" end="\*/" contained contains=phpTodo extend
line 504: endif
line 505: if version >= 600
line 506:   syn match phpComment  "#.\{-}\(?>\|$\)\@="  contained contains=phpTodo
line 507:   syn match phpComment  "//.\{-}\(?>\|$\)\@=" contained contains=phpTodo
line 508: else
line 509:   syn match phpComment  "#.\{-}$" contained contains=phpTodo
line 510:   syn match phpComment  "#.\{-}?>"me=e-2  contained contains=phpTodo
line 511:   syn match phpComment  "//.\{-}$"  contained contains=phpTodo
line 512:   syn match phpComment  "//.\{-}?>"me=e-2 contained contains=phpTodo
line 513: endif
line 514: 
line 515: " String
line 516: if exists("php_parent_error_open")
line 517:   syn region phpStringDouble matchgroup=None start=+"+ skip=+\\\\\|\\"+ end=+"+  contains=@phpAddStrings,phpIdentifier,phpSpecialChar,phpIdentifierSimply,phpIdentifierComplex,phpStrEsc contained keepend
line 518:   syn region phpBacktick matchgroup=None start=+`+ skip=+\\\\\|\\"+ end=+`+  contains=@phpAddStrings,phpIdentifier,phpSpecialChar,phpIdentifierSimply,phpIdentifierComplex,phpStrEsc contained keepend
line 519:   syn region phpStringSingle matchgroup=None start=+'+ skip=+\\\\\|\\'+ end=+'+  contains=@phpAddStrings,phpStrEsc contained keepend
line 520: else
line 521:   syn region phpStringDouble matchgroup=None start=+"+ skip=+\\\\\|\\"+ end=+"+  contains=@phpAddStrings,phpIdentifier,phpSpecialChar,phpIdentifierSimply,phpIdentifierComplex,phpStrEsc contained extend keepend
line 522:   syn region phpBacktick matchgroup=None start=+`+ skip=+\\\\\|\\"+ end=+`+  contains=@phpAddStrings,phpIdentifier,phpSpecialChar,phpIdentifierSimply,phpIdentifierComplex,phpStrEsc contained extend keepend
line 523:   syn region phpStringSingle matchgroup=None start=+'+ skip=+\\\\\|\\'+ end=+'+  contains=@phpAddStrings,phpStrEsc contained keepend extend
line 524: endif
line 525: 
line 526: " HereDoc
line 527:   syn case match
line 528:   syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\z(\I\i*\)$" end="^\z1\(;\=$\)\@=" contained contains=phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
line 529:   syn region phpHereDoc matchgroup=Delimiter start=+\(<<<\)\@<="\z(\I\i*\)"$+ end="^\z1\(;\=$\)\@=" contained contains=phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
line 530: " including HTML,JavaScript,SQL even if not enabled via options
line 531:   syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\z(\(\I\i*\)\=\(html\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@="  contained contains=@htmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
line 532:   syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\z(\(\I\i*\)\=\(sql\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@=" contained contains=@sqlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
line 533:   syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\z(\(\I\i*\)\=\(javascript\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@="  contained contains=@htmlJavascript,phpIdentifierSimply,phpIdentifier,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
line 534:   syn case ignore
line 535: 
line 536: " NowDoc
line 537:   syn region phpNowDoc matchgroup=Delimiter start=+\(<<<\)\@<='\z(\I\i*\)'$+ end="^\z1\(;\=$\)\@=" contained keepend extend
line 538: 
line 539: " Parent
line 540: if exists("php_parent_error_close") || exists("php_parent_error_open")
line 541:   syn match  phpParent "[{}]"  contained
line 542:   syn region phpParent matchgroup=Delimiter start="(" end=")"  contained contains=@phpClInside transparent
line 543:   syn region phpParent matchgroup=Delimiter start="\[" end="\]"  contained contains=@phpClInside transparent
line 544:   if !exists("php_parent_error_close")
line 545:     syn match phpParent "[\])]" contained
line 546:   endif
line 547: else
line 548:   syn match phpParent "[({[\]})]" contained
line 549: endif
line 550: 
line 551: " Clusters
line 552: syn cluster phpClConst contains=phpFunctions,phpClasses,phpIdentifier,phpStatement,phpOperator,phpStringSingle,phpStringDouble,phpBacktick,phpNumber,phpType,phpBoolean,phpStructure,phpMethodsVar,phpConstants,phpException,phpSuperglobals,phpMagicConstants,phpServerVars
line 553: syn cluster phpClInside contains=@phpClConst,phpComment,phpParent,phpParentError,phpInclude,phpHereDoc,phpNowDoc
line 554: syn cluster phpClFunction contains=@phpClInside,phpDefine,phpParentError,phpStorageClass,phpSpecial
line 555: syn cluster phpClTop contains=@phpClFunction,phpFoldFunction,phpFoldClass,phpFoldInterface,phpFoldTry,phpFoldCatch
line 556: 
line 557: " Php Region
line 558: if exists("php_parent_error_open")
line 559:   syn region phpRegion matchgroup=Delimiter start="<?\(php\)\=" end="?>" contains=@phpClTop
line 560: else
line 561:   syn region phpRegion matchgroup=Delimiter start="<?\(php\)\=" end="?>" contains=@phpClTop keepend
line 562: endif
line 563: 
line 564: " Fold
line 565: if exists("php_folding") && php_folding==1
line 566: " match one line constructs here and skip them at folding
line 567:   syn keyword phpSCKeyword  abstract final private protected public static  contained
line 568:   syn keyword phpFCKeyword  function  contained
line 569:   syn match phpDefine "\(\s\|^\)\(abstract\s\+\|final\s\+\|private\s\+\|protected\s\+\|public\s\+\|static\s\+\)*function\(\s\+.*[;}]\)\@="  contained contains=phpSCKeyword
line 570:   syn match phpStructure "\(\s\|^\)\(abstract\s\+\|final\s\+\)*class\(\s\+.*}\)\@="  contained
line 571:   syn match phpStructure "\(\s\|^\)interface\(\s\+.*}\)\@="  contained
line 572:   syn match phpException "\(\s\|^\)try\(\s\+.*}\)\@="  contained
line 573:   syn match phpException "\(\s\|^\)catch\(\s\+.*}\)\@="  contained
line 574: 
line 575:   set foldmethod=syntax
line 576:   syn region phpFoldHtmlInside matchgroup=Delimiter start="?>" end="<?\(php\)\=" contained transparent contains=@htmlTop
line 577:   syn region phpFoldFunction matchgroup=Storageclass start="^\z(\s*\)\(abstract\s\+\|final\s\+\|private\s\+\|protected\s\+\|public\s\+\|static\s\+\)*function\s\([^};]*$\)\@="rs=e-9 matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldHtmlInside,phpFCKeyword contained transparent fold extend
line 578:   syn region phpFoldFunction matchgroup=Define start="^function\s\([^};]*$\)\@=" matchgroup=Delimiter end="^}" contains=@phpClFunction,phpFoldHtmlInside contained transparent fold extend
line 579:   syn region phpFoldClass matchgroup=Structure start="^\z(\s*\)\(abstract\s\+\|final\s\+\)*class\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldFunction,phpSCKeyword contained transparent fold extend
line 580:   syn region phpFoldInterface matchgroup=Structure start="^\z(\s*\)interface\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldFunction contained transparent fold extend
line 581:   syn region phpFoldCatch matchgroup=Exception start="^\z(\s*\)catch\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldFunction contained transparent fold extend
line 582:   syn region phpFoldTry matchgroup=Exception start="^\z(\s*\)try\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldFunction contained transparent fold extend
line 583: elseif exists("php_folding") && php_folding==2
line 584: "  syn keyword phpDefine function  contained
line 585: "  syn keyword phpStructure  abstract class interface  contained
line 586: "  syn keyword phpException  catch throw try contained
line 587: "  syn keyword phpStorageClass final global private protected public static  contained
line 588: 
line 589:   set foldmethod=syntax
line 590:   syn region phpFoldHtmlInside matchgroup=Delimiter start="?>" end="<?\(php\)\=" contained transparent contains=@htmlTop
line 591:   syn region phpParent matchgroup=Delimiter start="{" end="}"  contained contains=@phpClFunction,phpFoldHtmlInside transparent fold
line 592: else
line 593: "  syn keyword phpDefine function  contained
line 594: "  syn keyword phpStructure  abstract class interface  contained
line 595: "  syn keyword phpException  catch throw try contained
line 596: "  syn keyword phpStorageClass final global private protected public static  contained
line 597: endif
line 598: 
line 599: " Sync
line 600: if php_sync_method==-1
line 601:   syn sync match phpRegionSync grouphere phpRegion "^\s*<?\(php\)\=\s*$"
line 602:   syn sync match phpRegionSync grouphere NONE "^\s*?>\s*$"
line 603:   syn sync match phpRegionSync grouphere NONE "^\s*%>\s*$"
line 604:   syn sync match phpRegionSync grouphere phpRegion "function\s.*(.*\$"
line 605:   "syn sync match phpRegionSync grouphere NONE "/\i*>\s*$"
line 606: elseif php_sync_method>0
line 607:   exec "syn sync minlines=" . php_sync_method
line 608: else
line 609:   exec "syn sync fromstart"
line 610: endif
line 611: 
line 612: " Define the default highlighting.
line 613: " For version 5.8 and later: only when an item doesn't have highlighting yet
line 614: if !exists("did_php_syn_inits")
line 615: 
line 616:   hi def link phpComment          Comment
line 617:   hi def link phpSuperglobals     Constant
line 618:   hi def link phpMagicConstants   Constant
line 619:   hi def link phpServerVars       Constant
line 620:   hi def link phpConstants        Constant
line 621:   hi def link phpBoolean          Constant
line 622:   hi def link phpNumber           Constant
line 623:   hi def link phpStringSingle     String
line 624:   hi def link phpStringDouble     String
line 625:   hi def link phpBacktick         String
line 626:   hi def link phpHereDoc          String
line 627:   hi def link phpNowDoc           String
line 628:   hi def link phpFunctions        Identifier
line 629:   hi def link phpClasses          Identifier
line 630:   hi def link phpMethods          Identifier
line 631:   hi def link phpIdentifier       Identifier
line 632:   hi def link phpIdentifierSimply Identifier
line 633:   hi def link phpStatement        Statement
line 634:   hi def link phpStructure        Statement
line 635:   hi def link phpException        Statement
line 636:   hi def link phpOperator         Operator
line 637:   hi def link phpVarSelector      Operator
line 638:   hi def link phpInclude          PreProc
line 639:   hi def link phpDefine           PreProc
line 640:   hi def link phpSpecial          PreProc
line 641:   hi def link phpFCKeyword        PreProc
line 642:   hi def link phpType             Type
line 643:   hi def link phpSCKeyword        Type
line 644:   hi def link phpMemberSelector   Type
line 645:   hi def link phpSpecialChar      Special
line 646:   hi def link phpStrEsc           Special
line 647:   hi def link phpParent           Special
line 648:   hi def link phpParentError      Error
line 649:   hi def link phpOctalError       Error
line 650:   hi def link phpTodo             Todo
line 651: 
line 652: endif
line 653: 
line 654: let b:current_syntax = "php"
line 655: 
line 656: if main_syntax == 'php'
line 657:   unlet main_syntax
line 658: endif
line 659: 
line 660: " vim: ts=8 sts=2 sw=2 expandtab
finished sourcing /home/kguest/.vim/syntax/php.vim
continuing in function <SNR>4_SynSet
Searching for "/home/kguest/.vim/syntax/php/*.vim"
Searching for "/var/lib/vim/addons/syntax/php.vim"
Searching for "/var/lib/vim/addons/syntax/php/*.vim"
Searching for "/usr/share/vim/vimfiles/syntax/php.vim"
Searching for "/usr/share/vim/vimfiles/syntax/php/*.vim"
Searching for "/usr/share/vim/vim74/syntax/php.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 24: sourcing "/usr/share/vim/vim74/syntax/php.vim"
line 1: " Vim syntax file
line 2: " Language: php PHP 3/4/5
line 3: " Maintainer: Jason Woofenden <jason@jasonwoof.com>
line 4: " Last Change: Dec 11, 2012
line 5: " URL: https://gitorious.org/jasonwoof/vim-syntax/blobs/master/php.vim
line 6: " Former Maintainers: Peter Hodge <toomuchphp-vim@yahoo.com>
line 7: "         Debian VIM Maintainers <pkg-vim-maintainers@lists.alioth.debian.org>
line 8: "
line 9: " Note: If you are using a colour terminal with dark background, you will probably find
line 10: "       the 'elflord' colorscheme is much better for PHP's syntax than the default
line 11: "       colourscheme, because elflord's colours will better highlight the break-points
line 12: "       (Statements) in your code.
line 13: "
line 14: " Options:  php_sql_query = 1  for SQL syntax highlighting inside strings
line 15: "           php_htmlInStrings = 1  for HTML syntax highlighting inside strings
line 16: "           php_baselib = 1  for highlighting baselib functions
line 17: "           php_asp_tags = 1  for highlighting ASP-style short tags
line 18: "           php_parent_error_close = 1  for highlighting parent error ] or )
line 19: "           php_parent_error_open = 1  for skipping an php end tag, if there exists an open ( or [ without a closing one
line 20: "           php_oldStyle = 1  for using old colorstyle
line 21: "           php_noShortTags = 1  don't sync <? ?> as php
line 22: "           php_folding = 1  for folding classes and functions
line 23: "           php_folding = 2  for folding all { } regions
line 24: "           php_sync_method = x
line 25: "                             x=-1 to sync by search ( default )
line 26: "                             x>0 to sync at least x lines backwards
line 27: "                             x=0 to sync from start
line 28: "
line 29: "       Added by Peter Hodge On June 9, 2006:
line 30: "           php_special_functions = 1|0 to highlight functions with abnormal behaviour
line 31: "           php_alt_comparisons = 1|0 to highlight comparison operators in an alternate colour
line 32: "           php_alt_assignByReference = 1|0 to highlight '= &' in an alternate colour
line 33: "
line 34: "           Note: these all default to 1 (On), so you would set them to '0' to turn them off.
line 35: "                 E.g., in your .vimrc or _vimrc file:
line 36: "                   let php_special_functions = 0
line 37: "                   let php_alt_comparisons = 0
line 38: "                   let php_alt_assignByReference = 0
line 39: "                 Unletting these variables will revert back to their default (On).
line 40: "
line 41: "
line 42: " Note:
line 43: " Setting php_folding=1 will match a closing } by comparing the indent
line 44: " before the class or function keyword with the indent of a matching }.
line 45: " Setting php_folding=2 will match all of pairs of {,} ( see known
line 46: " bugs ii )
line 47: 
line 48: " Known Bugs:
line 49: "  - setting  php_parent_error_close  on  and  php_parent_error_open  off
line 50: "    has these two leaks:
line 51: "     i) A closing ) or ] inside a string match to the last open ( or [
line 52: "        before the string, when the the closing ) or ] is on the same line
line 53: "        where the string started. In this case a following ) or ] after
line 54: "        the string would be highlighted as an error, what is incorrect.
line 55: "    ii) Same problem if you are setting php_folding = 2 with a closing
line 56: "        } inside an string on the first line of this string.
line 57: 
line 58: " For version 5.x: Clear all syntax items
line 59: " For version 6.x: Quit when a syntax file was already loaded
line 60: if version < 600
line 61:   syntax clear
line 62: elseif exists("b:current_syntax")
line 63:   finish
finished sourcing /usr/share/vim/vim74/syntax/php.vim
continuing in function <SNR>4_SynSet
Searching for "/usr/share/vim/vim74/syntax/php/*.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/php.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/php/*.vim"
Searching for "/var/lib/vim/addons/after/syntax/php.vim"
Searching for "/var/lib/vim/addons/after/syntax/php/*.vim"
Searching for "/home/kguest/.vim/after/syntax/php.vim"
Searching for "/home/kguest/.vim/after/syntax/php/*.vim"
line 25:     endfor
line 23:     for name in split(s, '\.')
line 24:       exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 25:     endfor
line 26:   endif
function <SNR>4_SynSet returning #0

continuing in Syntax Auto commands for "*"

Executing Syntax Auto commands for "php"
autocommand if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif

line 0: if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif
line 0:  runtime! syntax/doxygen.vim | endif
line 0:  endif
Executing BufRead Auto commands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif

line 0: if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
line 0:  runtime! scripts.vim | endif
line 0:  endif
Executing BufRead Auto commands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf conf | endif

line 0: if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf conf | endif
line 0:    setf conf | endif
line 0:  endif
Executing BufRead Auto commands for "*"
autocommand call SetStatusLine()

line 0: call SetStatusLine()
calling function SetStatusLine()

line 1:   set statusline=[%n]\ %f\ %(\ \ (%M%R%H)%)\ \ \ %=\t%{ShowTab()}\ \ \ Modified:\ %{Time()}\ \ [%3l:%3L,%2c]\ %p%%\ 
function SetStatusLine returning #0

continuing in BufRead Auto commands for "*"

Executing BufWinEnter Auto commands for "*"
autocommand match ExtraWhitespace /\s\+$/

line 0: match ExtraWhitespace /\s\+$/
Executing BufEnter Auto commands for "*"
autocommand let &titlestring = $USER . "@" . hostname() . ":$vim %-0.65F"

line 0: let &titlestring = $USER . "@" . hostname() . ":$vim %-0.65F"
autocommand let &printheader = $USER . "@" . hostname() .  ": %-0.65F%=Page %N"

line 0: let &printheader = $USER . "@" . hostname() .  ": %-0.65F%=Page %N"
autocommand set title titlelen=79

line 0: set title titlelen=79
Executing BufEnter Auto commands for "*"
autocommand cal s:record(expand('<abuf>', 1))

line 0: cal s:record(expand('<abuf>', 1))
calling function <SNR>19_record('1')

line 1: ^Iif s:locked | retu | en
line 1:  retu | en
line 1:  en
line 2: ^Ilet bufnr = a:bufnr + 0
line 3: ^Iif bufnr <= 0 | retu | en
line 3:  retu | en
line 3:  en
line 4: ^Ilet bufname = bufname(bufnr)
line 5: ^Iif empty(bufname) | retu | en
line 5:  retu | en
line 5:  en
line 6: ^Ilet fn = fnamemodify(bufname, ':p')
line 7: ^Ilet fn = exists('+ssl') ? tr(fn, '/', '\') : fn
line 8: ^Ical filter(s:mrbs, 'v:val != bufnr')
line 9: ^Ical insert(s:mrbs, bufnr)
line 10: ^Iif ( !empty({s:in}) && fn !~# {s:in} ) || ( !empty({s:ex}) && fn =~# {s:ex} ) || !empty(&bt) || !filereadable(fn) | retu
line 10:  retu
line 12: ^Ien
line 13: ^Ical filter(s:mrufs, 'v:val !='.( {s:cseno} ? '#' : '?' ).' fn')
line 14: ^Ical insert(s:mrufs, fn)
function <SNR>19_record returning #0

continuing in BufEnter Auto commands for "*"

Executing BufEnter Auto commands for "*"
autocommand if (g:tskelMenuCache != '') | call <SID>BuildBufferMenu() | endif

line 0: if (g:tskelMenuCache != '') | call <SID>BuildBufferMenu() | endif
line 0:  call <SID>BuildBufferMenu() | endif
calling function <SNR>23_BuildBufferMenu()

line 1:     if &filetype != '' && g:tskelMenuCache != '' && g:tskelMenuPrefix != ''
line 2:         call <SID>PrepareBits()
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits()

line 1:     let filetype = a:0 >= 1 && a:1 != '' ? a:1 : &filetype
line 2:     if filetype == ''
line 3:         return
line 4:     endif
line 5:     let bg = <SID>GetBitGroup(filetype)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_GetBitGroup('php')

line 1:     let general_first = a:0 >= 1 ? a:1 : 0
line 2:     if exists('g:tskelBitGroup_'. a:filetype)
line 3:         let rv = g:tskelBitGroup_{a:filetype}
line 4:     else
line 5:         let rv = a:filetype
line 6:     endif
line 7:     if general_first
line 8:         return "general\n". rv
line 9:     else
line 10:         return rv ."\ngeneral"
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_GetBitGroup returning 'php^@html^@general'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits

line 6:     let reset = a:0 >= 2 ? a:2 : 0
line 7:     if reset || <SID>Collect(bg, "<SID>PrepareBits4Type(\"%s\", 0)") =~ '0'
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect('php
html
general', '<SID>PrepareBits4Type("%s", 0)')

line 1:     let onlyfirst = a:0 >= 1 ? a:1 : 0
line 2:     let sep       = a:0 >= 2 ? a:2 : "\n"
line 3:     let seplen = strlen(sep)
line 4:     let i  = 0
line 5:     let j  = 0
line 6:     let rv = ''
line 7:     let a  = a:array
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1('<SID>PrepareBits4Type("%s", 0)', 'php')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>PrepareBits4Type("php", 0)'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 20: let v = <SID>PrepareBits4Type("php", 0)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type('php', 0)

line 1:     let rv = exists('g:tskelBitFiles_'. a:type)
line 2:     if !rv || a:anyway
line 3:         let g:tskelBitFiles_{a:type} = <SID>GlobBits(g:tskelBitsDir . a:type .'/', 0)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_GlobBits('/home/kguest/.vim/skeletons/bits/php/', 0)

line 1:     let pt = "*"
line 2:     let fl = a:0 >= 1 ? a:1 : 1
line 3:     let rv = globpath(a:path, pt)
line 4:     " let rv = "\n". substitute(rv, '\\', '/', 'g') ."\n"
line 5:     let rv = substitute(rv, '\\', '/', 'g')
line 6:     if fl
line 7:         let rv = <SID>PurifyBits(rv)
line 8:     else
line 9:         let rp = substitute(a:path, '\\', '/', 'g')
line 10:         let rv = substitute("\n". rv, '\c\V\n\zs'. rp, '', 'g')
line 11:     endif
line 12:     return strpart(rv, 1)
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_GlobBits returning '@.@&param^@@.@&return^@case^@class^@...replace^@switch^@var^@var_export^@while'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 4:         let g:tskelBits_{a:type}     = <SID>PurifyBits(g:tskelBitFiles_{a:type})
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits('@.@&param
@.@&return
case
class
...replace
switch
var
var_export
while')

line 1:     let rv = substitute("\n". a:bits ."\n", '\n\zs[^[:cntrl:]]\{-}[/.]\([^/.[:cntrl:]]\{-}\)\ze\n', '\1', 'g')
line 2:     let rv = DecodeURL(rv)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits..DecodeURL('
@&param
@&return
case
class
de...place
switch
var
var_export
while
')

line 1:     let rv = ''
line 2:     let n  = 0
line 3:     let m  = strlen(a:url)
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 18:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits..DecodeURL returning '^@@&param^@@&return^@case^@class^@de...place^@switch^@var^@var_export^@while^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits

line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits returning '^@@&param^@@&return^@case^@class^@de...place^@switch^@var^@var_export^@while^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 5:         let g:tskelBitMinis_{a:type} = <SID>MiniBits(g:tskelBitsDir . a:type .'.txt')
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits('/home/kguest/.vim/skeletons/bits/php.txt')

line 1:     let c = <SID>ReadFile(a:filename)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits..<SNR>23_ReadFile('/home/kguest/.vim/skeletons/bits/php.txt')

line 1:     let t = @t
line 2:     try
line 3:         if filereadable(a:filename)
line 4:             call <SID>EditScratchBuffer('tmp')
line 5:             exec '0read '. a:filename
line 6:             norm! gg"tyG
line 7:             wincmd c
line 8:             return @t
line 9:         endif
line 10:     finally
line 11:         let @t = t
line 12:     endtry
line 13:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits..<SNR>23_ReadFile returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits

line 2:     if c =~ '\S'
line 3:         let c = substitute("\n". c, "\n\\+\\([^\t ]\\+\\)[\t ]\\+\\([^\n]\\+\\)",  '\=<SID>PrepareMiniBit(submatch(1), submatch(2))', 'g')
line 5:         return c
line 6:     endif
line 7:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 6:     endif
line 7:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type returning #0

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1('<SID>PrepareBits4Type("%s", 0)', 'html')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>PrepareBits4Type("html", 0)'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 20: let v = <SID>PrepareBits4Type("html", 0)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type('html', 0)

line 1:     let rv = exists('g:tskelBitFiles_'. a:type)
line 2:     if !rv || a:anyway
line 3:         let g:tskelBitFiles_{a:type} = <SID>GlobBits(g:tskelBitsDir . a:type .'/', 0)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_GlobBits('/home/kguest/.vim/skeletons/bits/html/', 0)

line 1:     let pt = "*"
line 2:     let fl = a:0 >= 1 ? a:1 : 1
line 3:     let rv = globpath(a:path, pt)
line 4:     " let rv = "\n". substitute(rv, '\\', '/', 'g') ."\n"
line 5:     let rv = substitute(rv, '\\', '/', 'g')
line 6:     if fl
line 7:         let rv = <SID>PurifyBits(rv)
line 8:     else
line 9:         let rp = substitute(a:path, '\\', '/', 'g')
line 10:         let rv = substitute("\n". rv, '\c\V\n\zs'. rp, '', 'g')
line 11:     endif
line 12:     return strpart(rv, 1)
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_GlobBits returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 4:         let g:tskelBits_{a:type}     = <SID>PurifyBits(g:tskelBitFiles_{a:type})
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits('')

line 1:     let rv = substitute("\n". a:bits ."\n", '\n\zs[^[:cntrl:]]\{-}[/.]\([^/.[:cntrl:]]\{-}\)\ze\n', '\1', 'g')
line 2:     let rv = DecodeURL(rv)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits..DecodeURL('

')

line 1:     let rv = ''
line 2:     let n  = 0
line 3:     let m  = strlen(a:url)
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 18:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits..DecodeURL returning '^@^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits

line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits returning '^@^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 5:         let g:tskelBitMinis_{a:type} = <SID>MiniBits(g:tskelBitsDir . a:type .'.txt')
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits('/home/kguest/.vim/skeletons/bits/html.txt')

line 1:     let c = <SID>ReadFile(a:filename)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits..<SNR>23_ReadFile('/home/kguest/.vim/skeletons/bits/html.txt')

line 1:     let t = @t
line 2:     try
line 3:         if filereadable(a:filename)
line 4:             call <SID>EditScratchBuffer('tmp')
line 5:             exec '0read '. a:filename
line 6:             norm! gg"tyG
line 7:             wincmd c
line 8:             return @t
line 9:         endif
line 10:     finally
line 11:         let @t = t
line 12:     endtry
line 13:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits..<SNR>23_ReadFile returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits

line 2:     if c =~ '\S'
line 3:         let c = substitute("\n". c, "\n\\+\\([^\t ]\\+\\)[\t ]\\+\\([^\n]\\+\\)",  '\=<SID>PrepareMiniBit(submatch(1), submatch(2))', 'g')
line 5:         return c
line 6:     endif
line 7:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 6:     endif
line 7:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type returning #0

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1('<SID>PrepareBits4Type("%s", 0)', 'general')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>PrepareBits4Type("general", 0)'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 20: let v = <SID>PrepareBits4Type("general", 0)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type('general', 0)

line 1:     let rv = exists('g:tskelBitFiles_'. a:type)
line 2:     if !rv || a:anyway
line 3:         let g:tskelBitFiles_{a:type} = <SID>GlobBits(g:tskelBitsDir . a:type .'/', 0)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_GlobBits('/home/kguest/.vim/skeletons/bits/general/', 0)

line 1:     let pt = "*"
line 2:     let fl = a:0 >= 1 ? a:1 : 1
line 3:     let rv = globpath(a:path, pt)
line 4:     " let rv = "\n". substitute(rv, '\\', '/', 'g') ."\n"
line 5:     let rv = substitute(rv, '\\', '/', 'g')
line 6:     if fl
line 7:         let rv = <SID>PurifyBits(rv)
line 8:     else
line 9:         let rp = substitute(a:path, '\\', '/', 'g')
line 10:         let rv = substitute("\n". rv, '\c\V\n\zs'. rp, '', 'g')
line 11:     endif
line 12:     return strpart(rv, 1)
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_GlobBits returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 4:         let g:tskelBits_{a:type}     = <SID>PurifyBits(g:tskelBitFiles_{a:type})
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits('')

line 1:     let rv = substitute("\n". a:bits ."\n", '\n\zs[^[:cntrl:]]\{-}[/.]\([^/.[:cntrl:]]\{-}\)\ze\n', '\1', 'g')
line 2:     let rv = DecodeURL(rv)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits..DecodeURL('

')

line 1:     let rv = ''
line 2:     let n  = 0
line 3:     let m  = strlen(a:url)
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 18:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits..DecodeURL returning '^@^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits

line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits returning '^@^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 5:         let g:tskelBitMinis_{a:type} = <SID>MiniBits(g:tskelBitsDir . a:type .'.txt')
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits('/home/kguest/.vim/skeletons/bits/general.txt')

line 1:     let c = <SID>ReadFile(a:filename)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits..<SNR>23_ReadFile('/home/kguest/.vim/skeletons/bits/general.txt')

line 1:     let t = @t
line 2:     try
line 3:         if filereadable(a:filename)
line 4:             call <SID>EditScratchBuffer('tmp')
line 5:             exec '0read '. a:filename
line 6:             norm! gg"tyG
line 7:             wincmd c
line 8:             return @t
line 9:         endif
line 10:     finally
line 11:         let @t = t
line 12:     endtry
line 13:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits..<SNR>23_ReadFile returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits

line 2:     if c =~ '\S'
line 3:         let c = substitute("\n". c, "\n\\+\\([^\t ]\\+\\)[\t ]\\+\\([^\n]\\+\\)",  '\=<SID>PrepareMiniBit(submatch(1), submatch(2))', 'g')
line 5:         return c
line 6:     endif
line 7:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 6:     endif
line 7:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type returning #0

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 29:     return strpart(rv, 1)
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect returning '0^@0^@0'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits

line 8:         call <SID>Collect(bg, "<SID>PrepareBits4Type(\"%s\", 1)")
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect('php
html
general', '<SID>PrepareBits4Type("%s", 1)')

line 1:     let onlyfirst = a:0 >= 1 ? a:1 : 0
line 2:     let sep       = a:0 >= 2 ? a:2 : "\n"
line 3:     let seplen = strlen(sep)
line 4:     let i  = 0
line 5:     let j  = 0
line 6:     let rv = ''
line 7:     let a  = a:array
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1('<SID>PrepareBits4Type("%s", 1)', 'php')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>PrepareBits4Type("php", 1)'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 20: let v = <SID>PrepareBits4Type("php", 1)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type('php', 1)

line 1:     let rv = exists('g:tskelBitFiles_'. a:type)
line 2:     if !rv || a:anyway
line 3:         let g:tskelBitFiles_{a:type} = <SID>GlobBits(g:tskelBitsDir . a:type .'/', 0)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_GlobBits('/home/kguest/.vim/skeletons/bits/php/', 0)

line 1:     let pt = "*"
line 2:     let fl = a:0 >= 1 ? a:1 : 1
line 3:     let rv = globpath(a:path, pt)
line 4:     " let rv = "\n". substitute(rv, '\\', '/', 'g') ."\n"
line 5:     let rv = substitute(rv, '\\', '/', 'g')
line 6:     if fl
line 7:         let rv = <SID>PurifyBits(rv)
line 8:     else
line 9:         let rp = substitute(a:path, '\\', '/', 'g')
line 10:         let rv = substitute("\n". rv, '\c\V\n\zs'. rp, '', 'g')
line 11:     endif
line 12:     return strpart(rv, 1)
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_GlobBits returning '@.@&param^@@.@&return^@case^@class^@...replace^@switch^@var^@var_export^@while'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 4:         let g:tskelBits_{a:type}     = <SID>PurifyBits(g:tskelBitFiles_{a:type})
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits('@.@&param
@.@&return
case
class
...replace
switch
var
var_export
while')

line 1:     let rv = substitute("\n". a:bits ."\n", '\n\zs[^[:cntrl:]]\{-}[/.]\([^/.[:cntrl:]]\{-}\)\ze\n', '\1', 'g')
line 2:     let rv = DecodeURL(rv)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits..DecodeURL('
@&param
@&return
case
class
de...place
switch
var
var_export
while
')

line 1:     let rv = ''
line 2:     let n  = 0
line 3:     let m  = strlen(a:url)
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 18:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits..DecodeURL returning '^@@&param^@@&return^@case^@class^@de...place^@switch^@var^@var_export^@while^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits

line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits returning '^@@&param^@@&return^@case^@class^@de...place^@switch^@var^@var_export^@while^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 5:         let g:tskelBitMinis_{a:type} = <SID>MiniBits(g:tskelBitsDir . a:type .'.txt')
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits('/home/kguest/.vim/skeletons/bits/php.txt')

line 1:     let c = <SID>ReadFile(a:filename)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits..<SNR>23_ReadFile('/home/kguest/.vim/skeletons/bits/php.txt')

line 1:     let t = @t
line 2:     try
line 3:         if filereadable(a:filename)
line 4:             call <SID>EditScratchBuffer('tmp')
line 5:             exec '0read '. a:filename
line 6:             norm! gg"tyG
line 7:             wincmd c
line 8:             return @t
line 9:         endif
line 10:     finally
line 11:         let @t = t
line 12:     endtry
line 13:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits..<SNR>23_ReadFile returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits

line 2:     if c =~ '\S'
line 3:         let c = substitute("\n". c, "\n\\+\\([^\t ]\\+\\)[\t ]\\+\\([^\n]\\+\\)",  '\=<SID>PrepareMiniBit(submatch(1), submatch(2))', 'g')
line 5:         return c
line 6:     endif
line 7:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 6:     endif
line 7:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type returning #1

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1('<SID>PrepareBits4Type("%s", 1)', 'html')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>PrepareBits4Type("html", 1)'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 20: let v = <SID>PrepareBits4Type("html", 1)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type('html', 1)

line 1:     let rv = exists('g:tskelBitFiles_'. a:type)
line 2:     if !rv || a:anyway
line 3:         let g:tskelBitFiles_{a:type} = <SID>GlobBits(g:tskelBitsDir . a:type .'/', 0)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_GlobBits('/home/kguest/.vim/skeletons/bits/html/', 0)

line 1:     let pt = "*"
line 2:     let fl = a:0 >= 1 ? a:1 : 1
line 3:     let rv = globpath(a:path, pt)
line 4:     " let rv = "\n". substitute(rv, '\\', '/', 'g') ."\n"
line 5:     let rv = substitute(rv, '\\', '/', 'g')
line 6:     if fl
line 7:         let rv = <SID>PurifyBits(rv)
line 8:     else
line 9:         let rp = substitute(a:path, '\\', '/', 'g')
line 10:         let rv = substitute("\n". rv, '\c\V\n\zs'. rp, '', 'g')
line 11:     endif
line 12:     return strpart(rv, 1)
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_GlobBits returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 4:         let g:tskelBits_{a:type}     = <SID>PurifyBits(g:tskelBitFiles_{a:type})
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits('')

line 1:     let rv = substitute("\n". a:bits ."\n", '\n\zs[^[:cntrl:]]\{-}[/.]\([^/.[:cntrl:]]\{-}\)\ze\n', '\1', 'g')
line 2:     let rv = DecodeURL(rv)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits..DecodeURL('

')

line 1:     let rv = ''
line 2:     let n  = 0
line 3:     let m  = strlen(a:url)
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 18:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits..DecodeURL returning '^@^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits

line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits returning '^@^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 5:         let g:tskelBitMinis_{a:type} = <SID>MiniBits(g:tskelBitsDir . a:type .'.txt')
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits('/home/kguest/.vim/skeletons/bits/html.txt')

line 1:     let c = <SID>ReadFile(a:filename)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits..<SNR>23_ReadFile('/home/kguest/.vim/skeletons/bits/html.txt')

line 1:     let t = @t
line 2:     try
line 3:         if filereadable(a:filename)
line 4:             call <SID>EditScratchBuffer('tmp')
line 5:             exec '0read '. a:filename
line 6:             norm! gg"tyG
line 7:             wincmd c
line 8:             return @t
line 9:         endif
line 10:     finally
line 11:         let @t = t
line 12:     endtry
line 13:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits..<SNR>23_ReadFile returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits

line 2:     if c =~ '\S'
line 3:         let c = substitute("\n". c, "\n\\+\\([^\t ]\\+\\)[\t ]\\+\\([^\n]\\+\\)",  '\=<SID>PrepareMiniBit(submatch(1), submatch(2))', 'g')
line 5:         return c
line 6:     endif
line 7:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 6:     endif
line 7:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type returning #1

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1('<SID>PrepareBits4Type("%s", 1)', 'general')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>PrepareBits4Type("general", 1)'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 20: let v = <SID>PrepareBits4Type("general", 1)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type('general', 1)

line 1:     let rv = exists('g:tskelBitFiles_'. a:type)
line 2:     if !rv || a:anyway
line 3:         let g:tskelBitFiles_{a:type} = <SID>GlobBits(g:tskelBitsDir . a:type .'/', 0)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_GlobBits('/home/kguest/.vim/skeletons/bits/general/', 0)

line 1:     let pt = "*"
line 2:     let fl = a:0 >= 1 ? a:1 : 1
line 3:     let rv = globpath(a:path, pt)
line 4:     " let rv = "\n". substitute(rv, '\\', '/', 'g') ."\n"
line 5:     let rv = substitute(rv, '\\', '/', 'g')
line 6:     if fl
line 7:         let rv = <SID>PurifyBits(rv)
line 8:     else
line 9:         let rp = substitute(a:path, '\\', '/', 'g')
line 10:         let rv = substitute("\n". rv, '\c\V\n\zs'. rp, '', 'g')
line 11:     endif
line 12:     return strpart(rv, 1)
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_GlobBits returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 4:         let g:tskelBits_{a:type}     = <SID>PurifyBits(g:tskelBitFiles_{a:type})
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits('')

line 1:     let rv = substitute("\n". a:bits ."\n", '\n\zs[^[:cntrl:]]\{-}[/.]\([^/.[:cntrl:]]\{-}\)\ze\n', '\1', 'g')
line 2:     let rv = DecodeURL(rv)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits..DecodeURL('

')

line 1:     let rv = ''
line 2:     let n  = 0
line 3:     let m  = strlen(a:url)
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 4:     while n < m
line 5:         let c = a:url[n]
line 6:         if c == '%'
line 7:             if a:url[n + 1] == '%'
line 8:                 let n = n + 1
line 9:             else
line 10:                 " let c = escape(nr2char('0x'. strpart(a:url, n + 1, 2)), '\')
line 11:                 let c = nr2char('0x'. strpart(a:url, n + 1, 2))
line 12:                 let n = n + 2
line 13:             endif
line 14:         endif
line 15:         let rv = rv.c
line 16:         let n = n + 1
line 17:     endwh
line 18:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits..DecodeURL returning '^@^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits

line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_PurifyBits returning '^@^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 5:         let g:tskelBitMinis_{a:type} = <SID>MiniBits(g:tskelBitsDir . a:type .'.txt')
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits('/home/kguest/.vim/skeletons/bits/general.txt')

line 1:     let c = <SID>ReadFile(a:filename)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits..<SNR>23_ReadFile('/home/kguest/.vim/skeletons/bits/general.txt')

line 1:     let t = @t
line 2:     try
line 3:         if filereadable(a:filename)
line 4:             call <SID>EditScratchBuffer('tmp')
line 5:             exec '0read '. a:filename
line 6:             norm! gg"tyG
line 7:             wincmd c
line 8:             return @t
line 9:         endif
line 10:     finally
line 11:         let @t = t
line 12:     endtry
line 13:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits..<SNR>23_ReadFile returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits

line 2:     if c =~ '\S'
line 3:         let c = substitute("\n". c, "\n\\+\\([^\t ]\\+\\)[\t ]\\+\\([^\n]\\+\\)",  '\=<SID>PrepareMiniBit(submatch(1), submatch(2))', 'g')
line 5:         return c
line 6:     endif
line 7:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type..<SNR>23_MiniBits returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type

line 6:     endif
line 7:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareBits4Type returning #1

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 29:     return strpart(rv, 1)
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect returning '1^@1^@1'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits

line 9:         if reset
line 10:             call <SID>Collect(bg, "<SID>PrepareMenu4Type(\"%s\")")
line 11:             call <SID>Collect(bg, "<SID>PrepareMap4Type(\"%s\", 1)")
line 12:         else
line 13:             call <SID>Collect(bg, "<SID>PrepareMap4Type(\"%s\", 0)")
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect('php
html
general', '<SID>PrepareMap4Type("%s", 0)')

line 1:     let onlyfirst = a:0 >= 1 ? a:1 : 0
line 2:     let sep       = a:0 >= 2 ? a:2 : "\n"
line 3:     let seplen = strlen(sep)
line 4:     let i  = 0
line 5:     let j  = 0
line 6:     let rv = ''
line 7:     let a  = a:array
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1('<SID>PrepareMap4Type("%s", 0)', 'php')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>PrepareMap4Type("php", 0)'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 20: let v = <SID>PrepareMap4Type("php", 0)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareMap4Type('php', 0)

line 1:     if !exists('g:tskelBitMap_'. a:type) || a:anyway
line 2:         let fn = g:tskelDir .'map/'. a:type
line 3:         let c  = <SID>ReadFile(fn)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareMap4Type..<SNR>23_ReadFile('/home/kguest/.vim/skeletons/map/php')

line 1:     let t = @t
line 2:     try
line 3:         if filereadable(a:filename)
line 4:             call <SID>EditScratchBuffer('tmp')
line 5:             exec '0read '. a:filename
line 6:             norm! gg"tyG
line 7:             wincmd c
line 8:             return @t
line 9:         endif
line 10:     finally
line 11:         let @t = t
line 12:     endtry
line 13:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareMap4Type..<SNR>23_ReadFile returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareMap4Type

line 4:         if c =~ '\S'
line 5:             let c = substitute("\n". c, "\n\\+\\([^\t ]\\+\\)[\t ]\\+\\([^\n]\\+\\)",  '\=<SID>PrepareConditionEntry(submatch(1), submatch(2))', 'g')
line 7:             let g:tskelBitMap_{a:type} = c
line 8:         endif
line 9:     endif
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareMap4Type returning #0

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1('<SID>PrepareMap4Type("%s", 0)', 'html')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>PrepareMap4Type("html", 0)'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 20: let v = <SID>PrepareMap4Type("html", 0)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareMap4Type('html', 0)

line 1:     if !exists('g:tskelBitMap_'. a:type) || a:anyway
line 2:         let fn = g:tskelDir .'map/'. a:type
line 3:         let c  = <SID>ReadFile(fn)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareMap4Type..<SNR>23_ReadFile('/home/kguest/.vim/skeletons/map/html')

line 1:     let t = @t
line 2:     try
line 3:         if filereadable(a:filename)
line 4:             call <SID>EditScratchBuffer('tmp')
line 5:             exec '0read '. a:filename
line 6:             norm! gg"tyG
line 7:             wincmd c
line 8:             return @t
line 9:         endif
line 10:     finally
line 11:         let @t = t
line 12:     endtry
line 13:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareMap4Type..<SNR>23_ReadFile returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareMap4Type

line 4:         if c =~ '\S'
line 5:             let c = substitute("\n". c, "\n\\+\\([^\t ]\\+\\)[\t ]\\+\\([^\n]\\+\\)",  '\=<SID>PrepareConditionEntry(submatch(1), submatch(2))', 'g')
line 7:             let g:tskelBitMap_{a:type} = c
line 8:         endif
line 9:     endif
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareMap4Type returning #0

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1('<SID>PrepareMap4Type("%s", 0)', 'general')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>PrepareMap4Type("general", 0)'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 20: let v = <SID>PrepareMap4Type("general", 0)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareMap4Type('general', 0)

line 1:     if !exists('g:tskelBitMap_'. a:type) || a:anyway
line 2:         let fn = g:tskelDir .'map/'. a:type
line 3:         let c  = <SID>ReadFile(fn)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareMap4Type..<SNR>23_ReadFile('/home/kguest/.vim/skeletons/map/general')

line 1:     let t = @t
line 2:     try
line 3:         if filereadable(a:filename)
line 4:             call <SID>EditScratchBuffer('tmp')
line 5:             exec '0read '. a:filename
line 6:             norm! gg"tyG
line 7:             wincmd c
line 8:             return @t
line 9:         endif
line 10:     finally
line 11:         let @t = t
line 12:     endtry
line 13:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareMap4Type..<SNR>23_ReadFile returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareMap4Type

line 4:         if c =~ '\S'
line 5:             let c = substitute("\n". c, "\n\\+\\([^\t ]\\+\\)[\t ]\\+\\([^\n]\\+\\)",  '\=<SID>PrepareConditionEntry(submatch(1), submatch(2))', 'g')
line 7:             let g:tskelBitMap_{a:type} = c
line 8:         endif
line 9:     endif
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_PrepareMap4Type returning #0

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 29:     return strpart(rv, 1)
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect returning '0^@0^@0'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits

line 14:         endif
line 15:     endif
line 16:     if reset || !exists('b:tskelMinis')
line 17:         let b:tskelMinis = <SID>MiniBits(expand('%:p:h') .'/.tskelmini') . <SID>Collect(bg, "<SID>GetMiniBits(\"%s\")")
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_MiniBits('/home/kguest/dev/code/SemanticScuttl...Scuttle/Service/TagExtractor/.tskelmini')

line 1:     let c = <SID>ReadFile(a:filename)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_MiniBits..<SNR>23_ReadFile('/home/kguest/dev/code/SemanticScuttl...Scuttle/Service/TagExtractor/.tskelmini')

line 1:     let t = @t
line 2:     try
line 3:         if filereadable(a:filename)
line 4:             call <SID>EditScratchBuffer('tmp')
line 5:             exec '0read '. a:filename
line 6:             norm! gg"tyG
line 7:             wincmd c
line 8:             return @t
line 9:         endif
line 10:     finally
line 11:         let @t = t
line 12:     endtry
line 13:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_MiniBits..<SNR>23_ReadFile returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_MiniBits

line 2:     if c =~ '\S'
line 3:         let c = substitute("\n". c, "\n\\+\\([^\t ]\\+\\)[\t ]\\+\\([^\n]\\+\\)",  '\=<SID>PrepareMiniBit(submatch(1), submatch(2))', 'g')
line 5:         return c
line 6:     endif
line 7:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_MiniBits returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits

calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect('php
html
general', '<SID>GetMiniBits("%s")')

line 1:     let onlyfirst = a:0 >= 1 ? a:1 : 0
line 2:     let sep       = a:0 >= 2 ? a:2 : "\n"
line 3:     let seplen = strlen(sep)
line 4:     let i  = 0
line 5:     let j  = 0
line 6:     let rv = ''
line 7:     let a  = a:array
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1('<SID>GetMiniBits("%s")', 'php')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>GetMiniBits("php")'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 20: let v = <SID>GetMiniBits("php")
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_GetMiniBits('php')

line 1:     if exists('g:tskelBitMinis_'. a:type) && g:tskelBitMinis_{a:type} =~ '\S'
line 2:         return ' | '. g:tskelBitMinis_{a:type}
line 3:     endif
line 4:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_GetMiniBits returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1('<SID>GetMiniBits("%s")', 'html')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>GetMiniBits("html")'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 20: let v = <SID>GetMiniBits("html")
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_GetMiniBits('html')

line 1:     if exists('g:tskelBitMinis_'. a:type) && g:tskelBitMinis_{a:type} =~ '\S'
line 2:         return ' | '. g:tskelBitMinis_{a:type}
line 3:     endif
line 4:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_GetMiniBits returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1('<SID>GetMiniBits("%s")', 'general')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>GetMiniBits("general")'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 20: let v = <SID>GetMiniBits("general")
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_GetMiniBits('general')

line 1:     if exists('g:tskelBitMinis_'. a:type) && g:tskelBitMinis_{a:type} =~ '\S'
line 2:         return ' | '. g:tskelBitMinis_{a:type}
line 3:     endif
line 4:     return ''
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_GetMiniBits returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 29:     return strpart(rv, 1)
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect returning '^@^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits

line 19:     endif
line 20:     let b:tskelBits = <SID>Collect(bg, "<SID>GetBits4Type(\"%s\")")
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect('php
html
general', '<SID>GetBits4Type("%s")')

line 1:     let onlyfirst = a:0 >= 1 ? a:1 : 0
line 2:     let sep       = a:0 >= 2 ? a:2 : "\n"
line 3:     let seplen = strlen(sep)
line 4:     let i  = 0
line 5:     let j  = 0
line 6:     let rv = ''
line 7:     let a  = a:array
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1('<SID>GetBits4Type("%s")', 'php')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>GetBits4Type("php")'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 20: let v = <SID>GetBits4Type("php")
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_GetBits4Type('php')

line 1:     return g:tskelBits_{a:type}
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_GetBits4Type returning '^@@&param^@@&return^@case^@class^@de...place^@switch^@var^@var_export^@while^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1('<SID>GetBits4Type("%s")', 'html')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>GetBits4Type("html")'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 20: let v = <SID>GetBits4Type("html")
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_GetBits4Type('html')

line 1:     return g:tskelBits_{a:type}
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_GetBits4Type returning '^@^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1('<SID>GetBits4Type("%s")', 'general')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>GetBits4Type("general")'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 20: let v = <SID>GetBits4Type("general")
calling function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_GetBits4Type('general')

line 1:     return g:tskelBits_{a:type}
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect..<SNR>23_GetBits4Type returning '^@^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 29:     return strpart(rv, 1)
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits..<SNR>23_Collect returning '^@@&param^@@&return^@case^@class^@de...h^@var^@var_export^@while^@^@^@^@^@^@^@'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits

line 21:     let b:tskelBits = substitute(b:tskelBits, '\n\n\+', '\n', 'g')
line 22:     if g:tskelPopupNumbered
line 23:         let b:tskelBits = substitute(b:tskelBits, '&', '', 'g')
line 24:     endif
function <SNR>23_BuildBufferMenu..<SNR>23_PrepareBits returning #0

continuing in function <SNR>23_BuildBufferMenu

line 3:         if s:tskelBuiltMenu == 1
line 4:             try
line 5:                 exec 'aunmenu '. g:tskelMenuPrefix
line 6:             finally
line 7:             endtry
line 8:         endif
line 9:         let pri  = g:tskelMenuPriority .'.'. 5
line 10:         exec 'amenu '. pri .' '. g:tskelMenuPrefix .'.Reset :TSkeletonBitReset<cr>'
line 10: amenu 90.5 TSke&l.Reset :TSkeletonBitReset<cr>
line 11:         exec 'amenu '. pri .' '. g:tskelMenuPrefix .'.-tskel1- :'
line 11: amenu 90.5 TSke&l.-tskel1- :
line 12:         let s:tskelBuiltMenu = 1
line 13:         let bg = <SID>GetBitGroup(&filetype, 1)
calling function <SNR>23_BuildBufferMenu..<SNR>23_GetBitGroup('php', 1)

line 1:     let general_first = a:0 >= 1 ? a:1 : 0
line 2:     if exists('g:tskelBitGroup_'. a:filetype)
line 3:         let rv = g:tskelBitGroup_{a:filetype}
line 4:     else
line 5:         let rv = a:filetype
line 6:     endif
line 7:     if general_first
line 8:         return "general\n". rv
function <SNR>23_BuildBufferMenu..<SNR>23_GetBitGroup returning 'general^@php^@html'

continuing in function <SNR>23_BuildBufferMenu

line 14:         call <SID>Collect(bg, "<SID>GetMenuCache(\"%s\")")
calling function <SNR>23_BuildBufferMenu..<SNR>23_Collect('general
php
html', '<SID>GetMenuCache("%s")')

line 1:     let onlyfirst = a:0 >= 1 ? a:1 : 0
line 2:     let sep       = a:0 >= 2 ? a:2 : "\n"
line 3:     let seplen = strlen(sep)
line 4:     let i  = 0
line 5:     let j  = 0
line 6:     let rv = ''
line 7:     let a  = a:array
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_sprintf1('<SID>GetMenuCache("%s")', 'general')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>GetMenuCache("general")'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_Collect

line 20: let v = <SID>GetMenuCache("general")
calling function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_GetMenuCache('general')

line 1:     let pg = <SID>GetMenuCacheFilename(a:type)
calling function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_GetMenuCache..<SNR>23_GetMenuCacheFilename('general')

line 1:     if a:type == ''
line 2:         return ''
line 3:     endif
line 4:     let d = g:tskelBitsDir . a:type .'/'
line 5:     if !isdirectory(d)
line 6:         return ''
function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_GetMenuCache..<SNR>23_GetMenuCacheFilename returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_GetMenuCache

line 2:     if filereadable(pg)
line 3:         exec 'source '. pg
line 4:     endif
function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_GetMenuCache returning #0

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_sprintf1('<SID>GetMenuCache("%s")', 'php')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>GetMenuCache("php")'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_Collect

line 20: let v = <SID>GetMenuCache("php")
calling function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_GetMenuCache('php')

line 1:     let pg = <SID>GetMenuCacheFilename(a:type)
calling function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_GetMenuCache..<SNR>23_GetMenuCacheFilename('php')

line 1:     if a:type == ''
line 2:         return ''
line 3:     endif
line 4:     let d = g:tskelBitsDir . a:type .'/'
line 5:     if !isdirectory(d)
line 6:         return ''
line 7:     endif
line 8:     " return d . g:tskelMenuCache
line 9:     return g:tskelDir .'menu/'. a:type
function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_GetMenuCache..<SNR>23_GetMenuCacheFilename returning '/home/kguest/.vim/skeletons/menu/php'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_GetMenuCache

line 2:     if filereadable(pg)
line 3:         exec 'source '. pg
line 3: source /home/kguest/.vim/skeletons/menu/php
chdir(/home/kguest/.vim/skeletons/menu)
fchdir() to previous dir
line 3: sourcing "/home/kguest/.vim/skeletons/menu/php"
line 1: 
line 2: 
line 3: amenu 90.19 TSke&l.@.@&param :call TSkeletonBit("@&param")<cr>
line 4: amenu 90.19 TSke&l.@.@&return :call TSkeletonBit("@&return")<cr>
line 5: amenu 90.20 TSke&l.case :call TSkeletonBit("case")<cr>
line 6: amenu 90.20 TSke&l.class :call TSkeletonBit("class")<cr>
line 7: amenu 90.20 TSke&l.define :call TSkeletonBit("define")<cr>
line 8: amenu 90.20 TSke&l.dowhile :call TSkeletonBit("dowhile")<cr>
line 9: amenu 90.20 TSke&l.elseif :call TSkeletonBit("elseif")<cr>
line 10: amenu 90.20 TSke&l.for :call TSkeletonBit("for")<cr>
line 11: amenu 90.20 TSke&l.for- :call TSkeletonBit("for-")<cr>
line 12: amenu 90.20 TSke&l.forall :call TSkeletonBit("forall")<cr>
line 13: amenu 90.20 TSke&l.foreach :call TSkeletonBit("foreach")<cr>
line 14: amenu 90.20 TSke&l.foreach_assoc :call TSkeletonBit("foreach_assoc")<cr>
line 15: amenu 90.20 TSke&l.function :call TSkeletonBit("function")<cr>
line 16: amenu 90.20 TSke&l.ifelse :call TSkeletonBit("ifelse")<cr>
line 17: amenu 90.20 TSke&l.php :call TSkeletonBit("php")<cr>
line 18: amenu 90.20 TSke&l.preg_replace :call TSkeletonBit("preg_replace")<cr>
line 19: amenu 90.20 TSke&l.switch :call TSkeletonBit("switch")<cr>
line 20: amenu 90.20 TSke&l.var :call TSkeletonBit("var")<cr>
line 21: amenu 90.20 TSke&l.var_export :call TSkeletonBit("var_export")<cr>
line 22: amenu 90.20 TSke&l.while :call TSkeletonBit("while")<cr>
finished sourcing /home/kguest/.vim/skeletons/menu/php
continuing in function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_GetMenuCache
line 4:     endif
function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_GetMenuCache returning #0

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return v
line 24:             endif
line 25:         else
line 26:             let rv = rv . sep . v
line 27:         endif
line 28:     endwh
line 8:     while j != -1
line 9:         " let j = match(a:array, sep, i)
line 10:         let j = stridx(a, sep)
line 11:         if j == -1
line 12:             " let t = strpart(a:array, i)
line 13:             let t = a
line 14:         else
line 15:             " let t = strpart(a:array, i, j - i)
line 16:             " let i = matchend(a:array, sep, i)
line 17:             let t = strpart(a, 0, j)
line 18:             let a = strpart(a, j  + seplen)
line 19:         endif
line 20:         exec 'let v = '. <SID>sprintf1(a:function, t)
calling function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_sprintf1('<SID>GetMenuCache("%s")', 'html')

line 1:     let rv = substitute(a:string, '\C[^%]\zs%s', escape(a:arg, '"\'), 'g')
line 2:     let rv = substitute(rv, '%%', '%', 'g')
line 3:     return rv
function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_sprintf1 returning '<SID>GetMenuCache("html")'

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_Collect

line 20: let v = <SID>GetMenuCache("html")
calling function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_GetMenuCache('html')

line 1:     let pg = <SID>GetMenuCacheFilename(a:type)
calling function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_GetMenuCache..<SNR>23_GetMenuCacheFilename('html')

line 1:     if a:type == ''
line 2:         return ''
line 3:     endif
line 4:     let d = g:tskelBitsDir . a:type .'/'
line 5:     if !isdirectory(d)
line 6:         return ''
function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_GetMenuCache..<SNR>23_GetMenuCacheFilename returning ''

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_GetMenuCache

line 2:     if filereadable(pg)
line 3:         exec 'source '. pg
line 4:     endif
function <SNR>23_BuildBufferMenu..<SNR>23_Collect..<SNR>23_GetMenuCache returning #0

continuing in function <SNR>23_BuildBufferMenu..<SNR>23_Collect

line 21:         if onlyfirst
line 22:             if v != ''
line 23:                 return